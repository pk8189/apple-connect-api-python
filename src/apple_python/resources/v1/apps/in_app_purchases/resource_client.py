"""File Generated by Sideko (sideko.dev)"""

from apple_python.core import (
    default_request_options,
    AsyncBaseClient,
    SyncBaseClient,
    RequestOptions,
    QueryParams,
    encode_param,
)
import typing
import typing_extensions
from apple_python.types.v1.apps.in_app_purchases import models


class InAppPurchasesClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def list(
        self,
        *,
        id: str,
        fields_apps: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "alternativeDistributionKey",
                    "analyticsReportRequests",
                    "appAvailability",
                    "appClips",
                    "appCustomProductPages",
                    "appEncryptionDeclarations",
                    "appEvents",
                    "appInfos",
                    "appPricePoints",
                    "appPriceSchedule",
                    "appStoreVersionExperimentsV2",
                    "appStoreVersions",
                    "betaAppLocalizations",
                    "betaAppReviewDetail",
                    "betaGroups",
                    "betaLicenseAgreement",
                    "betaTesters",
                    "builds",
                    "bundleId",
                    "ciProduct",
                    "contentRightsDeclaration",
                    "customerReviews",
                    "endUserLicenseAgreement",
                    "gameCenterDetail",
                    "gameCenterEnabledVersions",
                    "inAppPurchases",
                    "inAppPurchasesV2",
                    "isOrEverWasMadeForKids",
                    "marketplaceSearchDetail",
                    "name",
                    "perfPowerMetrics",
                    "preOrder",
                    "preReleaseVersions",
                    "primaryLocale",
                    "promotedPurchases",
                    "reviewSubmissions",
                    "sku",
                    "subscriptionGracePeriod",
                    "subscriptionGroups",
                    "subscriptionStatusUrl",
                    "subscriptionStatusUrlForSandbox",
                    "subscriptionStatusUrlVersion",
                    "subscriptionStatusUrlVersionForSandbox",
                ]
            ]
        ] = None,
        fields_in_app_purchases: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "apps", "inAppPurchaseType", "productId", "referenceName", "state"
                ]
            ]
        ] = None,
        filter_can_be_submitted: typing.Optional[typing.List[str]] = None,
        filter_in_app_purchase_type: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "AUTOMATICALLY_RENEWABLE_SUBSCRIPTION",
                    "NON_CONSUMABLE",
                    "CONSUMABLE",
                    "NON_RENEWING_SUBSCRIPTION",
                    "FREE_SUBSCRIPTION",
                ]
            ]
        ] = None,
        include: typing.Optional[typing.List[typing_extensions.Literal["apps"]]] = None,
        limit: typing.Optional[int] = None,
        limit_apps: typing.Optional[int] = None,
        sort: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "inAppPurchaseType",
                    "-inAppPurchaseType",
                    "productId",
                    "-productId",
                    "referenceName",
                    "-referenceName",
                ]
            ]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.InAppPurchasesResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_apps is not None:
            _query["fields[apps]"] = encode_param(fields_apps, False)
        if fields_in_app_purchases is not None:
            _query["fields[inAppPurchases]"] = encode_param(
                fields_in_app_purchases, False
            )
        if filter_can_be_submitted is not None:
            _query["filter[canBeSubmitted]"] = encode_param(
                filter_can_be_submitted, False
            )
        if filter_in_app_purchase_type is not None:
            _query["filter[inAppPurchaseType]"] = encode_param(
                filter_in_app_purchase_type, False
            )
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if limit_apps is not None:
            _query["limit[apps]"] = encode_param(limit_apps, False)
        if sort is not None:
            _query["sort"] = encode_param(sort, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v1/apps/{id}/inAppPurchases",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.InAppPurchasesResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncInAppPurchasesClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def list(
        self,
        *,
        id: str,
        fields_apps: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "alternativeDistributionKey",
                    "analyticsReportRequests",
                    "appAvailability",
                    "appClips",
                    "appCustomProductPages",
                    "appEncryptionDeclarations",
                    "appEvents",
                    "appInfos",
                    "appPricePoints",
                    "appPriceSchedule",
                    "appStoreVersionExperimentsV2",
                    "appStoreVersions",
                    "betaAppLocalizations",
                    "betaAppReviewDetail",
                    "betaGroups",
                    "betaLicenseAgreement",
                    "betaTesters",
                    "builds",
                    "bundleId",
                    "ciProduct",
                    "contentRightsDeclaration",
                    "customerReviews",
                    "endUserLicenseAgreement",
                    "gameCenterDetail",
                    "gameCenterEnabledVersions",
                    "inAppPurchases",
                    "inAppPurchasesV2",
                    "isOrEverWasMadeForKids",
                    "marketplaceSearchDetail",
                    "name",
                    "perfPowerMetrics",
                    "preOrder",
                    "preReleaseVersions",
                    "primaryLocale",
                    "promotedPurchases",
                    "reviewSubmissions",
                    "sku",
                    "subscriptionGracePeriod",
                    "subscriptionGroups",
                    "subscriptionStatusUrl",
                    "subscriptionStatusUrlForSandbox",
                    "subscriptionStatusUrlVersion",
                    "subscriptionStatusUrlVersionForSandbox",
                ]
            ]
        ] = None,
        fields_in_app_purchases: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "apps", "inAppPurchaseType", "productId", "referenceName", "state"
                ]
            ]
        ] = None,
        filter_can_be_submitted: typing.Optional[typing.List[str]] = None,
        filter_in_app_purchase_type: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "AUTOMATICALLY_RENEWABLE_SUBSCRIPTION",
                    "NON_CONSUMABLE",
                    "CONSUMABLE",
                    "NON_RENEWING_SUBSCRIPTION",
                    "FREE_SUBSCRIPTION",
                ]
            ]
        ] = None,
        include: typing.Optional[typing.List[typing_extensions.Literal["apps"]]] = None,
        limit: typing.Optional[int] = None,
        limit_apps: typing.Optional[int] = None,
        sort: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "inAppPurchaseType",
                    "-inAppPurchaseType",
                    "productId",
                    "-productId",
                    "referenceName",
                    "-referenceName",
                ]
            ]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.InAppPurchasesResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_apps is not None:
            _query["fields[apps]"] = encode_param(fields_apps, False)
        if fields_in_app_purchases is not None:
            _query["fields[inAppPurchases]"] = encode_param(
                fields_in_app_purchases, False
            )
        if filter_can_be_submitted is not None:
            _query["filter[canBeSubmitted]"] = encode_param(
                filter_can_be_submitted, False
            )
        if filter_in_app_purchase_type is not None:
            _query["filter[inAppPurchaseType]"] = encode_param(
                filter_in_app_purchase_type, False
            )
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if limit_apps is not None:
            _query["limit[apps]"] = encode_param(limit_apps, False)
        if sort is not None:
            _query["sort"] = encode_param(sort, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v1/apps/{id}/inAppPurchases",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.InAppPurchasesResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
