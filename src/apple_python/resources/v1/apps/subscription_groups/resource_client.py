"""File Generated by Sideko (sideko.dev)"""

from apple_python.core import (
    AsyncBaseClient,
    QueryParams,
    RequestOptions,
    default_request_options,
    SyncBaseClient,
    encode_param,
)
import typing
import typing_extensions
from apple_python.types.v1.apps.subscription_groups import models


class SubscriptionGroupsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def list(
        self,
        *,
        id: str,
        fields_subscription_group_localizations: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "customAppName", "locale", "name", "state", "subscriptionGroup"
                ]
            ]
        ] = None,
        fields_subscription_groups: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "referenceName",
                    "subscriptionGroupLocalizations",
                    "subscriptions",
                ]
            ]
        ] = None,
        fields_subscriptions: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appStoreReviewScreenshot",
                    "familySharable",
                    "group",
                    "groupLevel",
                    "introductoryOffers",
                    "name",
                    "offerCodes",
                    "pricePoints",
                    "prices",
                    "productId",
                    "promotedPurchase",
                    "promotionalOffers",
                    "reviewNote",
                    "state",
                    "subscriptionAvailability",
                    "subscriptionLocalizations",
                    "subscriptionPeriod",
                ]
            ]
        ] = None,
        filter_reference_name: typing.Optional[typing.List[str]] = None,
        filter_subscriptions_state: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "MISSING_METADATA",
                    "READY_TO_SUBMIT",
                    "WAITING_FOR_REVIEW",
                    "IN_REVIEW",
                    "DEVELOPER_ACTION_NEEDED",
                    "PENDING_BINARY_APPROVAL",
                    "APPROVED",
                    "DEVELOPER_REMOVED_FROM_SALE",
                    "REMOVED_FROM_SALE",
                    "REJECTED",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "subscriptionGroupLocalizations", "subscriptions"
                ]
            ]
        ] = None,
        limit: typing.Optional[int] = None,
        limit_subscription_group_localizations: typing.Optional[int] = None,
        limit_subscriptions: typing.Optional[int] = None,
        sort: typing.Optional[
            typing.List[typing_extensions.Literal["referenceName", "-referenceName"]]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.SubscriptionGroupsResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_subscription_group_localizations is not None:
            _query["fields[subscriptionGroupLocalizations]"] = encode_param(
                fields_subscription_group_localizations, False
            )
        if fields_subscription_groups is not None:
            _query["fields[subscriptionGroups]"] = encode_param(
                fields_subscription_groups, False
            )
        if fields_subscriptions is not None:
            _query["fields[subscriptions]"] = encode_param(fields_subscriptions, False)
        if filter_reference_name is not None:
            _query["filter[referenceName]"] = encode_param(filter_reference_name, False)
        if filter_subscriptions_state is not None:
            _query["filter[subscriptions.state]"] = encode_param(
                filter_subscriptions_state, False
            )
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if limit_subscription_group_localizations is not None:
            _query["limit[subscriptionGroupLocalizations]"] = encode_param(
                limit_subscription_group_localizations, False
            )
        if limit_subscriptions is not None:
            _query["limit[subscriptions]"] = encode_param(limit_subscriptions, False)
        if sort is not None:
            _query["sort"] = encode_param(sort, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v1/apps/{id}/subscriptionGroups",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.SubscriptionGroupsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncSubscriptionGroupsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def list(
        self,
        *,
        id: str,
        fields_subscription_group_localizations: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "customAppName", "locale", "name", "state", "subscriptionGroup"
                ]
            ]
        ] = None,
        fields_subscription_groups: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "referenceName",
                    "subscriptionGroupLocalizations",
                    "subscriptions",
                ]
            ]
        ] = None,
        fields_subscriptions: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appStoreReviewScreenshot",
                    "familySharable",
                    "group",
                    "groupLevel",
                    "introductoryOffers",
                    "name",
                    "offerCodes",
                    "pricePoints",
                    "prices",
                    "productId",
                    "promotedPurchase",
                    "promotionalOffers",
                    "reviewNote",
                    "state",
                    "subscriptionAvailability",
                    "subscriptionLocalizations",
                    "subscriptionPeriod",
                ]
            ]
        ] = None,
        filter_reference_name: typing.Optional[typing.List[str]] = None,
        filter_subscriptions_state: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "MISSING_METADATA",
                    "READY_TO_SUBMIT",
                    "WAITING_FOR_REVIEW",
                    "IN_REVIEW",
                    "DEVELOPER_ACTION_NEEDED",
                    "PENDING_BINARY_APPROVAL",
                    "APPROVED",
                    "DEVELOPER_REMOVED_FROM_SALE",
                    "REMOVED_FROM_SALE",
                    "REJECTED",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "subscriptionGroupLocalizations", "subscriptions"
                ]
            ]
        ] = None,
        limit: typing.Optional[int] = None,
        limit_subscription_group_localizations: typing.Optional[int] = None,
        limit_subscriptions: typing.Optional[int] = None,
        sort: typing.Optional[
            typing.List[typing_extensions.Literal["referenceName", "-referenceName"]]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.SubscriptionGroupsResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_subscription_group_localizations is not None:
            _query["fields[subscriptionGroupLocalizations]"] = encode_param(
                fields_subscription_group_localizations, False
            )
        if fields_subscription_groups is not None:
            _query["fields[subscriptionGroups]"] = encode_param(
                fields_subscription_groups, False
            )
        if fields_subscriptions is not None:
            _query["fields[subscriptions]"] = encode_param(fields_subscriptions, False)
        if filter_reference_name is not None:
            _query["filter[referenceName]"] = encode_param(filter_reference_name, False)
        if filter_subscriptions_state is not None:
            _query["filter[subscriptions.state]"] = encode_param(
                filter_subscriptions_state, False
            )
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if limit_subscription_group_localizations is not None:
            _query["limit[subscriptionGroupLocalizations]"] = encode_param(
                limit_subscription_group_localizations, False
            )
        if limit_subscriptions is not None:
            _query["limit[subscriptions]"] = encode_param(limit_subscriptions, False)
        if sort is not None:
            _query["sort"] = encode_param(sort, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v1/apps/{id}/subscriptionGroups",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.SubscriptionGroupsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
