"""File Generated by Sideko (sideko.dev)"""

from apple_python.core import (
    encode_param,
    SyncBaseClient,
    RequestOptions,
    AsyncBaseClient,
    QueryParams,
    default_request_options,
)
import typing
import typing_extensions
from apple_python.types.v1.apps.app_events import models


class AppEventsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def list(
        self,
        *,
        id: str,
        fields_app_event_localizations: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appEvent",
                    "appEventScreenshots",
                    "appEventVideoClips",
                    "locale",
                    "longDescription",
                    "name",
                    "shortDescription",
                ]
            ]
        ] = None,
        fields_app_events: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "archivedTerritorySchedules",
                    "badge",
                    "deepLink",
                    "eventState",
                    "localizations",
                    "primaryLocale",
                    "priority",
                    "purchaseRequirement",
                    "purpose",
                    "referenceName",
                    "territorySchedules",
                ]
            ]
        ] = None,
        filter_event_state: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "DRAFT",
                    "READY_FOR_REVIEW",
                    "WAITING_FOR_REVIEW",
                    "IN_REVIEW",
                    "REJECTED",
                    "ACCEPTED",
                    "APPROVED",
                    "PUBLISHED",
                    "PAST",
                    "ARCHIVED",
                ]
            ]
        ] = None,
        filter_id: typing.Optional[typing.List[str]] = None,
        include: typing.Optional[
            typing.List[typing_extensions.Literal["localizations"]]
        ] = None,
        limit: typing.Optional[int] = None,
        limit_localizations: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AppEventsResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_app_event_localizations is not None:
            _query["fields[appEventLocalizations]"] = encode_param(
                fields_app_event_localizations, False
            )
        if fields_app_events is not None:
            _query["fields[appEvents]"] = encode_param(fields_app_events, False)
        if filter_event_state is not None:
            _query["filter[eventState]"] = encode_param(filter_event_state, False)
        if filter_id is not None:
            _query["filter[id]"] = encode_param(filter_id, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if limit_localizations is not None:
            _query["limit[localizations]"] = encode_param(limit_localizations, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v1/apps/{id}/appEvents",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.AppEventsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncAppEventsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def list(
        self,
        *,
        id: str,
        fields_app_event_localizations: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appEvent",
                    "appEventScreenshots",
                    "appEventVideoClips",
                    "locale",
                    "longDescription",
                    "name",
                    "shortDescription",
                ]
            ]
        ] = None,
        fields_app_events: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "archivedTerritorySchedules",
                    "badge",
                    "deepLink",
                    "eventState",
                    "localizations",
                    "primaryLocale",
                    "priority",
                    "purchaseRequirement",
                    "purpose",
                    "referenceName",
                    "territorySchedules",
                ]
            ]
        ] = None,
        filter_event_state: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "DRAFT",
                    "READY_FOR_REVIEW",
                    "WAITING_FOR_REVIEW",
                    "IN_REVIEW",
                    "REJECTED",
                    "ACCEPTED",
                    "APPROVED",
                    "PUBLISHED",
                    "PAST",
                    "ARCHIVED",
                ]
            ]
        ] = None,
        filter_id: typing.Optional[typing.List[str]] = None,
        include: typing.Optional[
            typing.List[typing_extensions.Literal["localizations"]]
        ] = None,
        limit: typing.Optional[int] = None,
        limit_localizations: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AppEventsResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_app_event_localizations is not None:
            _query["fields[appEventLocalizations]"] = encode_param(
                fields_app_event_localizations, False
            )
        if fields_app_events is not None:
            _query["fields[appEvents]"] = encode_param(fields_app_events, False)
        if filter_event_state is not None:
            _query["filter[eventState]"] = encode_param(filter_event_state, False)
        if filter_id is not None:
            _query["filter[id]"] = encode_param(filter_id, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if limit_localizations is not None:
            _query["limit[localizations]"] = encode_param(limit_localizations, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v1/apps/{id}/appEvents",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.AppEventsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
