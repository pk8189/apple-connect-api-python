"""File Generated by Sideko (sideko.dev)"""

from apple_python.core import (
    AsyncBaseClient,
    RequestOptions,
    encode_param,
    SyncBaseClient,
    QueryParams,
    default_request_options,
)
import typing
import typing_extensions
from apple_python.types.v1.apps.app_infos import models


class AppInfosClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def list(
        self,
        *,
        id: str,
        fields_age_rating_declarations: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "ageRatingOverride",
                    "alcoholTobaccoOrDrugUseOrReferences",
                    "contests",
                    "gambling",
                    "gamblingAndContests",
                    "gamblingSimulated",
                    "horrorOrFearThemes",
                    "kidsAgeBand",
                    "matureOrSuggestiveThemes",
                    "medicalOrTreatmentInformation",
                    "profanityOrCrudeHumor",
                    "seventeenPlus",
                    "sexualContentGraphicAndNudity",
                    "sexualContentOrNudity",
                    "unrestrictedWebAccess",
                    "violenceCartoonOrFantasy",
                    "violenceRealistic",
                    "violenceRealisticProlongedGraphicOrSadistic",
                ]
            ]
        ] = None,
        fields_app_categories: typing.Optional[
            typing.List[
                typing_extensions.Literal["parent", "platforms", "subcategories"]
            ]
        ] = None,
        fields_app_info_localizations: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appInfo",
                    "locale",
                    "name",
                    "privacyChoicesUrl",
                    "privacyPolicyText",
                    "privacyPolicyUrl",
                    "subtitle",
                ]
            ]
        ] = None,
        fields_app_infos: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "ageRatingDeclaration",
                    "app",
                    "appInfoLocalizations",
                    "appStoreAgeRating",
                    "appStoreState",
                    "brazilAgeRating",
                    "brazilAgeRatingV2",
                    "kidsAgeBand",
                    "primaryCategory",
                    "primarySubcategoryOne",
                    "primarySubcategoryTwo",
                    "secondaryCategory",
                    "secondarySubcategoryOne",
                    "secondarySubcategoryTwo",
                    "state",
                ]
            ]
        ] = None,
        fields_apps: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "alternativeDistributionKey",
                    "analyticsReportRequests",
                    "appAvailability",
                    "appClips",
                    "appCustomProductPages",
                    "appEncryptionDeclarations",
                    "appEvents",
                    "appInfos",
                    "appPricePoints",
                    "appPriceSchedule",
                    "appStoreVersionExperimentsV2",
                    "appStoreVersions",
                    "betaAppLocalizations",
                    "betaAppReviewDetail",
                    "betaGroups",
                    "betaLicenseAgreement",
                    "betaTesters",
                    "builds",
                    "bundleId",
                    "ciProduct",
                    "contentRightsDeclaration",
                    "customerReviews",
                    "endUserLicenseAgreement",
                    "gameCenterDetail",
                    "gameCenterEnabledVersions",
                    "inAppPurchases",
                    "inAppPurchasesV2",
                    "isOrEverWasMadeForKids",
                    "marketplaceSearchDetail",
                    "name",
                    "perfPowerMetrics",
                    "preOrder",
                    "preReleaseVersions",
                    "primaryLocale",
                    "promotedPurchases",
                    "reviewSubmissions",
                    "sku",
                    "subscriptionGracePeriod",
                    "subscriptionGroups",
                    "subscriptionStatusUrl",
                    "subscriptionStatusUrlForSandbox",
                    "subscriptionStatusUrlVersion",
                    "subscriptionStatusUrlVersionForSandbox",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "ageRatingDeclaration",
                    "app",
                    "appInfoLocalizations",
                    "primaryCategory",
                    "primarySubcategoryOne",
                    "primarySubcategoryTwo",
                    "secondaryCategory",
                    "secondarySubcategoryOne",
                    "secondarySubcategoryTwo",
                ]
            ]
        ] = None,
        limit: typing.Optional[int] = None,
        limit_app_info_localizations: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AppInfosResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_age_rating_declarations is not None:
            _query["fields[ageRatingDeclarations]"] = encode_param(
                fields_age_rating_declarations, False
            )
        if fields_app_categories is not None:
            _query["fields[appCategories]"] = encode_param(fields_app_categories, False)
        if fields_app_info_localizations is not None:
            _query["fields[appInfoLocalizations]"] = encode_param(
                fields_app_info_localizations, False
            )
        if fields_app_infos is not None:
            _query["fields[appInfos]"] = encode_param(fields_app_infos, False)
        if fields_apps is not None:
            _query["fields[apps]"] = encode_param(fields_apps, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if limit_app_info_localizations is not None:
            _query["limit[appInfoLocalizations]"] = encode_param(
                limit_app_info_localizations, False
            )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v1/apps/{id}/appInfos",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.AppInfosResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncAppInfosClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def list(
        self,
        *,
        id: str,
        fields_age_rating_declarations: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "ageRatingOverride",
                    "alcoholTobaccoOrDrugUseOrReferences",
                    "contests",
                    "gambling",
                    "gamblingAndContests",
                    "gamblingSimulated",
                    "horrorOrFearThemes",
                    "kidsAgeBand",
                    "matureOrSuggestiveThemes",
                    "medicalOrTreatmentInformation",
                    "profanityOrCrudeHumor",
                    "seventeenPlus",
                    "sexualContentGraphicAndNudity",
                    "sexualContentOrNudity",
                    "unrestrictedWebAccess",
                    "violenceCartoonOrFantasy",
                    "violenceRealistic",
                    "violenceRealisticProlongedGraphicOrSadistic",
                ]
            ]
        ] = None,
        fields_app_categories: typing.Optional[
            typing.List[
                typing_extensions.Literal["parent", "platforms", "subcategories"]
            ]
        ] = None,
        fields_app_info_localizations: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appInfo",
                    "locale",
                    "name",
                    "privacyChoicesUrl",
                    "privacyPolicyText",
                    "privacyPolicyUrl",
                    "subtitle",
                ]
            ]
        ] = None,
        fields_app_infos: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "ageRatingDeclaration",
                    "app",
                    "appInfoLocalizations",
                    "appStoreAgeRating",
                    "appStoreState",
                    "brazilAgeRating",
                    "brazilAgeRatingV2",
                    "kidsAgeBand",
                    "primaryCategory",
                    "primarySubcategoryOne",
                    "primarySubcategoryTwo",
                    "secondaryCategory",
                    "secondarySubcategoryOne",
                    "secondarySubcategoryTwo",
                    "state",
                ]
            ]
        ] = None,
        fields_apps: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "alternativeDistributionKey",
                    "analyticsReportRequests",
                    "appAvailability",
                    "appClips",
                    "appCustomProductPages",
                    "appEncryptionDeclarations",
                    "appEvents",
                    "appInfos",
                    "appPricePoints",
                    "appPriceSchedule",
                    "appStoreVersionExperimentsV2",
                    "appStoreVersions",
                    "betaAppLocalizations",
                    "betaAppReviewDetail",
                    "betaGroups",
                    "betaLicenseAgreement",
                    "betaTesters",
                    "builds",
                    "bundleId",
                    "ciProduct",
                    "contentRightsDeclaration",
                    "customerReviews",
                    "endUserLicenseAgreement",
                    "gameCenterDetail",
                    "gameCenterEnabledVersions",
                    "inAppPurchases",
                    "inAppPurchasesV2",
                    "isOrEverWasMadeForKids",
                    "marketplaceSearchDetail",
                    "name",
                    "perfPowerMetrics",
                    "preOrder",
                    "preReleaseVersions",
                    "primaryLocale",
                    "promotedPurchases",
                    "reviewSubmissions",
                    "sku",
                    "subscriptionGracePeriod",
                    "subscriptionGroups",
                    "subscriptionStatusUrl",
                    "subscriptionStatusUrlForSandbox",
                    "subscriptionStatusUrlVersion",
                    "subscriptionStatusUrlVersionForSandbox",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "ageRatingDeclaration",
                    "app",
                    "appInfoLocalizations",
                    "primaryCategory",
                    "primarySubcategoryOne",
                    "primarySubcategoryTwo",
                    "secondaryCategory",
                    "secondarySubcategoryOne",
                    "secondarySubcategoryTwo",
                ]
            ]
        ] = None,
        limit: typing.Optional[int] = None,
        limit_app_info_localizations: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AppInfosResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_age_rating_declarations is not None:
            _query["fields[ageRatingDeclarations]"] = encode_param(
                fields_age_rating_declarations, False
            )
        if fields_app_categories is not None:
            _query["fields[appCategories]"] = encode_param(fields_app_categories, False)
        if fields_app_info_localizations is not None:
            _query["fields[appInfoLocalizations]"] = encode_param(
                fields_app_info_localizations, False
            )
        if fields_app_infos is not None:
            _query["fields[appInfos]"] = encode_param(fields_app_infos, False)
        if fields_apps is not None:
            _query["fields[apps]"] = encode_param(fields_apps, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if limit_app_info_localizations is not None:
            _query["limit[appInfoLocalizations]"] = encode_param(
                limit_app_info_localizations, False
            )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v1/apps/{id}/appInfos",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.AppInfosResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
