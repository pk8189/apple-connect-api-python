"""File Generated by Sideko (sideko.dev)"""

from apple_python.core import (
    RequestOptions,
    to_encodable,
    encode_param,
    AsyncBaseClient,
    QueryParams,
    SyncBaseClient,
    default_request_options,
)
from apple_python.resources.v1.game_center_leaderboards.group_leaderboard import (
    GroupLeaderboardClient,
    AsyncGroupLeaderboardClient,
)
from apple_python.resources.v1.game_center_leaderboards.localizations import (
    AsyncLocalizationsClient,
    LocalizationsClient,
)
from apple_python.resources.v1.game_center_leaderboards.relationships import (
    AsyncRelationshipsClient,
    RelationshipsClient,
)
from apple_python.resources.v1.game_center_leaderboards.releases import (
    ReleasesClient,
    AsyncReleasesClient,
)
import typing
import typing_extensions
from apple_python.types.v1.game_center_leaderboards import params, models


class GameCenterLeaderboardsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.group_leaderboard = GroupLeaderboardClient(base_client=self._base_client)
        self.localizations = LocalizationsClient(base_client=self._base_client)
        self.relationships = RelationshipsClient(base_client=self._base_client)
        self.releases = ReleasesClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)
    def create(
        self,
        *,
        data: params.GameCenterLeaderboardCreateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GameCenterLeaderboardResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerGameCenterLeaderboardCreateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="POST",
            path="/v1/gameCenterLeaderboards",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.GameCenterLeaderboardResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def patch(
        self,
        *,
        data: params.GameCenterLeaderboardUpdateRequest,
        id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GameCenterLeaderboardResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerGameCenterLeaderboardUpdateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="PATCH",
            path=f"/v1/gameCenterLeaderboards/{id}",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.GameCenterLeaderboardResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def get(
        self,
        *,
        id: str,
        fields_game_center_leaderboard_localizations: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "formatterOverride",
                    "formatterSuffix",
                    "formatterSuffixSingular",
                    "gameCenterLeaderboard",
                    "gameCenterLeaderboardImage",
                    "locale",
                    "name",
                ]
            ]
        ] = None,
        fields_game_center_leaderboard_releases: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "gameCenterDetail", "gameCenterLeaderboard", "live"
                ]
            ]
        ] = None,
        fields_game_center_leaderboards: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "archived",
                    "defaultFormatter",
                    "gameCenterDetail",
                    "gameCenterGroup",
                    "gameCenterLeaderboardSets",
                    "groupLeaderboard",
                    "localizations",
                    "recurrenceDuration",
                    "recurrenceRule",
                    "recurrenceStartDate",
                    "referenceName",
                    "releases",
                    "scoreRangeEnd",
                    "scoreRangeStart",
                    "scoreSortType",
                    "submissionType",
                    "vendorIdentifier",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "gameCenterDetail",
                    "gameCenterGroup",
                    "gameCenterLeaderboardSets",
                    "groupLeaderboard",
                    "localizations",
                    "releases",
                ]
            ]
        ] = None,
        limit_game_center_leaderboard_sets: typing.Optional[int] = None,
        limit_localizations: typing.Optional[int] = None,
        limit_releases: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GameCenterLeaderboardResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_game_center_leaderboard_localizations is not None:
            _query["fields[gameCenterLeaderboardLocalizations]"] = encode_param(
                fields_game_center_leaderboard_localizations, False
            )
        if fields_game_center_leaderboard_releases is not None:
            _query["fields[gameCenterLeaderboardReleases]"] = encode_param(
                fields_game_center_leaderboard_releases, False
            )
        if fields_game_center_leaderboards is not None:
            _query["fields[gameCenterLeaderboards]"] = encode_param(
                fields_game_center_leaderboards, False
            )
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit_game_center_leaderboard_sets is not None:
            _query["limit[gameCenterLeaderboardSets]"] = encode_param(
                limit_game_center_leaderboard_sets, False
            )
        if limit_localizations is not None:
            _query["limit[localizations]"] = encode_param(limit_localizations, False)
        if limit_releases is not None:
            _query["limit[releases]"] = encode_param(limit_releases, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v1/gameCenterLeaderboards/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.GameCenterLeaderboardResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def delete(
        self, *, id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="DELETE",
            path=f"/v1/gameCenterLeaderboards/{id}",
            auth_names=["itc-bearer-token"],
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncGameCenterLeaderboardsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.group_leaderboard = AsyncGroupLeaderboardClient(
            base_client=self._base_client
        )
        self.localizations = AsyncLocalizationsClient(base_client=self._base_client)
        self.relationships = AsyncRelationshipsClient(base_client=self._base_client)
        self.releases = AsyncReleasesClient(base_client=self._base_client)

    # register async api methods (keep comment for code generation)
    async def create(
        self,
        *,
        data: params.GameCenterLeaderboardCreateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GameCenterLeaderboardResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerGameCenterLeaderboardCreateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="POST",
            path="/v1/gameCenterLeaderboards",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.GameCenterLeaderboardResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def patch(
        self,
        *,
        data: params.GameCenterLeaderboardUpdateRequest,
        id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GameCenterLeaderboardResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerGameCenterLeaderboardUpdateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="PATCH",
            path=f"/v1/gameCenterLeaderboards/{id}",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.GameCenterLeaderboardResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def get(
        self,
        *,
        id: str,
        fields_game_center_leaderboard_localizations: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "formatterOverride",
                    "formatterSuffix",
                    "formatterSuffixSingular",
                    "gameCenterLeaderboard",
                    "gameCenterLeaderboardImage",
                    "locale",
                    "name",
                ]
            ]
        ] = None,
        fields_game_center_leaderboard_releases: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "gameCenterDetail", "gameCenterLeaderboard", "live"
                ]
            ]
        ] = None,
        fields_game_center_leaderboards: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "archived",
                    "defaultFormatter",
                    "gameCenterDetail",
                    "gameCenterGroup",
                    "gameCenterLeaderboardSets",
                    "groupLeaderboard",
                    "localizations",
                    "recurrenceDuration",
                    "recurrenceRule",
                    "recurrenceStartDate",
                    "referenceName",
                    "releases",
                    "scoreRangeEnd",
                    "scoreRangeStart",
                    "scoreSortType",
                    "submissionType",
                    "vendorIdentifier",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "gameCenterDetail",
                    "gameCenterGroup",
                    "gameCenterLeaderboardSets",
                    "groupLeaderboard",
                    "localizations",
                    "releases",
                ]
            ]
        ] = None,
        limit_game_center_leaderboard_sets: typing.Optional[int] = None,
        limit_localizations: typing.Optional[int] = None,
        limit_releases: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GameCenterLeaderboardResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_game_center_leaderboard_localizations is not None:
            _query["fields[gameCenterLeaderboardLocalizations]"] = encode_param(
                fields_game_center_leaderboard_localizations, False
            )
        if fields_game_center_leaderboard_releases is not None:
            _query["fields[gameCenterLeaderboardReleases]"] = encode_param(
                fields_game_center_leaderboard_releases, False
            )
        if fields_game_center_leaderboards is not None:
            _query["fields[gameCenterLeaderboards]"] = encode_param(
                fields_game_center_leaderboards, False
            )
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit_game_center_leaderboard_sets is not None:
            _query["limit[gameCenterLeaderboardSets]"] = encode_param(
                limit_game_center_leaderboard_sets, False
            )
        if limit_localizations is not None:
            _query["limit[localizations]"] = encode_param(limit_localizations, False)
        if limit_releases is not None:
            _query["limit[releases]"] = encode_param(limit_releases, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v1/gameCenterLeaderboards/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.GameCenterLeaderboardResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def delete(
        self, *, id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="DELETE",
            path=f"/v1/gameCenterLeaderboards/{id}",
            auth_names=["itc-bearer-token"],
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
