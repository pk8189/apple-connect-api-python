"""File Generated by Sideko (sideko.dev)"""

from apple_python.core import (
    to_encodable,
    encode_param,
    default_request_options,
    SyncBaseClient,
    QueryParams,
    AsyncBaseClient,
    RequestOptions,
)
from apple_python.resources.v1.game_center_matchmaking_rule_sets.matchmaking_queues import (
    AsyncMatchmakingQueuesClient,
    MatchmakingQueuesClient,
)
from apple_python.resources.v1.game_center_matchmaking_rule_sets.rules import (
    AsyncRulesClient,
    RulesClient,
)
from apple_python.resources.v1.game_center_matchmaking_rule_sets.teams import (
    TeamsClient,
    AsyncTeamsClient,
)
import typing
import typing_extensions
from apple_python.types.v1.game_center_matchmaking_rule_sets import params, models


class GameCenterMatchmakingRuleSetsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.matchmaking_queues = MatchmakingQueuesClient(base_client=self._base_client)
        self.rules = RulesClient(base_client=self._base_client)
        self.teams = TeamsClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)
    def create(
        self,
        *,
        data: params.GameCenterMatchmakingRuleSetCreateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GameCenterMatchmakingRuleSetResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data,
            dump_with=params._SerializerGameCenterMatchmakingRuleSetCreateRequest,
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="POST",
            path="/v1/gameCenterMatchmakingRuleSets",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.GameCenterMatchmakingRuleSetResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def patch(
        self,
        *,
        data: params.GameCenterMatchmakingRuleSetUpdateRequest,
        id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GameCenterMatchmakingRuleSetResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data,
            dump_with=params._SerializerGameCenterMatchmakingRuleSetUpdateRequest,
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="PATCH",
            path=f"/v1/gameCenterMatchmakingRuleSets/{id}",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.GameCenterMatchmakingRuleSetResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def get(
        self,
        *,
        id: str,
        fields_game_center_matchmaking_queues: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "classicMatchmakingBundleIds",
                    "experimentRuleSet",
                    "referenceName",
                    "ruleSet",
                ]
            ]
        ] = None,
        fields_game_center_matchmaking_rule_sets: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "matchmakingQueues",
                    "maxPlayers",
                    "minPlayers",
                    "referenceName",
                    "ruleLanguageVersion",
                    "rules",
                    "teams",
                ]
            ]
        ] = None,
        fields_game_center_matchmaking_rules: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "description",
                    "expression",
                    "referenceName",
                    "ruleSet",
                    "type",
                    "weight",
                ]
            ]
        ] = None,
        fields_game_center_matchmaking_teams: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "maxPlayers", "minPlayers", "referenceName", "ruleSet"
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal["matchmakingQueues", "rules", "teams"]
            ]
        ] = None,
        limit_matchmaking_queues: typing.Optional[int] = None,
        limit_rules: typing.Optional[int] = None,
        limit_teams: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GameCenterMatchmakingRuleSetResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_game_center_matchmaking_queues is not None:
            _query["fields[gameCenterMatchmakingQueues]"] = encode_param(
                fields_game_center_matchmaking_queues, False
            )
        if fields_game_center_matchmaking_rule_sets is not None:
            _query["fields[gameCenterMatchmakingRuleSets]"] = encode_param(
                fields_game_center_matchmaking_rule_sets, False
            )
        if fields_game_center_matchmaking_rules is not None:
            _query["fields[gameCenterMatchmakingRules]"] = encode_param(
                fields_game_center_matchmaking_rules, False
            )
        if fields_game_center_matchmaking_teams is not None:
            _query["fields[gameCenterMatchmakingTeams]"] = encode_param(
                fields_game_center_matchmaking_teams, False
            )
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit_matchmaking_queues is not None:
            _query["limit[matchmakingQueues]"] = encode_param(
                limit_matchmaking_queues, False
            )
        if limit_rules is not None:
            _query["limit[rules]"] = encode_param(limit_rules, False)
        if limit_teams is not None:
            _query["limit[teams]"] = encode_param(limit_teams, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v1/gameCenterMatchmakingRuleSets/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.GameCenterMatchmakingRuleSetResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def list(
        self,
        *,
        fields_game_center_matchmaking_queues: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "classicMatchmakingBundleIds",
                    "experimentRuleSet",
                    "referenceName",
                    "ruleSet",
                ]
            ]
        ] = None,
        fields_game_center_matchmaking_rule_sets: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "matchmakingQueues",
                    "maxPlayers",
                    "minPlayers",
                    "referenceName",
                    "ruleLanguageVersion",
                    "rules",
                    "teams",
                ]
            ]
        ] = None,
        fields_game_center_matchmaking_rules: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "description",
                    "expression",
                    "referenceName",
                    "ruleSet",
                    "type",
                    "weight",
                ]
            ]
        ] = None,
        fields_game_center_matchmaking_teams: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "maxPlayers", "minPlayers", "referenceName", "ruleSet"
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal["matchmakingQueues", "rules", "teams"]
            ]
        ] = None,
        limit: typing.Optional[int] = None,
        limit_matchmaking_queues: typing.Optional[int] = None,
        limit_rules: typing.Optional[int] = None,
        limit_teams: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GameCenterMatchmakingRuleSetsResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_game_center_matchmaking_queues is not None:
            _query["fields[gameCenterMatchmakingQueues]"] = encode_param(
                fields_game_center_matchmaking_queues, False
            )
        if fields_game_center_matchmaking_rule_sets is not None:
            _query["fields[gameCenterMatchmakingRuleSets]"] = encode_param(
                fields_game_center_matchmaking_rule_sets, False
            )
        if fields_game_center_matchmaking_rules is not None:
            _query["fields[gameCenterMatchmakingRules]"] = encode_param(
                fields_game_center_matchmaking_rules, False
            )
        if fields_game_center_matchmaking_teams is not None:
            _query["fields[gameCenterMatchmakingTeams]"] = encode_param(
                fields_game_center_matchmaking_teams, False
            )
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if limit_matchmaking_queues is not None:
            _query["limit[matchmakingQueues]"] = encode_param(
                limit_matchmaking_queues, False
            )
        if limit_rules is not None:
            _query["limit[rules]"] = encode_param(limit_rules, False)
        if limit_teams is not None:
            _query["limit[teams]"] = encode_param(limit_teams, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path="/v1/gameCenterMatchmakingRuleSets",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.GameCenterMatchmakingRuleSetsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def delete(
        self, *, id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="DELETE",
            path=f"/v1/gameCenterMatchmakingRuleSets/{id}",
            auth_names=["itc-bearer-token"],
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncGameCenterMatchmakingRuleSetsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.matchmaking_queues = AsyncMatchmakingQueuesClient(
            base_client=self._base_client
        )
        self.rules = AsyncRulesClient(base_client=self._base_client)
        self.teams = AsyncTeamsClient(base_client=self._base_client)

    # register async api methods (keep comment for code generation)
    async def create(
        self,
        *,
        data: params.GameCenterMatchmakingRuleSetCreateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GameCenterMatchmakingRuleSetResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data,
            dump_with=params._SerializerGameCenterMatchmakingRuleSetCreateRequest,
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="POST",
            path="/v1/gameCenterMatchmakingRuleSets",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.GameCenterMatchmakingRuleSetResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def patch(
        self,
        *,
        data: params.GameCenterMatchmakingRuleSetUpdateRequest,
        id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GameCenterMatchmakingRuleSetResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data,
            dump_with=params._SerializerGameCenterMatchmakingRuleSetUpdateRequest,
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="PATCH",
            path=f"/v1/gameCenterMatchmakingRuleSets/{id}",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.GameCenterMatchmakingRuleSetResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def get(
        self,
        *,
        id: str,
        fields_game_center_matchmaking_queues: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "classicMatchmakingBundleIds",
                    "experimentRuleSet",
                    "referenceName",
                    "ruleSet",
                ]
            ]
        ] = None,
        fields_game_center_matchmaking_rule_sets: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "matchmakingQueues",
                    "maxPlayers",
                    "minPlayers",
                    "referenceName",
                    "ruleLanguageVersion",
                    "rules",
                    "teams",
                ]
            ]
        ] = None,
        fields_game_center_matchmaking_rules: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "description",
                    "expression",
                    "referenceName",
                    "ruleSet",
                    "type",
                    "weight",
                ]
            ]
        ] = None,
        fields_game_center_matchmaking_teams: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "maxPlayers", "minPlayers", "referenceName", "ruleSet"
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal["matchmakingQueues", "rules", "teams"]
            ]
        ] = None,
        limit_matchmaking_queues: typing.Optional[int] = None,
        limit_rules: typing.Optional[int] = None,
        limit_teams: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GameCenterMatchmakingRuleSetResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_game_center_matchmaking_queues is not None:
            _query["fields[gameCenterMatchmakingQueues]"] = encode_param(
                fields_game_center_matchmaking_queues, False
            )
        if fields_game_center_matchmaking_rule_sets is not None:
            _query["fields[gameCenterMatchmakingRuleSets]"] = encode_param(
                fields_game_center_matchmaking_rule_sets, False
            )
        if fields_game_center_matchmaking_rules is not None:
            _query["fields[gameCenterMatchmakingRules]"] = encode_param(
                fields_game_center_matchmaking_rules, False
            )
        if fields_game_center_matchmaking_teams is not None:
            _query["fields[gameCenterMatchmakingTeams]"] = encode_param(
                fields_game_center_matchmaking_teams, False
            )
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit_matchmaking_queues is not None:
            _query["limit[matchmakingQueues]"] = encode_param(
                limit_matchmaking_queues, False
            )
        if limit_rules is not None:
            _query["limit[rules]"] = encode_param(limit_rules, False)
        if limit_teams is not None:
            _query["limit[teams]"] = encode_param(limit_teams, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v1/gameCenterMatchmakingRuleSets/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.GameCenterMatchmakingRuleSetResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def list(
        self,
        *,
        fields_game_center_matchmaking_queues: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "classicMatchmakingBundleIds",
                    "experimentRuleSet",
                    "referenceName",
                    "ruleSet",
                ]
            ]
        ] = None,
        fields_game_center_matchmaking_rule_sets: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "matchmakingQueues",
                    "maxPlayers",
                    "minPlayers",
                    "referenceName",
                    "ruleLanguageVersion",
                    "rules",
                    "teams",
                ]
            ]
        ] = None,
        fields_game_center_matchmaking_rules: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "description",
                    "expression",
                    "referenceName",
                    "ruleSet",
                    "type",
                    "weight",
                ]
            ]
        ] = None,
        fields_game_center_matchmaking_teams: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "maxPlayers", "minPlayers", "referenceName", "ruleSet"
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal["matchmakingQueues", "rules", "teams"]
            ]
        ] = None,
        limit: typing.Optional[int] = None,
        limit_matchmaking_queues: typing.Optional[int] = None,
        limit_rules: typing.Optional[int] = None,
        limit_teams: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GameCenterMatchmakingRuleSetsResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_game_center_matchmaking_queues is not None:
            _query["fields[gameCenterMatchmakingQueues]"] = encode_param(
                fields_game_center_matchmaking_queues, False
            )
        if fields_game_center_matchmaking_rule_sets is not None:
            _query["fields[gameCenterMatchmakingRuleSets]"] = encode_param(
                fields_game_center_matchmaking_rule_sets, False
            )
        if fields_game_center_matchmaking_rules is not None:
            _query["fields[gameCenterMatchmakingRules]"] = encode_param(
                fields_game_center_matchmaking_rules, False
            )
        if fields_game_center_matchmaking_teams is not None:
            _query["fields[gameCenterMatchmakingTeams]"] = encode_param(
                fields_game_center_matchmaking_teams, False
            )
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if limit_matchmaking_queues is not None:
            _query["limit[matchmakingQueues]"] = encode_param(
                limit_matchmaking_queues, False
            )
        if limit_rules is not None:
            _query["limit[rules]"] = encode_param(limit_rules, False)
        if limit_teams is not None:
            _query["limit[teams]"] = encode_param(limit_teams, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path="/v1/gameCenterMatchmakingRuleSets",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.GameCenterMatchmakingRuleSetsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def delete(
        self, *, id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="DELETE",
            path=f"/v1/gameCenterMatchmakingRuleSets/{id}",
            auth_names=["itc-bearer-token"],
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
