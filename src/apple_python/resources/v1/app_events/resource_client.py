"""File Generated by Sideko (sideko.dev)"""

from apple_python.core import (
    AsyncBaseClient,
    to_encodable,
    encode_param,
    SyncBaseClient,
    RequestOptions,
    default_request_options,
    QueryParams,
)
from apple_python.resources.v1.app_events.localizations import (
    LocalizationsClient,
    AsyncLocalizationsClient,
)
import typing
import typing_extensions
from apple_python.types.v1.app_events import models, params


class AppEventsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.localizations = LocalizationsClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)
    def create(
        self,
        *,
        data: params.AppEventCreateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AppEventResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerAppEventCreateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="POST",
            path="/v1/appEvents",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.AppEventResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def patch(
        self,
        *,
        data: params.AppEventUpdateRequest,
        id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AppEventResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerAppEventUpdateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="PATCH",
            path=f"/v1/appEvents/{id}",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.AppEventResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def get(
        self,
        *,
        id: str,
        fields_app_event_localizations: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appEvent",
                    "appEventScreenshots",
                    "appEventVideoClips",
                    "locale",
                    "longDescription",
                    "name",
                    "shortDescription",
                ]
            ]
        ] = None,
        fields_app_events: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "archivedTerritorySchedules",
                    "badge",
                    "deepLink",
                    "eventState",
                    "localizations",
                    "primaryLocale",
                    "priority",
                    "purchaseRequirement",
                    "purpose",
                    "referenceName",
                    "territorySchedules",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[typing_extensions.Literal["localizations"]]
        ] = None,
        limit_localizations: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AppEventResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_app_event_localizations is not None:
            _query["fields[appEventLocalizations]"] = encode_param(
                fields_app_event_localizations, False
            )
        if fields_app_events is not None:
            _query["fields[appEvents]"] = encode_param(fields_app_events, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit_localizations is not None:
            _query["limit[localizations]"] = encode_param(limit_localizations, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v1/appEvents/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.AppEventResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def delete(
        self, *, id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="DELETE",
            path=f"/v1/appEvents/{id}",
            auth_names=["itc-bearer-token"],
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncAppEventsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.localizations = AsyncLocalizationsClient(base_client=self._base_client)

    # register async api methods (keep comment for code generation)
    async def create(
        self,
        *,
        data: params.AppEventCreateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AppEventResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerAppEventCreateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="POST",
            path="/v1/appEvents",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.AppEventResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def patch(
        self,
        *,
        data: params.AppEventUpdateRequest,
        id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AppEventResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerAppEventUpdateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="PATCH",
            path=f"/v1/appEvents/{id}",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.AppEventResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def get(
        self,
        *,
        id: str,
        fields_app_event_localizations: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appEvent",
                    "appEventScreenshots",
                    "appEventVideoClips",
                    "locale",
                    "longDescription",
                    "name",
                    "shortDescription",
                ]
            ]
        ] = None,
        fields_app_events: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "archivedTerritorySchedules",
                    "badge",
                    "deepLink",
                    "eventState",
                    "localizations",
                    "primaryLocale",
                    "priority",
                    "purchaseRequirement",
                    "purpose",
                    "referenceName",
                    "territorySchedules",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[typing_extensions.Literal["localizations"]]
        ] = None,
        limit_localizations: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AppEventResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_app_event_localizations is not None:
            _query["fields[appEventLocalizations]"] = encode_param(
                fields_app_event_localizations, False
            )
        if fields_app_events is not None:
            _query["fields[appEvents]"] = encode_param(fields_app_events, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit_localizations is not None:
            _query["limit[localizations]"] = encode_param(limit_localizations, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v1/appEvents/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.AppEventResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def delete(
        self, *, id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="DELETE",
            path=f"/v1/appEvents/{id}",
            auth_names=["itc-bearer-token"],
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
