"""File Generated by Sideko (sideko.dev)"""

from apple_python.core import (
    to_encodable,
    default_request_options,
    encode_param,
    AsyncBaseClient,
    RequestOptions,
    SyncBaseClient,
    QueryParams,
)
from apple_python.resources.v1.builds.relationships import (
    AsyncRelationshipsClient,
    RelationshipsClient,
)
from apple_python.resources.v1.builds.app import AsyncAppClient, AppClient
from apple_python.resources.v1.builds.app_encryption_declaration import (
    AsyncAppEncryptionDeclarationClient,
    AppEncryptionDeclarationClient,
)
from apple_python.resources.v1.builds.app_store_version import (
    AppStoreVersionClient,
    AsyncAppStoreVersionClient,
)
from apple_python.resources.v1.builds.beta_app_review_submission import (
    BetaAppReviewSubmissionClient,
    AsyncBetaAppReviewSubmissionClient,
)
from apple_python.resources.v1.builds.beta_build_localizations import (
    AsyncBetaBuildLocalizationsClient,
    BetaBuildLocalizationsClient,
)
from apple_python.resources.v1.builds.build_beta_detail import (
    BuildBetaDetailClient,
    AsyncBuildBetaDetailClient,
)
from apple_python.resources.v1.builds.diagnostic_signatures import (
    DiagnosticSignaturesClient,
    AsyncDiagnosticSignaturesClient,
)
from apple_python.resources.v1.builds.icons import IconsClient, AsyncIconsClient
from apple_python.resources.v1.builds.individual_testers import (
    AsyncIndividualTestersClient,
    IndividualTestersClient,
)
from apple_python.resources.v1.builds.metrics import AsyncMetricsClient, MetricsClient
from apple_python.resources.v1.builds.perf_power_metrics import (
    AsyncPerfPowerMetricsClient,
    PerfPowerMetricsClient,
)
from apple_python.resources.v1.builds.pre_release_version import (
    PreReleaseVersionClient,
    AsyncPreReleaseVersionClient,
)
import typing
import typing_extensions
from apple_python.types.v1.builds import params, models


class BuildsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.relationships = RelationshipsClient(base_client=self._base_client)
        self.app = AppClient(base_client=self._base_client)
        self.app_encryption_declaration = AppEncryptionDeclarationClient(
            base_client=self._base_client
        )
        self.app_store_version = AppStoreVersionClient(base_client=self._base_client)
        self.beta_app_review_submission = BetaAppReviewSubmissionClient(
            base_client=self._base_client
        )
        self.beta_build_localizations = BetaBuildLocalizationsClient(
            base_client=self._base_client
        )
        self.build_beta_detail = BuildBetaDetailClient(base_client=self._base_client)
        self.diagnostic_signatures = DiagnosticSignaturesClient(
            base_client=self._base_client
        )
        self.icons = IconsClient(base_client=self._base_client)
        self.individual_testers = IndividualTestersClient(base_client=self._base_client)
        self.metrics = MetricsClient(base_client=self._base_client)
        self.perf_power_metrics = PerfPowerMetricsClient(base_client=self._base_client)
        self.pre_release_version = PreReleaseVersionClient(
            base_client=self._base_client
        )

    # register sync api methods (keep comment for code generation)
    def patch(
        self,
        *,
        data: params.BuildUpdateRequest,
        id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.BuildResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(item=data, dump_with=params._SerializerBuildUpdateRequest)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="PATCH",
            path=f"/v1/builds/{id}",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.BuildResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def get(
        self,
        *,
        id: str,
        fields_app_encryption_declarations: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "appDescription",
                    "appEncryptionDeclarationDocument",
                    "appEncryptionDeclarationState",
                    "availableOnFrenchStore",
                    "builds",
                    "codeValue",
                    "containsProprietaryCryptography",
                    "containsThirdPartyCryptography",
                    "createdDate",
                    "documentName",
                    "documentType",
                    "documentUrl",
                    "exempt",
                    "platform",
                    "uploadedDate",
                    "usesEncryption",
                ]
            ]
        ] = None,
        fields_app_store_versions: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "ageRatingDeclaration",
                    "alternativeDistributionPackage",
                    "app",
                    "appClipDefaultExperience",
                    "appStoreReviewDetail",
                    "appStoreState",
                    "appStoreVersionExperiments",
                    "appStoreVersionExperimentsV2",
                    "appStoreVersionLocalizations",
                    "appStoreVersionPhasedRelease",
                    "appStoreVersionSubmission",
                    "appVersionState",
                    "build",
                    "copyright",
                    "createdDate",
                    "customerReviews",
                    "downloadable",
                    "earliestReleaseDate",
                    "platform",
                    "releaseType",
                    "reviewType",
                    "routingAppCoverage",
                    "versionString",
                ]
            ]
        ] = None,
        fields_apps: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "alternativeDistributionKey",
                    "analyticsReportRequests",
                    "appAvailability",
                    "appClips",
                    "appCustomProductPages",
                    "appEncryptionDeclarations",
                    "appEvents",
                    "appInfos",
                    "appPricePoints",
                    "appPriceSchedule",
                    "appStoreVersionExperimentsV2",
                    "appStoreVersions",
                    "betaAppLocalizations",
                    "betaAppReviewDetail",
                    "betaGroups",
                    "betaLicenseAgreement",
                    "betaTesters",
                    "builds",
                    "bundleId",
                    "ciProduct",
                    "contentRightsDeclaration",
                    "customerReviews",
                    "endUserLicenseAgreement",
                    "gameCenterDetail",
                    "gameCenterEnabledVersions",
                    "inAppPurchases",
                    "inAppPurchasesV2",
                    "isOrEverWasMadeForKids",
                    "marketplaceSearchDetail",
                    "name",
                    "perfPowerMetrics",
                    "preOrder",
                    "preReleaseVersions",
                    "primaryLocale",
                    "promotedPurchases",
                    "reviewSubmissions",
                    "sku",
                    "subscriptionGracePeriod",
                    "subscriptionGroups",
                    "subscriptionStatusUrl",
                    "subscriptionStatusUrlForSandbox",
                    "subscriptionStatusUrlVersion",
                    "subscriptionStatusUrlVersionForSandbox",
                ]
            ]
        ] = None,
        fields_beta_app_review_submissions: typing.Optional[
            typing.List[
                typing_extensions.Literal["betaReviewState", "build", "submittedDate"]
            ]
        ] = None,
        fields_beta_build_localizations: typing.Optional[
            typing.List[typing_extensions.Literal["build", "locale", "whatsNew"]]
        ] = None,
        fields_beta_testers: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "apps",
                    "betaGroups",
                    "builds",
                    "email",
                    "firstName",
                    "inviteType",
                    "lastName",
                    "state",
                ]
            ]
        ] = None,
        fields_build_beta_details: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "autoNotifyEnabled",
                    "build",
                    "externalBuildState",
                    "internalBuildState",
                ]
            ]
        ] = None,
        fields_build_icons: typing.Optional[
            typing.List[typing_extensions.Literal["iconAsset", "iconType", "name"]]
        ] = None,
        fields_builds: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "appEncryptionDeclaration",
                    "appStoreVersion",
                    "betaAppReviewSubmission",
                    "betaBuildLocalizations",
                    "betaGroups",
                    "buildAudienceType",
                    "buildBetaDetail",
                    "buildBundles",
                    "computedMinMacOsVersion",
                    "diagnosticSignatures",
                    "expirationDate",
                    "expired",
                    "iconAssetToken",
                    "icons",
                    "individualTesters",
                    "lsMinimumSystemVersion",
                    "minOsVersion",
                    "perfPowerMetrics",
                    "preReleaseVersion",
                    "processingState",
                    "uploadedDate",
                    "usesNonExemptEncryption",
                    "version",
                ]
            ]
        ] = None,
        fields_diagnostic_signatures: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "diagnosticType", "insight", "logs", "signature", "weight"
                ]
            ]
        ] = None,
        fields_perf_power_metrics: typing.Optional[
            typing.List[
                typing_extensions.Literal["deviceType", "metricType", "platform"]
            ]
        ] = None,
        fields_pre_release_versions: typing.Optional[
            typing.List[
                typing_extensions.Literal["app", "builds", "platform", "version"]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "appEncryptionDeclaration",
                    "appStoreVersion",
                    "betaAppReviewSubmission",
                    "betaBuildLocalizations",
                    "betaGroups",
                    "buildBetaDetail",
                    "buildBundles",
                    "icons",
                    "individualTesters",
                    "preReleaseVersion",
                ]
            ]
        ] = None,
        limit_beta_build_localizations: typing.Optional[int] = None,
        limit_beta_groups: typing.Optional[int] = None,
        limit_build_bundles: typing.Optional[int] = None,
        limit_icons: typing.Optional[int] = None,
        limit_individual_testers: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.BuildResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_app_encryption_declarations is not None:
            _query["fields[appEncryptionDeclarations]"] = encode_param(
                fields_app_encryption_declarations, False
            )
        if fields_app_store_versions is not None:
            _query["fields[appStoreVersions]"] = encode_param(
                fields_app_store_versions, False
            )
        if fields_apps is not None:
            _query["fields[apps]"] = encode_param(fields_apps, False)
        if fields_beta_app_review_submissions is not None:
            _query["fields[betaAppReviewSubmissions]"] = encode_param(
                fields_beta_app_review_submissions, False
            )
        if fields_beta_build_localizations is not None:
            _query["fields[betaBuildLocalizations]"] = encode_param(
                fields_beta_build_localizations, False
            )
        if fields_beta_testers is not None:
            _query["fields[betaTesters]"] = encode_param(fields_beta_testers, False)
        if fields_build_beta_details is not None:
            _query["fields[buildBetaDetails]"] = encode_param(
                fields_build_beta_details, False
            )
        if fields_build_icons is not None:
            _query["fields[buildIcons]"] = encode_param(fields_build_icons, False)
        if fields_builds is not None:
            _query["fields[builds]"] = encode_param(fields_builds, False)
        if fields_diagnostic_signatures is not None:
            _query["fields[diagnosticSignatures]"] = encode_param(
                fields_diagnostic_signatures, False
            )
        if fields_perf_power_metrics is not None:
            _query["fields[perfPowerMetrics]"] = encode_param(
                fields_perf_power_metrics, False
            )
        if fields_pre_release_versions is not None:
            _query["fields[preReleaseVersions]"] = encode_param(
                fields_pre_release_versions, False
            )
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit_beta_build_localizations is not None:
            _query["limit[betaBuildLocalizations]"] = encode_param(
                limit_beta_build_localizations, False
            )
        if limit_beta_groups is not None:
            _query["limit[betaGroups]"] = encode_param(limit_beta_groups, False)
        if limit_build_bundles is not None:
            _query["limit[buildBundles]"] = encode_param(limit_build_bundles, False)
        if limit_icons is not None:
            _query["limit[icons]"] = encode_param(limit_icons, False)
        if limit_individual_testers is not None:
            _query["limit[individualTesters]"] = encode_param(
                limit_individual_testers, False
            )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v1/builds/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.BuildResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def list(
        self,
        *,
        fields_app_encryption_declarations: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "appDescription",
                    "appEncryptionDeclarationDocument",
                    "appEncryptionDeclarationState",
                    "availableOnFrenchStore",
                    "builds",
                    "codeValue",
                    "containsProprietaryCryptography",
                    "containsThirdPartyCryptography",
                    "createdDate",
                    "documentName",
                    "documentType",
                    "documentUrl",
                    "exempt",
                    "platform",
                    "uploadedDate",
                    "usesEncryption",
                ]
            ]
        ] = None,
        fields_app_store_versions: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "ageRatingDeclaration",
                    "alternativeDistributionPackage",
                    "app",
                    "appClipDefaultExperience",
                    "appStoreReviewDetail",
                    "appStoreState",
                    "appStoreVersionExperiments",
                    "appStoreVersionExperimentsV2",
                    "appStoreVersionLocalizations",
                    "appStoreVersionPhasedRelease",
                    "appStoreVersionSubmission",
                    "appVersionState",
                    "build",
                    "copyright",
                    "createdDate",
                    "customerReviews",
                    "downloadable",
                    "earliestReleaseDate",
                    "platform",
                    "releaseType",
                    "reviewType",
                    "routingAppCoverage",
                    "versionString",
                ]
            ]
        ] = None,
        fields_apps: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "alternativeDistributionKey",
                    "analyticsReportRequests",
                    "appAvailability",
                    "appClips",
                    "appCustomProductPages",
                    "appEncryptionDeclarations",
                    "appEvents",
                    "appInfos",
                    "appPricePoints",
                    "appPriceSchedule",
                    "appStoreVersionExperimentsV2",
                    "appStoreVersions",
                    "betaAppLocalizations",
                    "betaAppReviewDetail",
                    "betaGroups",
                    "betaLicenseAgreement",
                    "betaTesters",
                    "builds",
                    "bundleId",
                    "ciProduct",
                    "contentRightsDeclaration",
                    "customerReviews",
                    "endUserLicenseAgreement",
                    "gameCenterDetail",
                    "gameCenterEnabledVersions",
                    "inAppPurchases",
                    "inAppPurchasesV2",
                    "isOrEverWasMadeForKids",
                    "marketplaceSearchDetail",
                    "name",
                    "perfPowerMetrics",
                    "preOrder",
                    "preReleaseVersions",
                    "primaryLocale",
                    "promotedPurchases",
                    "reviewSubmissions",
                    "sku",
                    "subscriptionGracePeriod",
                    "subscriptionGroups",
                    "subscriptionStatusUrl",
                    "subscriptionStatusUrlForSandbox",
                    "subscriptionStatusUrlVersion",
                    "subscriptionStatusUrlVersionForSandbox",
                ]
            ]
        ] = None,
        fields_beta_app_review_submissions: typing.Optional[
            typing.List[
                typing_extensions.Literal["betaReviewState", "build", "submittedDate"]
            ]
        ] = None,
        fields_beta_build_localizations: typing.Optional[
            typing.List[typing_extensions.Literal["build", "locale", "whatsNew"]]
        ] = None,
        fields_beta_testers: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "apps",
                    "betaGroups",
                    "builds",
                    "email",
                    "firstName",
                    "inviteType",
                    "lastName",
                    "state",
                ]
            ]
        ] = None,
        fields_build_beta_details: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "autoNotifyEnabled",
                    "build",
                    "externalBuildState",
                    "internalBuildState",
                ]
            ]
        ] = None,
        fields_build_icons: typing.Optional[
            typing.List[typing_extensions.Literal["iconAsset", "iconType", "name"]]
        ] = None,
        fields_builds: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "appEncryptionDeclaration",
                    "appStoreVersion",
                    "betaAppReviewSubmission",
                    "betaBuildLocalizations",
                    "betaGroups",
                    "buildAudienceType",
                    "buildBetaDetail",
                    "buildBundles",
                    "computedMinMacOsVersion",
                    "diagnosticSignatures",
                    "expirationDate",
                    "expired",
                    "iconAssetToken",
                    "icons",
                    "individualTesters",
                    "lsMinimumSystemVersion",
                    "minOsVersion",
                    "perfPowerMetrics",
                    "preReleaseVersion",
                    "processingState",
                    "uploadedDate",
                    "usesNonExemptEncryption",
                    "version",
                ]
            ]
        ] = None,
        fields_diagnostic_signatures: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "diagnosticType", "insight", "logs", "signature", "weight"
                ]
            ]
        ] = None,
        fields_perf_power_metrics: typing.Optional[
            typing.List[
                typing_extensions.Literal["deviceType", "metricType", "platform"]
            ]
        ] = None,
        fields_pre_release_versions: typing.Optional[
            typing.List[
                typing_extensions.Literal["app", "builds", "platform", "version"]
            ]
        ] = None,
        filter_app_store_version: typing.Optional[typing.List[str]] = None,
        filter_app: typing.Optional[typing.List[str]] = None,
        filter_beta_app_review_submission_beta_review_state: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "WAITING_FOR_REVIEW", "IN_REVIEW", "REJECTED", "APPROVED"
                ]
            ]
        ] = None,
        filter_beta_groups: typing.Optional[typing.List[str]] = None,
        filter_build_audience_type: typing.Optional[
            typing.List[
                typing_extensions.Literal["INTERNAL_ONLY", "APP_STORE_ELIGIBLE"]
            ]
        ] = None,
        filter_expired: typing.Optional[typing.List[str]] = None,
        filter_id: typing.Optional[typing.List[str]] = None,
        filter_pre_release_version_platform: typing.Optional[
            typing.List[
                typing_extensions.Literal["IOS", "MAC_OS", "TV_OS", "VISION_OS"]
            ]
        ] = None,
        filter_pre_release_version_version: typing.Optional[typing.List[str]] = None,
        filter_pre_release_version: typing.Optional[typing.List[str]] = None,
        filter_processing_state: typing.Optional[
            typing.List[
                typing_extensions.Literal["PROCESSING", "FAILED", "INVALID", "VALID"]
            ]
        ] = None,
        filter_uses_non_exempt_encryption: typing.Optional[typing.List[str]] = None,
        filter_version: typing.Optional[typing.List[str]] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "appEncryptionDeclaration",
                    "appStoreVersion",
                    "betaAppReviewSubmission",
                    "betaBuildLocalizations",
                    "betaGroups",
                    "buildBetaDetail",
                    "buildBundles",
                    "icons",
                    "individualTesters",
                    "preReleaseVersion",
                ]
            ]
        ] = None,
        limit: typing.Optional[int] = None,
        limit_beta_build_localizations: typing.Optional[int] = None,
        limit_beta_groups: typing.Optional[int] = None,
        limit_build_bundles: typing.Optional[int] = None,
        limit_icons: typing.Optional[int] = None,
        limit_individual_testers: typing.Optional[int] = None,
        sort: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "preReleaseVersion",
                    "-preReleaseVersion",
                    "uploadedDate",
                    "-uploadedDate",
                    "version",
                    "-version",
                ]
            ]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.BuildsResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_app_encryption_declarations is not None:
            _query["fields[appEncryptionDeclarations]"] = encode_param(
                fields_app_encryption_declarations, False
            )
        if fields_app_store_versions is not None:
            _query["fields[appStoreVersions]"] = encode_param(
                fields_app_store_versions, False
            )
        if fields_apps is not None:
            _query["fields[apps]"] = encode_param(fields_apps, False)
        if fields_beta_app_review_submissions is not None:
            _query["fields[betaAppReviewSubmissions]"] = encode_param(
                fields_beta_app_review_submissions, False
            )
        if fields_beta_build_localizations is not None:
            _query["fields[betaBuildLocalizations]"] = encode_param(
                fields_beta_build_localizations, False
            )
        if fields_beta_testers is not None:
            _query["fields[betaTesters]"] = encode_param(fields_beta_testers, False)
        if fields_build_beta_details is not None:
            _query["fields[buildBetaDetails]"] = encode_param(
                fields_build_beta_details, False
            )
        if fields_build_icons is not None:
            _query["fields[buildIcons]"] = encode_param(fields_build_icons, False)
        if fields_builds is not None:
            _query["fields[builds]"] = encode_param(fields_builds, False)
        if fields_diagnostic_signatures is not None:
            _query["fields[diagnosticSignatures]"] = encode_param(
                fields_diagnostic_signatures, False
            )
        if fields_perf_power_metrics is not None:
            _query["fields[perfPowerMetrics]"] = encode_param(
                fields_perf_power_metrics, False
            )
        if fields_pre_release_versions is not None:
            _query["fields[preReleaseVersions]"] = encode_param(
                fields_pre_release_versions, False
            )
        if filter_app_store_version is not None:
            _query["filter[appStoreVersion]"] = encode_param(
                filter_app_store_version, False
            )
        if filter_app is not None:
            _query["filter[app]"] = encode_param(filter_app, False)
        if filter_beta_app_review_submission_beta_review_state is not None:
            _query["filter[betaAppReviewSubmission.betaReviewState]"] = encode_param(
                filter_beta_app_review_submission_beta_review_state, False
            )
        if filter_beta_groups is not None:
            _query["filter[betaGroups]"] = encode_param(filter_beta_groups, False)
        if filter_build_audience_type is not None:
            _query["filter[buildAudienceType]"] = encode_param(
                filter_build_audience_type, False
            )
        if filter_expired is not None:
            _query["filter[expired]"] = encode_param(filter_expired, False)
        if filter_id is not None:
            _query["filter[id]"] = encode_param(filter_id, False)
        if filter_pre_release_version_platform is not None:
            _query["filter[preReleaseVersion.platform]"] = encode_param(
                filter_pre_release_version_platform, False
            )
        if filter_pre_release_version_version is not None:
            _query["filter[preReleaseVersion.version]"] = encode_param(
                filter_pre_release_version_version, False
            )
        if filter_pre_release_version is not None:
            _query["filter[preReleaseVersion]"] = encode_param(
                filter_pre_release_version, False
            )
        if filter_processing_state is not None:
            _query["filter[processingState]"] = encode_param(
                filter_processing_state, False
            )
        if filter_uses_non_exempt_encryption is not None:
            _query["filter[usesNonExemptEncryption]"] = encode_param(
                filter_uses_non_exempt_encryption, False
            )
        if filter_version is not None:
            _query["filter[version]"] = encode_param(filter_version, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if limit_beta_build_localizations is not None:
            _query["limit[betaBuildLocalizations]"] = encode_param(
                limit_beta_build_localizations, False
            )
        if limit_beta_groups is not None:
            _query["limit[betaGroups]"] = encode_param(limit_beta_groups, False)
        if limit_build_bundles is not None:
            _query["limit[buildBundles]"] = encode_param(limit_build_bundles, False)
        if limit_icons is not None:
            _query["limit[icons]"] = encode_param(limit_icons, False)
        if limit_individual_testers is not None:
            _query["limit[individualTesters]"] = encode_param(
                limit_individual_testers, False
            )
        if sort is not None:
            _query["sort"] = encode_param(sort, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path="/v1/builds",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.BuildsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncBuildsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.relationships = AsyncRelationshipsClient(base_client=self._base_client)
        self.app = AsyncAppClient(base_client=self._base_client)
        self.app_encryption_declaration = AsyncAppEncryptionDeclarationClient(
            base_client=self._base_client
        )
        self.app_store_version = AsyncAppStoreVersionClient(
            base_client=self._base_client
        )
        self.beta_app_review_submission = AsyncBetaAppReviewSubmissionClient(
            base_client=self._base_client
        )
        self.beta_build_localizations = AsyncBetaBuildLocalizationsClient(
            base_client=self._base_client
        )
        self.build_beta_detail = AsyncBuildBetaDetailClient(
            base_client=self._base_client
        )
        self.diagnostic_signatures = AsyncDiagnosticSignaturesClient(
            base_client=self._base_client
        )
        self.icons = AsyncIconsClient(base_client=self._base_client)
        self.individual_testers = AsyncIndividualTestersClient(
            base_client=self._base_client
        )
        self.metrics = AsyncMetricsClient(base_client=self._base_client)
        self.perf_power_metrics = AsyncPerfPowerMetricsClient(
            base_client=self._base_client
        )
        self.pre_release_version = AsyncPreReleaseVersionClient(
            base_client=self._base_client
        )

    # register async api methods (keep comment for code generation)
    async def patch(
        self,
        *,
        data: params.BuildUpdateRequest,
        id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.BuildResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(item=data, dump_with=params._SerializerBuildUpdateRequest)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="PATCH",
            path=f"/v1/builds/{id}",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.BuildResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def get(
        self,
        *,
        id: str,
        fields_app_encryption_declarations: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "appDescription",
                    "appEncryptionDeclarationDocument",
                    "appEncryptionDeclarationState",
                    "availableOnFrenchStore",
                    "builds",
                    "codeValue",
                    "containsProprietaryCryptography",
                    "containsThirdPartyCryptography",
                    "createdDate",
                    "documentName",
                    "documentType",
                    "documentUrl",
                    "exempt",
                    "platform",
                    "uploadedDate",
                    "usesEncryption",
                ]
            ]
        ] = None,
        fields_app_store_versions: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "ageRatingDeclaration",
                    "alternativeDistributionPackage",
                    "app",
                    "appClipDefaultExperience",
                    "appStoreReviewDetail",
                    "appStoreState",
                    "appStoreVersionExperiments",
                    "appStoreVersionExperimentsV2",
                    "appStoreVersionLocalizations",
                    "appStoreVersionPhasedRelease",
                    "appStoreVersionSubmission",
                    "appVersionState",
                    "build",
                    "copyright",
                    "createdDate",
                    "customerReviews",
                    "downloadable",
                    "earliestReleaseDate",
                    "platform",
                    "releaseType",
                    "reviewType",
                    "routingAppCoverage",
                    "versionString",
                ]
            ]
        ] = None,
        fields_apps: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "alternativeDistributionKey",
                    "analyticsReportRequests",
                    "appAvailability",
                    "appClips",
                    "appCustomProductPages",
                    "appEncryptionDeclarations",
                    "appEvents",
                    "appInfos",
                    "appPricePoints",
                    "appPriceSchedule",
                    "appStoreVersionExperimentsV2",
                    "appStoreVersions",
                    "betaAppLocalizations",
                    "betaAppReviewDetail",
                    "betaGroups",
                    "betaLicenseAgreement",
                    "betaTesters",
                    "builds",
                    "bundleId",
                    "ciProduct",
                    "contentRightsDeclaration",
                    "customerReviews",
                    "endUserLicenseAgreement",
                    "gameCenterDetail",
                    "gameCenterEnabledVersions",
                    "inAppPurchases",
                    "inAppPurchasesV2",
                    "isOrEverWasMadeForKids",
                    "marketplaceSearchDetail",
                    "name",
                    "perfPowerMetrics",
                    "preOrder",
                    "preReleaseVersions",
                    "primaryLocale",
                    "promotedPurchases",
                    "reviewSubmissions",
                    "sku",
                    "subscriptionGracePeriod",
                    "subscriptionGroups",
                    "subscriptionStatusUrl",
                    "subscriptionStatusUrlForSandbox",
                    "subscriptionStatusUrlVersion",
                    "subscriptionStatusUrlVersionForSandbox",
                ]
            ]
        ] = None,
        fields_beta_app_review_submissions: typing.Optional[
            typing.List[
                typing_extensions.Literal["betaReviewState", "build", "submittedDate"]
            ]
        ] = None,
        fields_beta_build_localizations: typing.Optional[
            typing.List[typing_extensions.Literal["build", "locale", "whatsNew"]]
        ] = None,
        fields_beta_testers: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "apps",
                    "betaGroups",
                    "builds",
                    "email",
                    "firstName",
                    "inviteType",
                    "lastName",
                    "state",
                ]
            ]
        ] = None,
        fields_build_beta_details: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "autoNotifyEnabled",
                    "build",
                    "externalBuildState",
                    "internalBuildState",
                ]
            ]
        ] = None,
        fields_build_icons: typing.Optional[
            typing.List[typing_extensions.Literal["iconAsset", "iconType", "name"]]
        ] = None,
        fields_builds: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "appEncryptionDeclaration",
                    "appStoreVersion",
                    "betaAppReviewSubmission",
                    "betaBuildLocalizations",
                    "betaGroups",
                    "buildAudienceType",
                    "buildBetaDetail",
                    "buildBundles",
                    "computedMinMacOsVersion",
                    "diagnosticSignatures",
                    "expirationDate",
                    "expired",
                    "iconAssetToken",
                    "icons",
                    "individualTesters",
                    "lsMinimumSystemVersion",
                    "minOsVersion",
                    "perfPowerMetrics",
                    "preReleaseVersion",
                    "processingState",
                    "uploadedDate",
                    "usesNonExemptEncryption",
                    "version",
                ]
            ]
        ] = None,
        fields_diagnostic_signatures: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "diagnosticType", "insight", "logs", "signature", "weight"
                ]
            ]
        ] = None,
        fields_perf_power_metrics: typing.Optional[
            typing.List[
                typing_extensions.Literal["deviceType", "metricType", "platform"]
            ]
        ] = None,
        fields_pre_release_versions: typing.Optional[
            typing.List[
                typing_extensions.Literal["app", "builds", "platform", "version"]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "appEncryptionDeclaration",
                    "appStoreVersion",
                    "betaAppReviewSubmission",
                    "betaBuildLocalizations",
                    "betaGroups",
                    "buildBetaDetail",
                    "buildBundles",
                    "icons",
                    "individualTesters",
                    "preReleaseVersion",
                ]
            ]
        ] = None,
        limit_beta_build_localizations: typing.Optional[int] = None,
        limit_beta_groups: typing.Optional[int] = None,
        limit_build_bundles: typing.Optional[int] = None,
        limit_icons: typing.Optional[int] = None,
        limit_individual_testers: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.BuildResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_app_encryption_declarations is not None:
            _query["fields[appEncryptionDeclarations]"] = encode_param(
                fields_app_encryption_declarations, False
            )
        if fields_app_store_versions is not None:
            _query["fields[appStoreVersions]"] = encode_param(
                fields_app_store_versions, False
            )
        if fields_apps is not None:
            _query["fields[apps]"] = encode_param(fields_apps, False)
        if fields_beta_app_review_submissions is not None:
            _query["fields[betaAppReviewSubmissions]"] = encode_param(
                fields_beta_app_review_submissions, False
            )
        if fields_beta_build_localizations is not None:
            _query["fields[betaBuildLocalizations]"] = encode_param(
                fields_beta_build_localizations, False
            )
        if fields_beta_testers is not None:
            _query["fields[betaTesters]"] = encode_param(fields_beta_testers, False)
        if fields_build_beta_details is not None:
            _query["fields[buildBetaDetails]"] = encode_param(
                fields_build_beta_details, False
            )
        if fields_build_icons is not None:
            _query["fields[buildIcons]"] = encode_param(fields_build_icons, False)
        if fields_builds is not None:
            _query["fields[builds]"] = encode_param(fields_builds, False)
        if fields_diagnostic_signatures is not None:
            _query["fields[diagnosticSignatures]"] = encode_param(
                fields_diagnostic_signatures, False
            )
        if fields_perf_power_metrics is not None:
            _query["fields[perfPowerMetrics]"] = encode_param(
                fields_perf_power_metrics, False
            )
        if fields_pre_release_versions is not None:
            _query["fields[preReleaseVersions]"] = encode_param(
                fields_pre_release_versions, False
            )
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit_beta_build_localizations is not None:
            _query["limit[betaBuildLocalizations]"] = encode_param(
                limit_beta_build_localizations, False
            )
        if limit_beta_groups is not None:
            _query["limit[betaGroups]"] = encode_param(limit_beta_groups, False)
        if limit_build_bundles is not None:
            _query["limit[buildBundles]"] = encode_param(limit_build_bundles, False)
        if limit_icons is not None:
            _query["limit[icons]"] = encode_param(limit_icons, False)
        if limit_individual_testers is not None:
            _query["limit[individualTesters]"] = encode_param(
                limit_individual_testers, False
            )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v1/builds/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.BuildResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def list(
        self,
        *,
        fields_app_encryption_declarations: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "appDescription",
                    "appEncryptionDeclarationDocument",
                    "appEncryptionDeclarationState",
                    "availableOnFrenchStore",
                    "builds",
                    "codeValue",
                    "containsProprietaryCryptography",
                    "containsThirdPartyCryptography",
                    "createdDate",
                    "documentName",
                    "documentType",
                    "documentUrl",
                    "exempt",
                    "platform",
                    "uploadedDate",
                    "usesEncryption",
                ]
            ]
        ] = None,
        fields_app_store_versions: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "ageRatingDeclaration",
                    "alternativeDistributionPackage",
                    "app",
                    "appClipDefaultExperience",
                    "appStoreReviewDetail",
                    "appStoreState",
                    "appStoreVersionExperiments",
                    "appStoreVersionExperimentsV2",
                    "appStoreVersionLocalizations",
                    "appStoreVersionPhasedRelease",
                    "appStoreVersionSubmission",
                    "appVersionState",
                    "build",
                    "copyright",
                    "createdDate",
                    "customerReviews",
                    "downloadable",
                    "earliestReleaseDate",
                    "platform",
                    "releaseType",
                    "reviewType",
                    "routingAppCoverage",
                    "versionString",
                ]
            ]
        ] = None,
        fields_apps: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "alternativeDistributionKey",
                    "analyticsReportRequests",
                    "appAvailability",
                    "appClips",
                    "appCustomProductPages",
                    "appEncryptionDeclarations",
                    "appEvents",
                    "appInfos",
                    "appPricePoints",
                    "appPriceSchedule",
                    "appStoreVersionExperimentsV2",
                    "appStoreVersions",
                    "betaAppLocalizations",
                    "betaAppReviewDetail",
                    "betaGroups",
                    "betaLicenseAgreement",
                    "betaTesters",
                    "builds",
                    "bundleId",
                    "ciProduct",
                    "contentRightsDeclaration",
                    "customerReviews",
                    "endUserLicenseAgreement",
                    "gameCenterDetail",
                    "gameCenterEnabledVersions",
                    "inAppPurchases",
                    "inAppPurchasesV2",
                    "isOrEverWasMadeForKids",
                    "marketplaceSearchDetail",
                    "name",
                    "perfPowerMetrics",
                    "preOrder",
                    "preReleaseVersions",
                    "primaryLocale",
                    "promotedPurchases",
                    "reviewSubmissions",
                    "sku",
                    "subscriptionGracePeriod",
                    "subscriptionGroups",
                    "subscriptionStatusUrl",
                    "subscriptionStatusUrlForSandbox",
                    "subscriptionStatusUrlVersion",
                    "subscriptionStatusUrlVersionForSandbox",
                ]
            ]
        ] = None,
        fields_beta_app_review_submissions: typing.Optional[
            typing.List[
                typing_extensions.Literal["betaReviewState", "build", "submittedDate"]
            ]
        ] = None,
        fields_beta_build_localizations: typing.Optional[
            typing.List[typing_extensions.Literal["build", "locale", "whatsNew"]]
        ] = None,
        fields_beta_testers: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "apps",
                    "betaGroups",
                    "builds",
                    "email",
                    "firstName",
                    "inviteType",
                    "lastName",
                    "state",
                ]
            ]
        ] = None,
        fields_build_beta_details: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "autoNotifyEnabled",
                    "build",
                    "externalBuildState",
                    "internalBuildState",
                ]
            ]
        ] = None,
        fields_build_icons: typing.Optional[
            typing.List[typing_extensions.Literal["iconAsset", "iconType", "name"]]
        ] = None,
        fields_builds: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "appEncryptionDeclaration",
                    "appStoreVersion",
                    "betaAppReviewSubmission",
                    "betaBuildLocalizations",
                    "betaGroups",
                    "buildAudienceType",
                    "buildBetaDetail",
                    "buildBundles",
                    "computedMinMacOsVersion",
                    "diagnosticSignatures",
                    "expirationDate",
                    "expired",
                    "iconAssetToken",
                    "icons",
                    "individualTesters",
                    "lsMinimumSystemVersion",
                    "minOsVersion",
                    "perfPowerMetrics",
                    "preReleaseVersion",
                    "processingState",
                    "uploadedDate",
                    "usesNonExemptEncryption",
                    "version",
                ]
            ]
        ] = None,
        fields_diagnostic_signatures: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "diagnosticType", "insight", "logs", "signature", "weight"
                ]
            ]
        ] = None,
        fields_perf_power_metrics: typing.Optional[
            typing.List[
                typing_extensions.Literal["deviceType", "metricType", "platform"]
            ]
        ] = None,
        fields_pre_release_versions: typing.Optional[
            typing.List[
                typing_extensions.Literal["app", "builds", "platform", "version"]
            ]
        ] = None,
        filter_app_store_version: typing.Optional[typing.List[str]] = None,
        filter_app: typing.Optional[typing.List[str]] = None,
        filter_beta_app_review_submission_beta_review_state: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "WAITING_FOR_REVIEW", "IN_REVIEW", "REJECTED", "APPROVED"
                ]
            ]
        ] = None,
        filter_beta_groups: typing.Optional[typing.List[str]] = None,
        filter_build_audience_type: typing.Optional[
            typing.List[
                typing_extensions.Literal["INTERNAL_ONLY", "APP_STORE_ELIGIBLE"]
            ]
        ] = None,
        filter_expired: typing.Optional[typing.List[str]] = None,
        filter_id: typing.Optional[typing.List[str]] = None,
        filter_pre_release_version_platform: typing.Optional[
            typing.List[
                typing_extensions.Literal["IOS", "MAC_OS", "TV_OS", "VISION_OS"]
            ]
        ] = None,
        filter_pre_release_version_version: typing.Optional[typing.List[str]] = None,
        filter_pre_release_version: typing.Optional[typing.List[str]] = None,
        filter_processing_state: typing.Optional[
            typing.List[
                typing_extensions.Literal["PROCESSING", "FAILED", "INVALID", "VALID"]
            ]
        ] = None,
        filter_uses_non_exempt_encryption: typing.Optional[typing.List[str]] = None,
        filter_version: typing.Optional[typing.List[str]] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "appEncryptionDeclaration",
                    "appStoreVersion",
                    "betaAppReviewSubmission",
                    "betaBuildLocalizations",
                    "betaGroups",
                    "buildBetaDetail",
                    "buildBundles",
                    "icons",
                    "individualTesters",
                    "preReleaseVersion",
                ]
            ]
        ] = None,
        limit: typing.Optional[int] = None,
        limit_beta_build_localizations: typing.Optional[int] = None,
        limit_beta_groups: typing.Optional[int] = None,
        limit_build_bundles: typing.Optional[int] = None,
        limit_icons: typing.Optional[int] = None,
        limit_individual_testers: typing.Optional[int] = None,
        sort: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "preReleaseVersion",
                    "-preReleaseVersion",
                    "uploadedDate",
                    "-uploadedDate",
                    "version",
                    "-version",
                ]
            ]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.BuildsResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_app_encryption_declarations is not None:
            _query["fields[appEncryptionDeclarations]"] = encode_param(
                fields_app_encryption_declarations, False
            )
        if fields_app_store_versions is not None:
            _query["fields[appStoreVersions]"] = encode_param(
                fields_app_store_versions, False
            )
        if fields_apps is not None:
            _query["fields[apps]"] = encode_param(fields_apps, False)
        if fields_beta_app_review_submissions is not None:
            _query["fields[betaAppReviewSubmissions]"] = encode_param(
                fields_beta_app_review_submissions, False
            )
        if fields_beta_build_localizations is not None:
            _query["fields[betaBuildLocalizations]"] = encode_param(
                fields_beta_build_localizations, False
            )
        if fields_beta_testers is not None:
            _query["fields[betaTesters]"] = encode_param(fields_beta_testers, False)
        if fields_build_beta_details is not None:
            _query["fields[buildBetaDetails]"] = encode_param(
                fields_build_beta_details, False
            )
        if fields_build_icons is not None:
            _query["fields[buildIcons]"] = encode_param(fields_build_icons, False)
        if fields_builds is not None:
            _query["fields[builds]"] = encode_param(fields_builds, False)
        if fields_diagnostic_signatures is not None:
            _query["fields[diagnosticSignatures]"] = encode_param(
                fields_diagnostic_signatures, False
            )
        if fields_perf_power_metrics is not None:
            _query["fields[perfPowerMetrics]"] = encode_param(
                fields_perf_power_metrics, False
            )
        if fields_pre_release_versions is not None:
            _query["fields[preReleaseVersions]"] = encode_param(
                fields_pre_release_versions, False
            )
        if filter_app_store_version is not None:
            _query["filter[appStoreVersion]"] = encode_param(
                filter_app_store_version, False
            )
        if filter_app is not None:
            _query["filter[app]"] = encode_param(filter_app, False)
        if filter_beta_app_review_submission_beta_review_state is not None:
            _query["filter[betaAppReviewSubmission.betaReviewState]"] = encode_param(
                filter_beta_app_review_submission_beta_review_state, False
            )
        if filter_beta_groups is not None:
            _query["filter[betaGroups]"] = encode_param(filter_beta_groups, False)
        if filter_build_audience_type is not None:
            _query["filter[buildAudienceType]"] = encode_param(
                filter_build_audience_type, False
            )
        if filter_expired is not None:
            _query["filter[expired]"] = encode_param(filter_expired, False)
        if filter_id is not None:
            _query["filter[id]"] = encode_param(filter_id, False)
        if filter_pre_release_version_platform is not None:
            _query["filter[preReleaseVersion.platform]"] = encode_param(
                filter_pre_release_version_platform, False
            )
        if filter_pre_release_version_version is not None:
            _query["filter[preReleaseVersion.version]"] = encode_param(
                filter_pre_release_version_version, False
            )
        if filter_pre_release_version is not None:
            _query["filter[preReleaseVersion]"] = encode_param(
                filter_pre_release_version, False
            )
        if filter_processing_state is not None:
            _query["filter[processingState]"] = encode_param(
                filter_processing_state, False
            )
        if filter_uses_non_exempt_encryption is not None:
            _query["filter[usesNonExemptEncryption]"] = encode_param(
                filter_uses_non_exempt_encryption, False
            )
        if filter_version is not None:
            _query["filter[version]"] = encode_param(filter_version, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if limit_beta_build_localizations is not None:
            _query["limit[betaBuildLocalizations]"] = encode_param(
                limit_beta_build_localizations, False
            )
        if limit_beta_groups is not None:
            _query["limit[betaGroups]"] = encode_param(limit_beta_groups, False)
        if limit_build_bundles is not None:
            _query["limit[buildBundles]"] = encode_param(limit_build_bundles, False)
        if limit_icons is not None:
            _query["limit[icons]"] = encode_param(limit_icons, False)
        if limit_individual_testers is not None:
            _query["limit[individualTesters]"] = encode_param(
                limit_individual_testers, False
            )
        if sort is not None:
            _query["sort"] = encode_param(sort, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path="/v1/builds",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.BuildsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
