"""File Generated by Sideko (sideko.dev)"""

from apple_python.core import (
    default_request_options,
    SyncBaseClient,
    QueryParams,
    encode_param,
    RequestOptions,
    AsyncBaseClient,
    to_encodable,
)
from apple_python.resources.v1.bundle_ids.app import AsyncAppClient, AppClient
from apple_python.resources.v1.bundle_ids.bundle_id_capabilities import (
    AsyncBundleIdCapabilitiesClient,
    BundleIdCapabilitiesClient,
)
from apple_python.resources.v1.bundle_ids.profiles import (
    ProfilesClient,
    AsyncProfilesClient,
)
import typing
import typing_extensions
from apple_python.types.v1.bundle_ids import models, params


class BundleIdsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.app = AppClient(base_client=self._base_client)
        self.bundle_id_capabilities = BundleIdCapabilitiesClient(
            base_client=self._base_client
        )
        self.profiles = ProfilesClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)
    def create(
        self,
        *,
        data: params.BundleIdCreateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.BundleIdResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerBundleIdCreateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="POST",
            path="/v1/bundleIds",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.BundleIdResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def patch(
        self,
        *,
        data: params.BundleIdUpdateRequest,
        id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.BundleIdResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerBundleIdUpdateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="PATCH",
            path=f"/v1/bundleIds/{id}",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.BundleIdResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def get(
        self,
        *,
        id: str,
        fields_apps: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "alternativeDistributionKey",
                    "analyticsReportRequests",
                    "appAvailability",
                    "appClips",
                    "appCustomProductPages",
                    "appEncryptionDeclarations",
                    "appEvents",
                    "appInfos",
                    "appPricePoints",
                    "appPriceSchedule",
                    "appStoreVersionExperimentsV2",
                    "appStoreVersions",
                    "betaAppLocalizations",
                    "betaAppReviewDetail",
                    "betaGroups",
                    "betaLicenseAgreement",
                    "betaTesters",
                    "builds",
                    "bundleId",
                    "ciProduct",
                    "contentRightsDeclaration",
                    "customerReviews",
                    "endUserLicenseAgreement",
                    "gameCenterDetail",
                    "gameCenterEnabledVersions",
                    "inAppPurchases",
                    "inAppPurchasesV2",
                    "isOrEverWasMadeForKids",
                    "marketplaceSearchDetail",
                    "name",
                    "perfPowerMetrics",
                    "preOrder",
                    "preReleaseVersions",
                    "primaryLocale",
                    "promotedPurchases",
                    "reviewSubmissions",
                    "sku",
                    "subscriptionGracePeriod",
                    "subscriptionGroups",
                    "subscriptionStatusUrl",
                    "subscriptionStatusUrlForSandbox",
                    "subscriptionStatusUrlVersion",
                    "subscriptionStatusUrlVersionForSandbox",
                ]
            ]
        ] = None,
        fields_bundle_id_capabilities: typing.Optional[
            typing.List[
                typing_extensions.Literal["bundleId", "capabilityType", "settings"]
            ]
        ] = None,
        fields_bundle_ids: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "bundleIdCapabilities",
                    "identifier",
                    "name",
                    "platform",
                    "profiles",
                    "seedId",
                ]
            ]
        ] = None,
        fields_profiles: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "bundleId",
                    "certificates",
                    "createdDate",
                    "devices",
                    "expirationDate",
                    "name",
                    "platform",
                    "profileContent",
                    "profileState",
                    "profileType",
                    "uuid",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal["app", "bundleIdCapabilities", "profiles"]
            ]
        ] = None,
        limit_bundle_id_capabilities: typing.Optional[int] = None,
        limit_profiles: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.BundleIdResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_apps is not None:
            _query["fields[apps]"] = encode_param(fields_apps, False)
        if fields_bundle_id_capabilities is not None:
            _query["fields[bundleIdCapabilities]"] = encode_param(
                fields_bundle_id_capabilities, False
            )
        if fields_bundle_ids is not None:
            _query["fields[bundleIds]"] = encode_param(fields_bundle_ids, False)
        if fields_profiles is not None:
            _query["fields[profiles]"] = encode_param(fields_profiles, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit_bundle_id_capabilities is not None:
            _query["limit[bundleIdCapabilities]"] = encode_param(
                limit_bundle_id_capabilities, False
            )
        if limit_profiles is not None:
            _query["limit[profiles]"] = encode_param(limit_profiles, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v1/bundleIds/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.BundleIdResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def list(
        self,
        *,
        fields_apps: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "alternativeDistributionKey",
                    "analyticsReportRequests",
                    "appAvailability",
                    "appClips",
                    "appCustomProductPages",
                    "appEncryptionDeclarations",
                    "appEvents",
                    "appInfos",
                    "appPricePoints",
                    "appPriceSchedule",
                    "appStoreVersionExperimentsV2",
                    "appStoreVersions",
                    "betaAppLocalizations",
                    "betaAppReviewDetail",
                    "betaGroups",
                    "betaLicenseAgreement",
                    "betaTesters",
                    "builds",
                    "bundleId",
                    "ciProduct",
                    "contentRightsDeclaration",
                    "customerReviews",
                    "endUserLicenseAgreement",
                    "gameCenterDetail",
                    "gameCenterEnabledVersions",
                    "inAppPurchases",
                    "inAppPurchasesV2",
                    "isOrEverWasMadeForKids",
                    "marketplaceSearchDetail",
                    "name",
                    "perfPowerMetrics",
                    "preOrder",
                    "preReleaseVersions",
                    "primaryLocale",
                    "promotedPurchases",
                    "reviewSubmissions",
                    "sku",
                    "subscriptionGracePeriod",
                    "subscriptionGroups",
                    "subscriptionStatusUrl",
                    "subscriptionStatusUrlForSandbox",
                    "subscriptionStatusUrlVersion",
                    "subscriptionStatusUrlVersionForSandbox",
                ]
            ]
        ] = None,
        fields_bundle_id_capabilities: typing.Optional[
            typing.List[
                typing_extensions.Literal["bundleId", "capabilityType", "settings"]
            ]
        ] = None,
        fields_bundle_ids: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "bundleIdCapabilities",
                    "identifier",
                    "name",
                    "platform",
                    "profiles",
                    "seedId",
                ]
            ]
        ] = None,
        fields_profiles: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "bundleId",
                    "certificates",
                    "createdDate",
                    "devices",
                    "expirationDate",
                    "name",
                    "platform",
                    "profileContent",
                    "profileState",
                    "profileType",
                    "uuid",
                ]
            ]
        ] = None,
        filter_id: typing.Optional[typing.List[str]] = None,
        filter_identifier: typing.Optional[typing.List[str]] = None,
        filter_name: typing.Optional[typing.List[str]] = None,
        filter_platform: typing.Optional[
            typing.List[typing_extensions.Literal["IOS", "MAC_OS"]]
        ] = None,
        filter_seed_id: typing.Optional[typing.List[str]] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal["app", "bundleIdCapabilities", "profiles"]
            ]
        ] = None,
        limit: typing.Optional[int] = None,
        limit_bundle_id_capabilities: typing.Optional[int] = None,
        limit_profiles: typing.Optional[int] = None,
        sort: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "id",
                    "-id",
                    "identifier",
                    "-identifier",
                    "name",
                    "-name",
                    "platform",
                    "-platform",
                    "seedId",
                    "-seedId",
                ]
            ]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.BundleIdsResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_apps is not None:
            _query["fields[apps]"] = encode_param(fields_apps, False)
        if fields_bundle_id_capabilities is not None:
            _query["fields[bundleIdCapabilities]"] = encode_param(
                fields_bundle_id_capabilities, False
            )
        if fields_bundle_ids is not None:
            _query["fields[bundleIds]"] = encode_param(fields_bundle_ids, False)
        if fields_profiles is not None:
            _query["fields[profiles]"] = encode_param(fields_profiles, False)
        if filter_id is not None:
            _query["filter[id]"] = encode_param(filter_id, False)
        if filter_identifier is not None:
            _query["filter[identifier]"] = encode_param(filter_identifier, False)
        if filter_name is not None:
            _query["filter[name]"] = encode_param(filter_name, False)
        if filter_platform is not None:
            _query["filter[platform]"] = encode_param(filter_platform, False)
        if filter_seed_id is not None:
            _query["filter[seedId]"] = encode_param(filter_seed_id, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if limit_bundle_id_capabilities is not None:
            _query["limit[bundleIdCapabilities]"] = encode_param(
                limit_bundle_id_capabilities, False
            )
        if limit_profiles is not None:
            _query["limit[profiles]"] = encode_param(limit_profiles, False)
        if sort is not None:
            _query["sort"] = encode_param(sort, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path="/v1/bundleIds",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.BundleIdsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def delete(
        self, *, id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="DELETE",
            path=f"/v1/bundleIds/{id}",
            auth_names=["itc-bearer-token"],
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncBundleIdsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.app = AsyncAppClient(base_client=self._base_client)
        self.bundle_id_capabilities = AsyncBundleIdCapabilitiesClient(
            base_client=self._base_client
        )
        self.profiles = AsyncProfilesClient(base_client=self._base_client)

    # register async api methods (keep comment for code generation)
    async def create(
        self,
        *,
        data: params.BundleIdCreateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.BundleIdResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerBundleIdCreateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="POST",
            path="/v1/bundleIds",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.BundleIdResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def patch(
        self,
        *,
        data: params.BundleIdUpdateRequest,
        id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.BundleIdResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerBundleIdUpdateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="PATCH",
            path=f"/v1/bundleIds/{id}",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.BundleIdResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def get(
        self,
        *,
        id: str,
        fields_apps: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "alternativeDistributionKey",
                    "analyticsReportRequests",
                    "appAvailability",
                    "appClips",
                    "appCustomProductPages",
                    "appEncryptionDeclarations",
                    "appEvents",
                    "appInfos",
                    "appPricePoints",
                    "appPriceSchedule",
                    "appStoreVersionExperimentsV2",
                    "appStoreVersions",
                    "betaAppLocalizations",
                    "betaAppReviewDetail",
                    "betaGroups",
                    "betaLicenseAgreement",
                    "betaTesters",
                    "builds",
                    "bundleId",
                    "ciProduct",
                    "contentRightsDeclaration",
                    "customerReviews",
                    "endUserLicenseAgreement",
                    "gameCenterDetail",
                    "gameCenterEnabledVersions",
                    "inAppPurchases",
                    "inAppPurchasesV2",
                    "isOrEverWasMadeForKids",
                    "marketplaceSearchDetail",
                    "name",
                    "perfPowerMetrics",
                    "preOrder",
                    "preReleaseVersions",
                    "primaryLocale",
                    "promotedPurchases",
                    "reviewSubmissions",
                    "sku",
                    "subscriptionGracePeriod",
                    "subscriptionGroups",
                    "subscriptionStatusUrl",
                    "subscriptionStatusUrlForSandbox",
                    "subscriptionStatusUrlVersion",
                    "subscriptionStatusUrlVersionForSandbox",
                ]
            ]
        ] = None,
        fields_bundle_id_capabilities: typing.Optional[
            typing.List[
                typing_extensions.Literal["bundleId", "capabilityType", "settings"]
            ]
        ] = None,
        fields_bundle_ids: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "bundleIdCapabilities",
                    "identifier",
                    "name",
                    "platform",
                    "profiles",
                    "seedId",
                ]
            ]
        ] = None,
        fields_profiles: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "bundleId",
                    "certificates",
                    "createdDate",
                    "devices",
                    "expirationDate",
                    "name",
                    "platform",
                    "profileContent",
                    "profileState",
                    "profileType",
                    "uuid",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal["app", "bundleIdCapabilities", "profiles"]
            ]
        ] = None,
        limit_bundle_id_capabilities: typing.Optional[int] = None,
        limit_profiles: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.BundleIdResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_apps is not None:
            _query["fields[apps]"] = encode_param(fields_apps, False)
        if fields_bundle_id_capabilities is not None:
            _query["fields[bundleIdCapabilities]"] = encode_param(
                fields_bundle_id_capabilities, False
            )
        if fields_bundle_ids is not None:
            _query["fields[bundleIds]"] = encode_param(fields_bundle_ids, False)
        if fields_profiles is not None:
            _query["fields[profiles]"] = encode_param(fields_profiles, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit_bundle_id_capabilities is not None:
            _query["limit[bundleIdCapabilities]"] = encode_param(
                limit_bundle_id_capabilities, False
            )
        if limit_profiles is not None:
            _query["limit[profiles]"] = encode_param(limit_profiles, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v1/bundleIds/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.BundleIdResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def list(
        self,
        *,
        fields_apps: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "alternativeDistributionKey",
                    "analyticsReportRequests",
                    "appAvailability",
                    "appClips",
                    "appCustomProductPages",
                    "appEncryptionDeclarations",
                    "appEvents",
                    "appInfos",
                    "appPricePoints",
                    "appPriceSchedule",
                    "appStoreVersionExperimentsV2",
                    "appStoreVersions",
                    "betaAppLocalizations",
                    "betaAppReviewDetail",
                    "betaGroups",
                    "betaLicenseAgreement",
                    "betaTesters",
                    "builds",
                    "bundleId",
                    "ciProduct",
                    "contentRightsDeclaration",
                    "customerReviews",
                    "endUserLicenseAgreement",
                    "gameCenterDetail",
                    "gameCenterEnabledVersions",
                    "inAppPurchases",
                    "inAppPurchasesV2",
                    "isOrEverWasMadeForKids",
                    "marketplaceSearchDetail",
                    "name",
                    "perfPowerMetrics",
                    "preOrder",
                    "preReleaseVersions",
                    "primaryLocale",
                    "promotedPurchases",
                    "reviewSubmissions",
                    "sku",
                    "subscriptionGracePeriod",
                    "subscriptionGroups",
                    "subscriptionStatusUrl",
                    "subscriptionStatusUrlForSandbox",
                    "subscriptionStatusUrlVersion",
                    "subscriptionStatusUrlVersionForSandbox",
                ]
            ]
        ] = None,
        fields_bundle_id_capabilities: typing.Optional[
            typing.List[
                typing_extensions.Literal["bundleId", "capabilityType", "settings"]
            ]
        ] = None,
        fields_bundle_ids: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "bundleIdCapabilities",
                    "identifier",
                    "name",
                    "platform",
                    "profiles",
                    "seedId",
                ]
            ]
        ] = None,
        fields_profiles: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "bundleId",
                    "certificates",
                    "createdDate",
                    "devices",
                    "expirationDate",
                    "name",
                    "platform",
                    "profileContent",
                    "profileState",
                    "profileType",
                    "uuid",
                ]
            ]
        ] = None,
        filter_id: typing.Optional[typing.List[str]] = None,
        filter_identifier: typing.Optional[typing.List[str]] = None,
        filter_name: typing.Optional[typing.List[str]] = None,
        filter_platform: typing.Optional[
            typing.List[typing_extensions.Literal["IOS", "MAC_OS"]]
        ] = None,
        filter_seed_id: typing.Optional[typing.List[str]] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal["app", "bundleIdCapabilities", "profiles"]
            ]
        ] = None,
        limit: typing.Optional[int] = None,
        limit_bundle_id_capabilities: typing.Optional[int] = None,
        limit_profiles: typing.Optional[int] = None,
        sort: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "id",
                    "-id",
                    "identifier",
                    "-identifier",
                    "name",
                    "-name",
                    "platform",
                    "-platform",
                    "seedId",
                    "-seedId",
                ]
            ]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.BundleIdsResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_apps is not None:
            _query["fields[apps]"] = encode_param(fields_apps, False)
        if fields_bundle_id_capabilities is not None:
            _query["fields[bundleIdCapabilities]"] = encode_param(
                fields_bundle_id_capabilities, False
            )
        if fields_bundle_ids is not None:
            _query["fields[bundleIds]"] = encode_param(fields_bundle_ids, False)
        if fields_profiles is not None:
            _query["fields[profiles]"] = encode_param(fields_profiles, False)
        if filter_id is not None:
            _query["filter[id]"] = encode_param(filter_id, False)
        if filter_identifier is not None:
            _query["filter[identifier]"] = encode_param(filter_identifier, False)
        if filter_name is not None:
            _query["filter[name]"] = encode_param(filter_name, False)
        if filter_platform is not None:
            _query["filter[platform]"] = encode_param(filter_platform, False)
        if filter_seed_id is not None:
            _query["filter[seedId]"] = encode_param(filter_seed_id, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if limit_bundle_id_capabilities is not None:
            _query["limit[bundleIdCapabilities]"] = encode_param(
                limit_bundle_id_capabilities, False
            )
        if limit_profiles is not None:
            _query["limit[profiles]"] = encode_param(limit_profiles, False)
        if sort is not None:
            _query["sort"] = encode_param(sort, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path="/v1/bundleIds",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.BundleIdsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def delete(
        self, *, id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="DELETE",
            path=f"/v1/bundleIds/{id}",
            auth_names=["itc-bearer-token"],
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
