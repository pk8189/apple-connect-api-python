"""File Generated by Sideko (sideko.dev)"""

from apple_python.core import (
    encode_param,
    SyncBaseClient,
    AsyncBaseClient,
    RequestOptions,
    default_request_options,
    QueryParams,
    to_encodable,
)
from apple_python.resources.v1.game_center_app_versions.relationships import (
    RelationshipsClient,
    AsyncRelationshipsClient,
)
from apple_python.resources.v1.game_center_app_versions.app_store_version import (
    AsyncAppStoreVersionClient,
    AppStoreVersionClient,
)
from apple_python.resources.v1.game_center_app_versions.compatibility_versions import (
    AsyncCompatibilityVersionsClient,
    CompatibilityVersionsClient,
)
import typing
import typing_extensions
from apple_python.types.v1.game_center_app_versions import models, params


class GameCenterAppVersionsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.relationships = RelationshipsClient(base_client=self._base_client)
        self.app_store_version = AppStoreVersionClient(base_client=self._base_client)
        self.compatibility_versions = CompatibilityVersionsClient(
            base_client=self._base_client
        )

    # register sync api methods (keep comment for code generation)
    def create(
        self,
        *,
        data: params.GameCenterAppVersionCreateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GameCenterAppVersionResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerGameCenterAppVersionCreateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="POST",
            path="/v1/gameCenterAppVersions",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.GameCenterAppVersionResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def patch(
        self,
        *,
        data: params.GameCenterAppVersionUpdateRequest,
        id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GameCenterAppVersionResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerGameCenterAppVersionUpdateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="PATCH",
            path=f"/v1/gameCenterAppVersions/{id}",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.GameCenterAppVersionResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def get(
        self,
        *,
        id: str,
        fields_app_store_versions: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "ageRatingDeclaration",
                    "alternativeDistributionPackage",
                    "app",
                    "appClipDefaultExperience",
                    "appStoreReviewDetail",
                    "appStoreState",
                    "appStoreVersionExperiments",
                    "appStoreVersionExperimentsV2",
                    "appStoreVersionLocalizations",
                    "appStoreVersionPhasedRelease",
                    "appStoreVersionSubmission",
                    "appVersionState",
                    "build",
                    "copyright",
                    "createdDate",
                    "customerReviews",
                    "downloadable",
                    "earliestReleaseDate",
                    "platform",
                    "releaseType",
                    "reviewType",
                    "routingAppCoverage",
                    "versionString",
                ]
            ]
        ] = None,
        fields_game_center_app_versions: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appStoreVersion", "compatibilityVersions", "enabled"
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal["appStoreVersion", "compatibilityVersions"]
            ]
        ] = None,
        limit_compatibility_versions: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GameCenterAppVersionResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_app_store_versions is not None:
            _query["fields[appStoreVersions]"] = encode_param(
                fields_app_store_versions, False
            )
        if fields_game_center_app_versions is not None:
            _query["fields[gameCenterAppVersions]"] = encode_param(
                fields_game_center_app_versions, False
            )
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit_compatibility_versions is not None:
            _query["limit[compatibilityVersions]"] = encode_param(
                limit_compatibility_versions, False
            )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v1/gameCenterAppVersions/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.GameCenterAppVersionResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncGameCenterAppVersionsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.relationships = AsyncRelationshipsClient(base_client=self._base_client)
        self.app_store_version = AsyncAppStoreVersionClient(
            base_client=self._base_client
        )
        self.compatibility_versions = AsyncCompatibilityVersionsClient(
            base_client=self._base_client
        )

    # register async api methods (keep comment for code generation)
    async def create(
        self,
        *,
        data: params.GameCenterAppVersionCreateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GameCenterAppVersionResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerGameCenterAppVersionCreateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="POST",
            path="/v1/gameCenterAppVersions",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.GameCenterAppVersionResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def patch(
        self,
        *,
        data: params.GameCenterAppVersionUpdateRequest,
        id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GameCenterAppVersionResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerGameCenterAppVersionUpdateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="PATCH",
            path=f"/v1/gameCenterAppVersions/{id}",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.GameCenterAppVersionResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def get(
        self,
        *,
        id: str,
        fields_app_store_versions: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "ageRatingDeclaration",
                    "alternativeDistributionPackage",
                    "app",
                    "appClipDefaultExperience",
                    "appStoreReviewDetail",
                    "appStoreState",
                    "appStoreVersionExperiments",
                    "appStoreVersionExperimentsV2",
                    "appStoreVersionLocalizations",
                    "appStoreVersionPhasedRelease",
                    "appStoreVersionSubmission",
                    "appVersionState",
                    "build",
                    "copyright",
                    "createdDate",
                    "customerReviews",
                    "downloadable",
                    "earliestReleaseDate",
                    "platform",
                    "releaseType",
                    "reviewType",
                    "routingAppCoverage",
                    "versionString",
                ]
            ]
        ] = None,
        fields_game_center_app_versions: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appStoreVersion", "compatibilityVersions", "enabled"
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal["appStoreVersion", "compatibilityVersions"]
            ]
        ] = None,
        limit_compatibility_versions: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GameCenterAppVersionResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_app_store_versions is not None:
            _query["fields[appStoreVersions]"] = encode_param(
                fields_app_store_versions, False
            )
        if fields_game_center_app_versions is not None:
            _query["fields[gameCenterAppVersions]"] = encode_param(
                fields_game_center_app_versions, False
            )
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit_compatibility_versions is not None:
            _query["limit[compatibilityVersions]"] = encode_param(
                limit_compatibility_versions, False
            )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v1/gameCenterAppVersions/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.GameCenterAppVersionResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
