"""File Generated by Sideko (sideko.dev)"""

from apple_python.core import (
    encode_param,
    AsyncBaseClient,
    RequestOptions,
    SyncBaseClient,
    default_request_options,
    QueryParams,
)
from apple_python.resources.v1.app_clips.app_clip_advanced_experiences import (
    AsyncAppClipAdvancedExperiencesClient,
    AppClipAdvancedExperiencesClient,
)
from apple_python.resources.v1.app_clips.app_clip_default_experiences import (
    AppClipDefaultExperiencesClient,
    AsyncAppClipDefaultExperiencesClient,
)
import typing
import typing_extensions
from apple_python.types.v1.app_clips import models


class AppClipsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.app_clip_advanced_experiences = AppClipAdvancedExperiencesClient(
            base_client=self._base_client
        )
        self.app_clip_default_experiences = AppClipDefaultExperiencesClient(
            base_client=self._base_client
        )

    # register sync api methods (keep comment for code generation)
    def get(
        self,
        *,
        id: str,
        fields_app_clip_advanced_experiences: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "action",
                    "appClip",
                    "businessCategory",
                    "defaultLanguage",
                    "headerImage",
                    "isPoweredBy",
                    "link",
                    "localizations",
                    "place",
                    "placeStatus",
                    "removed",
                    "status",
                    "version",
                ]
            ]
        ] = None,
        fields_app_clip_default_experiences: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "action",
                    "appClip",
                    "appClipAppStoreReviewDetail",
                    "appClipDefaultExperienceLocalizations",
                    "appClipDefaultExperienceTemplate",
                    "releaseWithAppStoreVersion",
                ]
            ]
        ] = None,
        fields_app_clips: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "appClipAdvancedExperiences",
                    "appClipDefaultExperiences",
                    "bundleId",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[typing_extensions.Literal["app", "appClipDefaultExperiences"]]
        ] = None,
        limit_app_clip_default_experiences: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AppClipResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_app_clip_advanced_experiences is not None:
            _query["fields[appClipAdvancedExperiences]"] = encode_param(
                fields_app_clip_advanced_experiences, False
            )
        if fields_app_clip_default_experiences is not None:
            _query["fields[appClipDefaultExperiences]"] = encode_param(
                fields_app_clip_default_experiences, False
            )
        if fields_app_clips is not None:
            _query["fields[appClips]"] = encode_param(fields_app_clips, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit_app_clip_default_experiences is not None:
            _query["limit[appClipDefaultExperiences]"] = encode_param(
                limit_app_clip_default_experiences, False
            )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v1/appClips/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.AppClipResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncAppClipsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.app_clip_advanced_experiences = AsyncAppClipAdvancedExperiencesClient(
            base_client=self._base_client
        )
        self.app_clip_default_experiences = AsyncAppClipDefaultExperiencesClient(
            base_client=self._base_client
        )

    # register async api methods (keep comment for code generation)
    async def get(
        self,
        *,
        id: str,
        fields_app_clip_advanced_experiences: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "action",
                    "appClip",
                    "businessCategory",
                    "defaultLanguage",
                    "headerImage",
                    "isPoweredBy",
                    "link",
                    "localizations",
                    "place",
                    "placeStatus",
                    "removed",
                    "status",
                    "version",
                ]
            ]
        ] = None,
        fields_app_clip_default_experiences: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "action",
                    "appClip",
                    "appClipAppStoreReviewDetail",
                    "appClipDefaultExperienceLocalizations",
                    "appClipDefaultExperienceTemplate",
                    "releaseWithAppStoreVersion",
                ]
            ]
        ] = None,
        fields_app_clips: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "appClipAdvancedExperiences",
                    "appClipDefaultExperiences",
                    "bundleId",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[typing_extensions.Literal["app", "appClipDefaultExperiences"]]
        ] = None,
        limit_app_clip_default_experiences: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AppClipResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_app_clip_advanced_experiences is not None:
            _query["fields[appClipAdvancedExperiences]"] = encode_param(
                fields_app_clip_advanced_experiences, False
            )
        if fields_app_clip_default_experiences is not None:
            _query["fields[appClipDefaultExperiences]"] = encode_param(
                fields_app_clip_default_experiences, False
            )
        if fields_app_clips is not None:
            _query["fields[appClips]"] = encode_param(fields_app_clips, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit_app_clip_default_experiences is not None:
            _query["limit[appClipDefaultExperiences]"] = encode_param(
                limit_app_clip_default_experiences, False
            )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v1/appClips/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.AppClipResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
