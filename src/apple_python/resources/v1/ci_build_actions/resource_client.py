"""File Generated by Sideko (sideko.dev)"""

from apple_python.core import (
    encode_param,
    AsyncBaseClient,
    RequestOptions,
    SyncBaseClient,
    default_request_options,
    QueryParams,
)
from apple_python.resources.v1.ci_build_actions.artifacts import (
    AsyncArtifactsClient,
    ArtifactsClient,
)
from apple_python.resources.v1.ci_build_actions.build_run import (
    BuildRunClient,
    AsyncBuildRunClient,
)
from apple_python.resources.v1.ci_build_actions.issues import (
    AsyncIssuesClient,
    IssuesClient,
)
from apple_python.resources.v1.ci_build_actions.test_results import (
    TestResultsClient,
    AsyncTestResultsClient,
)
import typing
import typing_extensions
from apple_python.types.v1.ci_build_actions import models


class CiBuildActionsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.artifacts = ArtifactsClient(base_client=self._base_client)
        self.build_run = BuildRunClient(base_client=self._base_client)
        self.issues = IssuesClient(base_client=self._base_client)
        self.test_results = TestResultsClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)
    def get(
        self,
        *,
        id: str,
        fields_ci_artifacts: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "downloadUrl", "fileName", "fileSize", "fileType"
                ]
            ]
        ] = None,
        fields_ci_build_actions: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "actionType",
                    "artifacts",
                    "buildRun",
                    "completionStatus",
                    "executionProgress",
                    "finishedDate",
                    "isRequiredToPass",
                    "issueCounts",
                    "issues",
                    "name",
                    "startedDate",
                    "testResults",
                ]
            ]
        ] = None,
        fields_ci_build_runs: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "actions",
                    "buildRun",
                    "builds",
                    "cancelReason",
                    "clean",
                    "completionStatus",
                    "createdDate",
                    "destinationBranch",
                    "destinationCommit",
                    "executionProgress",
                    "finishedDate",
                    "isPullRequestBuild",
                    "issueCounts",
                    "number",
                    "product",
                    "pullRequest",
                    "sourceBranchOrTag",
                    "sourceCommit",
                    "startReason",
                    "startedDate",
                    "workflow",
                ]
            ]
        ] = None,
        fields_ci_issues: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "category", "fileSource", "issueType", "message"
                ]
            ]
        ] = None,
        fields_ci_test_results: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "className",
                    "destinationTestResults",
                    "fileSource",
                    "message",
                    "name",
                    "status",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[typing_extensions.Literal["buildRun"]]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.CiBuildActionResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_ci_artifacts is not None:
            _query["fields[ciArtifacts]"] = encode_param(fields_ci_artifacts, False)
        if fields_ci_build_actions is not None:
            _query["fields[ciBuildActions]"] = encode_param(
                fields_ci_build_actions, False
            )
        if fields_ci_build_runs is not None:
            _query["fields[ciBuildRuns]"] = encode_param(fields_ci_build_runs, False)
        if fields_ci_issues is not None:
            _query["fields[ciIssues]"] = encode_param(fields_ci_issues, False)
        if fields_ci_test_results is not None:
            _query["fields[ciTestResults]"] = encode_param(
                fields_ci_test_results, False
            )
        if include is not None:
            _query["include"] = encode_param(include, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v1/ciBuildActions/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.CiBuildActionResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncCiBuildActionsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.artifacts = AsyncArtifactsClient(base_client=self._base_client)
        self.build_run = AsyncBuildRunClient(base_client=self._base_client)
        self.issues = AsyncIssuesClient(base_client=self._base_client)
        self.test_results = AsyncTestResultsClient(base_client=self._base_client)

    # register async api methods (keep comment for code generation)
    async def get(
        self,
        *,
        id: str,
        fields_ci_artifacts: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "downloadUrl", "fileName", "fileSize", "fileType"
                ]
            ]
        ] = None,
        fields_ci_build_actions: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "actionType",
                    "artifacts",
                    "buildRun",
                    "completionStatus",
                    "executionProgress",
                    "finishedDate",
                    "isRequiredToPass",
                    "issueCounts",
                    "issues",
                    "name",
                    "startedDate",
                    "testResults",
                ]
            ]
        ] = None,
        fields_ci_build_runs: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "actions",
                    "buildRun",
                    "builds",
                    "cancelReason",
                    "clean",
                    "completionStatus",
                    "createdDate",
                    "destinationBranch",
                    "destinationCommit",
                    "executionProgress",
                    "finishedDate",
                    "isPullRequestBuild",
                    "issueCounts",
                    "number",
                    "product",
                    "pullRequest",
                    "sourceBranchOrTag",
                    "sourceCommit",
                    "startReason",
                    "startedDate",
                    "workflow",
                ]
            ]
        ] = None,
        fields_ci_issues: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "category", "fileSource", "issueType", "message"
                ]
            ]
        ] = None,
        fields_ci_test_results: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "className",
                    "destinationTestResults",
                    "fileSource",
                    "message",
                    "name",
                    "status",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[typing_extensions.Literal["buildRun"]]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.CiBuildActionResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_ci_artifacts is not None:
            _query["fields[ciArtifacts]"] = encode_param(fields_ci_artifacts, False)
        if fields_ci_build_actions is not None:
            _query["fields[ciBuildActions]"] = encode_param(
                fields_ci_build_actions, False
            )
        if fields_ci_build_runs is not None:
            _query["fields[ciBuildRuns]"] = encode_param(fields_ci_build_runs, False)
        if fields_ci_issues is not None:
            _query["fields[ciIssues]"] = encode_param(fields_ci_issues, False)
        if fields_ci_test_results is not None:
            _query["fields[ciTestResults]"] = encode_param(
                fields_ci_test_results, False
            )
        if include is not None:
            _query["include"] = encode_param(include, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v1/ciBuildActions/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.CiBuildActionResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
