"""File Generated by Sideko (sideko.dev)"""

from apple_python.core import (
    AsyncBaseClient,
    encode_param,
    SyncBaseClient,
    RequestOptions,
    QueryParams,
    default_request_options,
)
import typing
import typing_extensions
from apple_python.types.v1.app_store_versions.customer_reviews import models


class CustomerReviewsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def list(
        self,
        *,
        id: str,
        exists_published_response: typing.Optional[bool] = None,
        fields_customer_review_responses: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "lastModifiedDate", "responseBody", "review", "state"
                ]
            ]
        ] = None,
        fields_customer_reviews: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "body",
                    "createdDate",
                    "rating",
                    "response",
                    "reviewerNickname",
                    "territory",
                    "title",
                ]
            ]
        ] = None,
        filter_rating: typing.Optional[typing.List[str]] = None,
        filter_territory: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "ABW",
                    "AFG",
                    "AGO",
                    "AIA",
                    "ALB",
                    "AND",
                    "ANT",
                    "ARE",
                    "ARG",
                    "ARM",
                    "ASM",
                    "ATG",
                    "AUS",
                    "AUT",
                    "AZE",
                    "BDI",
                    "BEL",
                    "BEN",
                    "BES",
                    "BFA",
                    "BGD",
                    "BGR",
                    "BHR",
                    "BHS",
                    "BIH",
                    "BLR",
                    "BLZ",
                    "BMU",
                    "BOL",
                    "BRA",
                    "BRB",
                    "BRN",
                    "BTN",
                    "BWA",
                    "CAF",
                    "CAN",
                    "CHE",
                    "CHL",
                    "CHN",
                    "CIV",
                    "CMR",
                    "COD",
                    "COG",
                    "COK",
                    "COL",
                    "COM",
                    "CPV",
                    "CRI",
                    "CUB",
                    "CUW",
                    "CXR",
                    "CYM",
                    "CYP",
                    "CZE",
                    "DEU",
                    "DJI",
                    "DMA",
                    "DNK",
                    "DOM",
                    "DZA",
                    "ECU",
                    "EGY",
                    "ERI",
                    "ESP",
                    "EST",
                    "ETH",
                    "FIN",
                    "FJI",
                    "FLK",
                    "FRA",
                    "FRO",
                    "FSM",
                    "GAB",
                    "GBR",
                    "GEO",
                    "GGY",
                    "GHA",
                    "GIB",
                    "GIN",
                    "GLP",
                    "GMB",
                    "GNB",
                    "GNQ",
                    "GRC",
                    "GRD",
                    "GRL",
                    "GTM",
                    "GUF",
                    "GUM",
                    "GUY",
                    "HKG",
                    "HND",
                    "HRV",
                    "HTI",
                    "HUN",
                    "IDN",
                    "IMN",
                    "IND",
                    "IRL",
                    "IRQ",
                    "ISL",
                    "ISR",
                    "ITA",
                    "JAM",
                    "JEY",
                    "JOR",
                    "JPN",
                    "KAZ",
                    "KEN",
                    "KGZ",
                    "KHM",
                    "KIR",
                    "KNA",
                    "KOR",
                    "KWT",
                    "LAO",
                    "LBN",
                    "LBR",
                    "LBY",
                    "LCA",
                    "LIE",
                    "LKA",
                    "LSO",
                    "LTU",
                    "LUX",
                    "LVA",
                    "MAC",
                    "MAR",
                    "MCO",
                    "MDA",
                    "MDG",
                    "MDV",
                    "MEX",
                    "MHL",
                    "MKD",
                    "MLI",
                    "MLT",
                    "MMR",
                    "MNE",
                    "MNG",
                    "MNP",
                    "MOZ",
                    "MRT",
                    "MSR",
                    "MTQ",
                    "MUS",
                    "MWI",
                    "MYS",
                    "MYT",
                    "NAM",
                    "NCL",
                    "NER",
                    "NFK",
                    "NGA",
                    "NIC",
                    "NIU",
                    "NLD",
                    "NOR",
                    "NPL",
                    "NRU",
                    "NZL",
                    "OMN",
                    "PAK",
                    "PAN",
                    "PER",
                    "PHL",
                    "PLW",
                    "PNG",
                    "POL",
                    "PRI",
                    "PRT",
                    "PRY",
                    "PSE",
                    "PYF",
                    "QAT",
                    "REU",
                    "ROU",
                    "RUS",
                    "RWA",
                    "SAU",
                    "SEN",
                    "SGP",
                    "SHN",
                    "SLB",
                    "SLE",
                    "SLV",
                    "SMR",
                    "SOM",
                    "SPM",
                    "SRB",
                    "SSD",
                    "STP",
                    "SUR",
                    "SVK",
                    "SVN",
                    "SWE",
                    "SWZ",
                    "SXM",
                    "SYC",
                    "TCA",
                    "TCD",
                    "TGO",
                    "THA",
                    "TJK",
                    "TKM",
                    "TLS",
                    "TON",
                    "TTO",
                    "TUN",
                    "TUR",
                    "TUV",
                    "TWN",
                    "TZA",
                    "UGA",
                    "UKR",
                    "UMI",
                    "URY",
                    "USA",
                    "UZB",
                    "VAT",
                    "VCT",
                    "VEN",
                    "VGB",
                    "VIR",
                    "VNM",
                    "VUT",
                    "WLF",
                    "WSM",
                    "YEM",
                    "ZAF",
                    "ZMB",
                    "ZWE",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[typing_extensions.Literal["response"]]
        ] = None,
        limit: typing.Optional[int] = None,
        sort: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "createdDate", "-createdDate", "rating", "-rating"
                ]
            ]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.CustomerReviewsResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if exists_published_response is not None:
            _query["exists[publishedResponse]"] = encode_param(
                exists_published_response, False
            )
        if fields_customer_review_responses is not None:
            _query["fields[customerReviewResponses]"] = encode_param(
                fields_customer_review_responses, False
            )
        if fields_customer_reviews is not None:
            _query["fields[customerReviews]"] = encode_param(
                fields_customer_reviews, False
            )
        if filter_rating is not None:
            _query["filter[rating]"] = encode_param(filter_rating, False)
        if filter_territory is not None:
            _query["filter[territory]"] = encode_param(filter_territory, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if sort is not None:
            _query["sort"] = encode_param(sort, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v1/appStoreVersions/{id}/customerReviews",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.CustomerReviewsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncCustomerReviewsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def list(
        self,
        *,
        id: str,
        exists_published_response: typing.Optional[bool] = None,
        fields_customer_review_responses: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "lastModifiedDate", "responseBody", "review", "state"
                ]
            ]
        ] = None,
        fields_customer_reviews: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "body",
                    "createdDate",
                    "rating",
                    "response",
                    "reviewerNickname",
                    "territory",
                    "title",
                ]
            ]
        ] = None,
        filter_rating: typing.Optional[typing.List[str]] = None,
        filter_territory: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "ABW",
                    "AFG",
                    "AGO",
                    "AIA",
                    "ALB",
                    "AND",
                    "ANT",
                    "ARE",
                    "ARG",
                    "ARM",
                    "ASM",
                    "ATG",
                    "AUS",
                    "AUT",
                    "AZE",
                    "BDI",
                    "BEL",
                    "BEN",
                    "BES",
                    "BFA",
                    "BGD",
                    "BGR",
                    "BHR",
                    "BHS",
                    "BIH",
                    "BLR",
                    "BLZ",
                    "BMU",
                    "BOL",
                    "BRA",
                    "BRB",
                    "BRN",
                    "BTN",
                    "BWA",
                    "CAF",
                    "CAN",
                    "CHE",
                    "CHL",
                    "CHN",
                    "CIV",
                    "CMR",
                    "COD",
                    "COG",
                    "COK",
                    "COL",
                    "COM",
                    "CPV",
                    "CRI",
                    "CUB",
                    "CUW",
                    "CXR",
                    "CYM",
                    "CYP",
                    "CZE",
                    "DEU",
                    "DJI",
                    "DMA",
                    "DNK",
                    "DOM",
                    "DZA",
                    "ECU",
                    "EGY",
                    "ERI",
                    "ESP",
                    "EST",
                    "ETH",
                    "FIN",
                    "FJI",
                    "FLK",
                    "FRA",
                    "FRO",
                    "FSM",
                    "GAB",
                    "GBR",
                    "GEO",
                    "GGY",
                    "GHA",
                    "GIB",
                    "GIN",
                    "GLP",
                    "GMB",
                    "GNB",
                    "GNQ",
                    "GRC",
                    "GRD",
                    "GRL",
                    "GTM",
                    "GUF",
                    "GUM",
                    "GUY",
                    "HKG",
                    "HND",
                    "HRV",
                    "HTI",
                    "HUN",
                    "IDN",
                    "IMN",
                    "IND",
                    "IRL",
                    "IRQ",
                    "ISL",
                    "ISR",
                    "ITA",
                    "JAM",
                    "JEY",
                    "JOR",
                    "JPN",
                    "KAZ",
                    "KEN",
                    "KGZ",
                    "KHM",
                    "KIR",
                    "KNA",
                    "KOR",
                    "KWT",
                    "LAO",
                    "LBN",
                    "LBR",
                    "LBY",
                    "LCA",
                    "LIE",
                    "LKA",
                    "LSO",
                    "LTU",
                    "LUX",
                    "LVA",
                    "MAC",
                    "MAR",
                    "MCO",
                    "MDA",
                    "MDG",
                    "MDV",
                    "MEX",
                    "MHL",
                    "MKD",
                    "MLI",
                    "MLT",
                    "MMR",
                    "MNE",
                    "MNG",
                    "MNP",
                    "MOZ",
                    "MRT",
                    "MSR",
                    "MTQ",
                    "MUS",
                    "MWI",
                    "MYS",
                    "MYT",
                    "NAM",
                    "NCL",
                    "NER",
                    "NFK",
                    "NGA",
                    "NIC",
                    "NIU",
                    "NLD",
                    "NOR",
                    "NPL",
                    "NRU",
                    "NZL",
                    "OMN",
                    "PAK",
                    "PAN",
                    "PER",
                    "PHL",
                    "PLW",
                    "PNG",
                    "POL",
                    "PRI",
                    "PRT",
                    "PRY",
                    "PSE",
                    "PYF",
                    "QAT",
                    "REU",
                    "ROU",
                    "RUS",
                    "RWA",
                    "SAU",
                    "SEN",
                    "SGP",
                    "SHN",
                    "SLB",
                    "SLE",
                    "SLV",
                    "SMR",
                    "SOM",
                    "SPM",
                    "SRB",
                    "SSD",
                    "STP",
                    "SUR",
                    "SVK",
                    "SVN",
                    "SWE",
                    "SWZ",
                    "SXM",
                    "SYC",
                    "TCA",
                    "TCD",
                    "TGO",
                    "THA",
                    "TJK",
                    "TKM",
                    "TLS",
                    "TON",
                    "TTO",
                    "TUN",
                    "TUR",
                    "TUV",
                    "TWN",
                    "TZA",
                    "UGA",
                    "UKR",
                    "UMI",
                    "URY",
                    "USA",
                    "UZB",
                    "VAT",
                    "VCT",
                    "VEN",
                    "VGB",
                    "VIR",
                    "VNM",
                    "VUT",
                    "WLF",
                    "WSM",
                    "YEM",
                    "ZAF",
                    "ZMB",
                    "ZWE",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[typing_extensions.Literal["response"]]
        ] = None,
        limit: typing.Optional[int] = None,
        sort: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "createdDate", "-createdDate", "rating", "-rating"
                ]
            ]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.CustomerReviewsResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if exists_published_response is not None:
            _query["exists[publishedResponse]"] = encode_param(
                exists_published_response, False
            )
        if fields_customer_review_responses is not None:
            _query["fields[customerReviewResponses]"] = encode_param(
                fields_customer_review_responses, False
            )
        if fields_customer_reviews is not None:
            _query["fields[customerReviews]"] = encode_param(
                fields_customer_reviews, False
            )
        if filter_rating is not None:
            _query["filter[rating]"] = encode_param(filter_rating, False)
        if filter_territory is not None:
            _query["filter[territory]"] = encode_param(filter_territory, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if sort is not None:
            _query["sort"] = encode_param(sort, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v1/appStoreVersions/{id}/customerReviews",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.CustomerReviewsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
