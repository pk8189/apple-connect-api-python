"""File Generated by Sideko (sideko.dev)"""

from apple_python.core import (
    AsyncBaseClient,
    RequestOptions,
    encode_param,
    QueryParams,
    default_request_options,
    SyncBaseClient,
)
import typing
import typing_extensions
from apple_python.types.v1.app_store_versions.app_store_version_experiments import (
    models,
)


class AppStoreVersionExperimentsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def list(
        self,
        *,
        id: str,
        fields_app_store_version_experiment_treatments: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appIcon",
                    "appIconName",
                    "appStoreVersionExperiment",
                    "appStoreVersionExperimentTreatmentLocalizations",
                    "appStoreVersionExperimentV2",
                    "name",
                    "promotedDate",
                ]
            ]
        ] = None,
        fields_app_store_version_experiments: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appStoreVersion",
                    "appStoreVersionExperimentTreatments",
                    "endDate",
                    "name",
                    "reviewRequired",
                    "startDate",
                    "started",
                    "state",
                    "trafficProportion",
                ]
            ]
        ] = None,
        fields_app_store_versions: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "ageRatingDeclaration",
                    "alternativeDistributionPackage",
                    "app",
                    "appClipDefaultExperience",
                    "appStoreReviewDetail",
                    "appStoreState",
                    "appStoreVersionExperiments",
                    "appStoreVersionExperimentsV2",
                    "appStoreVersionLocalizations",
                    "appStoreVersionPhasedRelease",
                    "appStoreVersionSubmission",
                    "appVersionState",
                    "build",
                    "copyright",
                    "createdDate",
                    "customerReviews",
                    "downloadable",
                    "earliestReleaseDate",
                    "platform",
                    "releaseType",
                    "reviewType",
                    "routingAppCoverage",
                    "versionString",
                ]
            ]
        ] = None,
        filter_state: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "PREPARE_FOR_SUBMISSION",
                    "READY_FOR_REVIEW",
                    "WAITING_FOR_REVIEW",
                    "IN_REVIEW",
                    "ACCEPTED",
                    "APPROVED",
                    "REJECTED",
                    "COMPLETED",
                    "STOPPED",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appStoreVersion", "appStoreVersionExperimentTreatments"
                ]
            ]
        ] = None,
        limit: typing.Optional[int] = None,
        limit_app_store_version_experiment_treatments: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AppStoreVersionExperimentsResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_app_store_version_experiment_treatments is not None:
            _query["fields[appStoreVersionExperimentTreatments]"] = encode_param(
                fields_app_store_version_experiment_treatments, False
            )
        if fields_app_store_version_experiments is not None:
            _query["fields[appStoreVersionExperiments]"] = encode_param(
                fields_app_store_version_experiments, False
            )
        if fields_app_store_versions is not None:
            _query["fields[appStoreVersions]"] = encode_param(
                fields_app_store_versions, False
            )
        if filter_state is not None:
            _query["filter[state]"] = encode_param(filter_state, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if limit_app_store_version_experiment_treatments is not None:
            _query["limit[appStoreVersionExperimentTreatments]"] = encode_param(
                limit_app_store_version_experiment_treatments, False
            )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v1/appStoreVersions/{id}/appStoreVersionExperiments",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.AppStoreVersionExperimentsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncAppStoreVersionExperimentsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def list(
        self,
        *,
        id: str,
        fields_app_store_version_experiment_treatments: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appIcon",
                    "appIconName",
                    "appStoreVersionExperiment",
                    "appStoreVersionExperimentTreatmentLocalizations",
                    "appStoreVersionExperimentV2",
                    "name",
                    "promotedDate",
                ]
            ]
        ] = None,
        fields_app_store_version_experiments: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appStoreVersion",
                    "appStoreVersionExperimentTreatments",
                    "endDate",
                    "name",
                    "reviewRequired",
                    "startDate",
                    "started",
                    "state",
                    "trafficProportion",
                ]
            ]
        ] = None,
        fields_app_store_versions: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "ageRatingDeclaration",
                    "alternativeDistributionPackage",
                    "app",
                    "appClipDefaultExperience",
                    "appStoreReviewDetail",
                    "appStoreState",
                    "appStoreVersionExperiments",
                    "appStoreVersionExperimentsV2",
                    "appStoreVersionLocalizations",
                    "appStoreVersionPhasedRelease",
                    "appStoreVersionSubmission",
                    "appVersionState",
                    "build",
                    "copyright",
                    "createdDate",
                    "customerReviews",
                    "downloadable",
                    "earliestReleaseDate",
                    "platform",
                    "releaseType",
                    "reviewType",
                    "routingAppCoverage",
                    "versionString",
                ]
            ]
        ] = None,
        filter_state: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "PREPARE_FOR_SUBMISSION",
                    "READY_FOR_REVIEW",
                    "WAITING_FOR_REVIEW",
                    "IN_REVIEW",
                    "ACCEPTED",
                    "APPROVED",
                    "REJECTED",
                    "COMPLETED",
                    "STOPPED",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appStoreVersion", "appStoreVersionExperimentTreatments"
                ]
            ]
        ] = None,
        limit: typing.Optional[int] = None,
        limit_app_store_version_experiment_treatments: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AppStoreVersionExperimentsResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_app_store_version_experiment_treatments is not None:
            _query["fields[appStoreVersionExperimentTreatments]"] = encode_param(
                fields_app_store_version_experiment_treatments, False
            )
        if fields_app_store_version_experiments is not None:
            _query["fields[appStoreVersionExperiments]"] = encode_param(
                fields_app_store_version_experiments, False
            )
        if fields_app_store_versions is not None:
            _query["fields[appStoreVersions]"] = encode_param(
                fields_app_store_versions, False
            )
        if filter_state is not None:
            _query["filter[state]"] = encode_param(filter_state, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if limit_app_store_version_experiment_treatments is not None:
            _query["limit[appStoreVersionExperimentTreatments]"] = encode_param(
                limit_app_store_version_experiment_treatments, False
            )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v1/appStoreVersions/{id}/appStoreVersionExperiments",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.AppStoreVersionExperimentsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
