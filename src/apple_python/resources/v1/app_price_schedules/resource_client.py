"""File Generated by Sideko (sideko.dev)"""

from apple_python.core import (
    AsyncBaseClient,
    RequestOptions,
    SyncBaseClient,
    encode_param,
    default_request_options,
    to_encodable,
    QueryParams,
)
from apple_python.resources.v1.app_price_schedules.automatic_prices import (
    AsyncAutomaticPricesClient,
    AutomaticPricesClient,
)
from apple_python.resources.v1.app_price_schedules.base_territory import (
    AsyncBaseTerritoryClient,
    BaseTerritoryClient,
)
from apple_python.resources.v1.app_price_schedules.manual_prices import (
    AsyncManualPricesClient,
    ManualPricesClient,
)
import typing
import typing_extensions
from apple_python.types.v1.app_price_schedules import models, params


class AppPriceSchedulesClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.automatic_prices = AutomaticPricesClient(base_client=self._base_client)
        self.base_territory = BaseTerritoryClient(base_client=self._base_client)
        self.manual_prices = ManualPricesClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)
    def create(
        self,
        *,
        data: params.AppPriceScheduleCreateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AppPriceScheduleResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerAppPriceScheduleCreateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="POST",
            path="/v1/appPriceSchedules",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.AppPriceScheduleResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def get(
        self,
        *,
        id: str,
        fields_app_price_schedules: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app", "automaticPrices", "baseTerritory", "manualPrices"
                ]
            ]
        ] = None,
        fields_app_prices: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appPricePoint", "endDate", "manual", "startDate", "territory"
                ]
            ]
        ] = None,
        fields_territories: typing.Optional[
            typing.List[typing_extensions.Literal["currency"]]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app", "automaticPrices", "baseTerritory", "manualPrices"
                ]
            ]
        ] = None,
        limit_automatic_prices: typing.Optional[int] = None,
        limit_manual_prices: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AppPriceScheduleResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_app_price_schedules is not None:
            _query["fields[appPriceSchedules]"] = encode_param(
                fields_app_price_schedules, False
            )
        if fields_app_prices is not None:
            _query["fields[appPrices]"] = encode_param(fields_app_prices, False)
        if fields_territories is not None:
            _query["fields[territories]"] = encode_param(fields_territories, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit_automatic_prices is not None:
            _query["limit[automaticPrices]"] = encode_param(
                limit_automatic_prices, False
            )
        if limit_manual_prices is not None:
            _query["limit[manualPrices]"] = encode_param(limit_manual_prices, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v1/appPriceSchedules/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.AppPriceScheduleResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncAppPriceSchedulesClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.automatic_prices = AsyncAutomaticPricesClient(
            base_client=self._base_client
        )
        self.base_territory = AsyncBaseTerritoryClient(base_client=self._base_client)
        self.manual_prices = AsyncManualPricesClient(base_client=self._base_client)

    # register async api methods (keep comment for code generation)
    async def create(
        self,
        *,
        data: params.AppPriceScheduleCreateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AppPriceScheduleResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerAppPriceScheduleCreateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="POST",
            path="/v1/appPriceSchedules",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.AppPriceScheduleResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def get(
        self,
        *,
        id: str,
        fields_app_price_schedules: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app", "automaticPrices", "baseTerritory", "manualPrices"
                ]
            ]
        ] = None,
        fields_app_prices: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appPricePoint", "endDate", "manual", "startDate", "territory"
                ]
            ]
        ] = None,
        fields_territories: typing.Optional[
            typing.List[typing_extensions.Literal["currency"]]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app", "automaticPrices", "baseTerritory", "manualPrices"
                ]
            ]
        ] = None,
        limit_automatic_prices: typing.Optional[int] = None,
        limit_manual_prices: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AppPriceScheduleResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_app_price_schedules is not None:
            _query["fields[appPriceSchedules]"] = encode_param(
                fields_app_price_schedules, False
            )
        if fields_app_prices is not None:
            _query["fields[appPrices]"] = encode_param(fields_app_prices, False)
        if fields_territories is not None:
            _query["fields[territories]"] = encode_param(fields_territories, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit_automatic_prices is not None:
            _query["limit[automaticPrices]"] = encode_param(
                limit_automatic_prices, False
            )
        if limit_manual_prices is not None:
            _query["limit[manualPrices]"] = encode_param(limit_manual_prices, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v1/appPriceSchedules/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.AppPriceScheduleResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
