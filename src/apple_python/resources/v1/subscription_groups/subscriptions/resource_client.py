"""File Generated by Sideko (sideko.dev)"""

from apple_python.core import (
    SyncBaseClient,
    RequestOptions,
    default_request_options,
    AsyncBaseClient,
    QueryParams,
    encode_param,
)
import typing
import typing_extensions
from apple_python.types.v1.subscription_groups.subscriptions import models


class SubscriptionsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def list(
        self,
        *,
        id: str,
        fields_promoted_purchases: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "enabled",
                    "inAppPurchaseV2",
                    "promotionImages",
                    "state",
                    "subscription",
                    "visibleForAllUsers",
                ]
            ]
        ] = None,
        fields_subscription_app_store_review_screenshots: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "assetDeliveryState",
                    "assetToken",
                    "assetType",
                    "fileName",
                    "fileSize",
                    "imageAsset",
                    "sourceFileChecksum",
                    "subscription",
                    "uploadOperations",
                    "uploaded",
                ]
            ]
        ] = None,
        fields_subscription_availabilities: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "availableInNewTerritories", "availableTerritories", "subscription"
                ]
            ]
        ] = None,
        fields_subscription_groups: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "referenceName",
                    "subscriptionGroupLocalizations",
                    "subscriptions",
                ]
            ]
        ] = None,
        fields_subscription_introductory_offers: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "duration",
                    "endDate",
                    "numberOfPeriods",
                    "offerMode",
                    "startDate",
                    "subscription",
                    "subscriptionPricePoint",
                    "territory",
                ]
            ]
        ] = None,
        fields_subscription_localizations: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "description", "locale", "name", "state", "subscription"
                ]
            ]
        ] = None,
        fields_subscription_offer_codes: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "active",
                    "customCodes",
                    "customerEligibilities",
                    "duration",
                    "name",
                    "numberOfPeriods",
                    "offerEligibility",
                    "offerMode",
                    "oneTimeUseCodes",
                    "prices",
                    "subscription",
                    "totalNumberOfCodes",
                ]
            ]
        ] = None,
        fields_subscription_prices: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "preserveCurrentPrice",
                    "preserved",
                    "startDate",
                    "subscription",
                    "subscriptionPricePoint",
                    "territory",
                ]
            ]
        ] = None,
        fields_subscription_promotional_offers: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "duration",
                    "name",
                    "numberOfPeriods",
                    "offerCode",
                    "offerMode",
                    "prices",
                    "subscription",
                ]
            ]
        ] = None,
        fields_subscriptions: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appStoreReviewScreenshot",
                    "familySharable",
                    "group",
                    "groupLevel",
                    "introductoryOffers",
                    "name",
                    "offerCodes",
                    "pricePoints",
                    "prices",
                    "productId",
                    "promotedPurchase",
                    "promotionalOffers",
                    "reviewNote",
                    "state",
                    "subscriptionAvailability",
                    "subscriptionLocalizations",
                    "subscriptionPeriod",
                ]
            ]
        ] = None,
        filter_name: typing.Optional[typing.List[str]] = None,
        filter_product_id: typing.Optional[typing.List[str]] = None,
        filter_state: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "MISSING_METADATA",
                    "READY_TO_SUBMIT",
                    "WAITING_FOR_REVIEW",
                    "IN_REVIEW",
                    "DEVELOPER_ACTION_NEEDED",
                    "PENDING_BINARY_APPROVAL",
                    "APPROVED",
                    "DEVELOPER_REMOVED_FROM_SALE",
                    "REMOVED_FROM_SALE",
                    "REJECTED",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appStoreReviewScreenshot",
                    "group",
                    "introductoryOffers",
                    "offerCodes",
                    "prices",
                    "promotedPurchase",
                    "promotionalOffers",
                    "subscriptionAvailability",
                    "subscriptionLocalizations",
                ]
            ]
        ] = None,
        limit: typing.Optional[int] = None,
        limit_introductory_offers: typing.Optional[int] = None,
        limit_offer_codes: typing.Optional[int] = None,
        limit_prices: typing.Optional[int] = None,
        limit_promotional_offers: typing.Optional[int] = None,
        limit_subscription_localizations: typing.Optional[int] = None,
        sort: typing.Optional[
            typing.List[typing_extensions.Literal["name", "-name"]]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.SubscriptionsResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_promoted_purchases is not None:
            _query["fields[promotedPurchases]"] = encode_param(
                fields_promoted_purchases, False
            )
        if fields_subscription_app_store_review_screenshots is not None:
            _query["fields[subscriptionAppStoreReviewScreenshots]"] = encode_param(
                fields_subscription_app_store_review_screenshots, False
            )
        if fields_subscription_availabilities is not None:
            _query["fields[subscriptionAvailabilities]"] = encode_param(
                fields_subscription_availabilities, False
            )
        if fields_subscription_groups is not None:
            _query["fields[subscriptionGroups]"] = encode_param(
                fields_subscription_groups, False
            )
        if fields_subscription_introductory_offers is not None:
            _query["fields[subscriptionIntroductoryOffers]"] = encode_param(
                fields_subscription_introductory_offers, False
            )
        if fields_subscription_localizations is not None:
            _query["fields[subscriptionLocalizations]"] = encode_param(
                fields_subscription_localizations, False
            )
        if fields_subscription_offer_codes is not None:
            _query["fields[subscriptionOfferCodes]"] = encode_param(
                fields_subscription_offer_codes, False
            )
        if fields_subscription_prices is not None:
            _query["fields[subscriptionPrices]"] = encode_param(
                fields_subscription_prices, False
            )
        if fields_subscription_promotional_offers is not None:
            _query["fields[subscriptionPromotionalOffers]"] = encode_param(
                fields_subscription_promotional_offers, False
            )
        if fields_subscriptions is not None:
            _query["fields[subscriptions]"] = encode_param(fields_subscriptions, False)
        if filter_name is not None:
            _query["filter[name]"] = encode_param(filter_name, False)
        if filter_product_id is not None:
            _query["filter[productId]"] = encode_param(filter_product_id, False)
        if filter_state is not None:
            _query["filter[state]"] = encode_param(filter_state, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if limit_introductory_offers is not None:
            _query["limit[introductoryOffers]"] = encode_param(
                limit_introductory_offers, False
            )
        if limit_offer_codes is not None:
            _query["limit[offerCodes]"] = encode_param(limit_offer_codes, False)
        if limit_prices is not None:
            _query["limit[prices]"] = encode_param(limit_prices, False)
        if limit_promotional_offers is not None:
            _query["limit[promotionalOffers]"] = encode_param(
                limit_promotional_offers, False
            )
        if limit_subscription_localizations is not None:
            _query["limit[subscriptionLocalizations]"] = encode_param(
                limit_subscription_localizations, False
            )
        if sort is not None:
            _query["sort"] = encode_param(sort, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v1/subscriptionGroups/{id}/subscriptions",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.SubscriptionsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncSubscriptionsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def list(
        self,
        *,
        id: str,
        fields_promoted_purchases: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "enabled",
                    "inAppPurchaseV2",
                    "promotionImages",
                    "state",
                    "subscription",
                    "visibleForAllUsers",
                ]
            ]
        ] = None,
        fields_subscription_app_store_review_screenshots: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "assetDeliveryState",
                    "assetToken",
                    "assetType",
                    "fileName",
                    "fileSize",
                    "imageAsset",
                    "sourceFileChecksum",
                    "subscription",
                    "uploadOperations",
                    "uploaded",
                ]
            ]
        ] = None,
        fields_subscription_availabilities: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "availableInNewTerritories", "availableTerritories", "subscription"
                ]
            ]
        ] = None,
        fields_subscription_groups: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "referenceName",
                    "subscriptionGroupLocalizations",
                    "subscriptions",
                ]
            ]
        ] = None,
        fields_subscription_introductory_offers: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "duration",
                    "endDate",
                    "numberOfPeriods",
                    "offerMode",
                    "startDate",
                    "subscription",
                    "subscriptionPricePoint",
                    "territory",
                ]
            ]
        ] = None,
        fields_subscription_localizations: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "description", "locale", "name", "state", "subscription"
                ]
            ]
        ] = None,
        fields_subscription_offer_codes: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "active",
                    "customCodes",
                    "customerEligibilities",
                    "duration",
                    "name",
                    "numberOfPeriods",
                    "offerEligibility",
                    "offerMode",
                    "oneTimeUseCodes",
                    "prices",
                    "subscription",
                    "totalNumberOfCodes",
                ]
            ]
        ] = None,
        fields_subscription_prices: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "preserveCurrentPrice",
                    "preserved",
                    "startDate",
                    "subscription",
                    "subscriptionPricePoint",
                    "territory",
                ]
            ]
        ] = None,
        fields_subscription_promotional_offers: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "duration",
                    "name",
                    "numberOfPeriods",
                    "offerCode",
                    "offerMode",
                    "prices",
                    "subscription",
                ]
            ]
        ] = None,
        fields_subscriptions: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appStoreReviewScreenshot",
                    "familySharable",
                    "group",
                    "groupLevel",
                    "introductoryOffers",
                    "name",
                    "offerCodes",
                    "pricePoints",
                    "prices",
                    "productId",
                    "promotedPurchase",
                    "promotionalOffers",
                    "reviewNote",
                    "state",
                    "subscriptionAvailability",
                    "subscriptionLocalizations",
                    "subscriptionPeriod",
                ]
            ]
        ] = None,
        filter_name: typing.Optional[typing.List[str]] = None,
        filter_product_id: typing.Optional[typing.List[str]] = None,
        filter_state: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "MISSING_METADATA",
                    "READY_TO_SUBMIT",
                    "WAITING_FOR_REVIEW",
                    "IN_REVIEW",
                    "DEVELOPER_ACTION_NEEDED",
                    "PENDING_BINARY_APPROVAL",
                    "APPROVED",
                    "DEVELOPER_REMOVED_FROM_SALE",
                    "REMOVED_FROM_SALE",
                    "REJECTED",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appStoreReviewScreenshot",
                    "group",
                    "introductoryOffers",
                    "offerCodes",
                    "prices",
                    "promotedPurchase",
                    "promotionalOffers",
                    "subscriptionAvailability",
                    "subscriptionLocalizations",
                ]
            ]
        ] = None,
        limit: typing.Optional[int] = None,
        limit_introductory_offers: typing.Optional[int] = None,
        limit_offer_codes: typing.Optional[int] = None,
        limit_prices: typing.Optional[int] = None,
        limit_promotional_offers: typing.Optional[int] = None,
        limit_subscription_localizations: typing.Optional[int] = None,
        sort: typing.Optional[
            typing.List[typing_extensions.Literal["name", "-name"]]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.SubscriptionsResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_promoted_purchases is not None:
            _query["fields[promotedPurchases]"] = encode_param(
                fields_promoted_purchases, False
            )
        if fields_subscription_app_store_review_screenshots is not None:
            _query["fields[subscriptionAppStoreReviewScreenshots]"] = encode_param(
                fields_subscription_app_store_review_screenshots, False
            )
        if fields_subscription_availabilities is not None:
            _query["fields[subscriptionAvailabilities]"] = encode_param(
                fields_subscription_availabilities, False
            )
        if fields_subscription_groups is not None:
            _query["fields[subscriptionGroups]"] = encode_param(
                fields_subscription_groups, False
            )
        if fields_subscription_introductory_offers is not None:
            _query["fields[subscriptionIntroductoryOffers]"] = encode_param(
                fields_subscription_introductory_offers, False
            )
        if fields_subscription_localizations is not None:
            _query["fields[subscriptionLocalizations]"] = encode_param(
                fields_subscription_localizations, False
            )
        if fields_subscription_offer_codes is not None:
            _query["fields[subscriptionOfferCodes]"] = encode_param(
                fields_subscription_offer_codes, False
            )
        if fields_subscription_prices is not None:
            _query["fields[subscriptionPrices]"] = encode_param(
                fields_subscription_prices, False
            )
        if fields_subscription_promotional_offers is not None:
            _query["fields[subscriptionPromotionalOffers]"] = encode_param(
                fields_subscription_promotional_offers, False
            )
        if fields_subscriptions is not None:
            _query["fields[subscriptions]"] = encode_param(fields_subscriptions, False)
        if filter_name is not None:
            _query["filter[name]"] = encode_param(filter_name, False)
        if filter_product_id is not None:
            _query["filter[productId]"] = encode_param(filter_product_id, False)
        if filter_state is not None:
            _query["filter[state]"] = encode_param(filter_state, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if limit_introductory_offers is not None:
            _query["limit[introductoryOffers]"] = encode_param(
                limit_introductory_offers, False
            )
        if limit_offer_codes is not None:
            _query["limit[offerCodes]"] = encode_param(limit_offer_codes, False)
        if limit_prices is not None:
            _query["limit[prices]"] = encode_param(limit_prices, False)
        if limit_promotional_offers is not None:
            _query["limit[promotionalOffers]"] = encode_param(
                limit_promotional_offers, False
            )
        if limit_subscription_localizations is not None:
            _query["limit[subscriptionLocalizations]"] = encode_param(
                limit_subscription_localizations, False
            )
        if sort is not None:
            _query["sort"] = encode_param(sort, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v1/subscriptionGroups/{id}/subscriptions",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.SubscriptionsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
