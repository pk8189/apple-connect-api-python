"""File Generated by Sideko (sideko.dev)"""

from apple_python.core import (
    SyncBaseClient,
    RequestOptions,
    AsyncBaseClient,
    default_request_options,
    QueryParams,
    to_encodable,
    encode_param,
)
from apple_python.resources.v1.subscription_groups.subscription_group_localizations import (
    AsyncSubscriptionGroupLocalizationsClient,
    SubscriptionGroupLocalizationsClient,
)
from apple_python.resources.v1.subscription_groups.subscriptions import (
    AsyncSubscriptionsClient,
    SubscriptionsClient,
)
import typing
import typing_extensions
from apple_python.types.v1.subscription_groups import params, models


class SubscriptionGroupsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.subscription_group_localizations = SubscriptionGroupLocalizationsClient(
            base_client=self._base_client
        )
        self.subscriptions = SubscriptionsClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)
    def create(
        self,
        *,
        data: params.SubscriptionGroupCreateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.SubscriptionGroupResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerSubscriptionGroupCreateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="POST",
            path="/v1/subscriptionGroups",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.SubscriptionGroupResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def patch(
        self,
        *,
        data: params.SubscriptionGroupUpdateRequest,
        id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.SubscriptionGroupResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerSubscriptionGroupUpdateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="PATCH",
            path=f"/v1/subscriptionGroups/{id}",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.SubscriptionGroupResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def get(
        self,
        *,
        id: str,
        fields_subscription_group_localizations: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "customAppName", "locale", "name", "state", "subscriptionGroup"
                ]
            ]
        ] = None,
        fields_subscription_groups: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "referenceName",
                    "subscriptionGroupLocalizations",
                    "subscriptions",
                ]
            ]
        ] = None,
        fields_subscriptions: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appStoreReviewScreenshot",
                    "familySharable",
                    "group",
                    "groupLevel",
                    "introductoryOffers",
                    "name",
                    "offerCodes",
                    "pricePoints",
                    "prices",
                    "productId",
                    "promotedPurchase",
                    "promotionalOffers",
                    "reviewNote",
                    "state",
                    "subscriptionAvailability",
                    "subscriptionLocalizations",
                    "subscriptionPeriod",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "subscriptionGroupLocalizations", "subscriptions"
                ]
            ]
        ] = None,
        limit_subscription_group_localizations: typing.Optional[int] = None,
        limit_subscriptions: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.SubscriptionGroupResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_subscription_group_localizations is not None:
            _query["fields[subscriptionGroupLocalizations]"] = encode_param(
                fields_subscription_group_localizations, False
            )
        if fields_subscription_groups is not None:
            _query["fields[subscriptionGroups]"] = encode_param(
                fields_subscription_groups, False
            )
        if fields_subscriptions is not None:
            _query["fields[subscriptions]"] = encode_param(fields_subscriptions, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit_subscription_group_localizations is not None:
            _query["limit[subscriptionGroupLocalizations]"] = encode_param(
                limit_subscription_group_localizations, False
            )
        if limit_subscriptions is not None:
            _query["limit[subscriptions]"] = encode_param(limit_subscriptions, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v1/subscriptionGroups/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.SubscriptionGroupResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def delete(
        self, *, id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="DELETE",
            path=f"/v1/subscriptionGroups/{id}",
            auth_names=["itc-bearer-token"],
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncSubscriptionGroupsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.subscription_group_localizations = (
            AsyncSubscriptionGroupLocalizationsClient(base_client=self._base_client)
        )
        self.subscriptions = AsyncSubscriptionsClient(base_client=self._base_client)

    # register async api methods (keep comment for code generation)
    async def create(
        self,
        *,
        data: params.SubscriptionGroupCreateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.SubscriptionGroupResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerSubscriptionGroupCreateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="POST",
            path="/v1/subscriptionGroups",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.SubscriptionGroupResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def patch(
        self,
        *,
        data: params.SubscriptionGroupUpdateRequest,
        id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.SubscriptionGroupResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerSubscriptionGroupUpdateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="PATCH",
            path=f"/v1/subscriptionGroups/{id}",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.SubscriptionGroupResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def get(
        self,
        *,
        id: str,
        fields_subscription_group_localizations: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "customAppName", "locale", "name", "state", "subscriptionGroup"
                ]
            ]
        ] = None,
        fields_subscription_groups: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "referenceName",
                    "subscriptionGroupLocalizations",
                    "subscriptions",
                ]
            ]
        ] = None,
        fields_subscriptions: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appStoreReviewScreenshot",
                    "familySharable",
                    "group",
                    "groupLevel",
                    "introductoryOffers",
                    "name",
                    "offerCodes",
                    "pricePoints",
                    "prices",
                    "productId",
                    "promotedPurchase",
                    "promotionalOffers",
                    "reviewNote",
                    "state",
                    "subscriptionAvailability",
                    "subscriptionLocalizations",
                    "subscriptionPeriod",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "subscriptionGroupLocalizations", "subscriptions"
                ]
            ]
        ] = None,
        limit_subscription_group_localizations: typing.Optional[int] = None,
        limit_subscriptions: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.SubscriptionGroupResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_subscription_group_localizations is not None:
            _query["fields[subscriptionGroupLocalizations]"] = encode_param(
                fields_subscription_group_localizations, False
            )
        if fields_subscription_groups is not None:
            _query["fields[subscriptionGroups]"] = encode_param(
                fields_subscription_groups, False
            )
        if fields_subscriptions is not None:
            _query["fields[subscriptions]"] = encode_param(fields_subscriptions, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit_subscription_group_localizations is not None:
            _query["limit[subscriptionGroupLocalizations]"] = encode_param(
                limit_subscription_group_localizations, False
            )
        if limit_subscriptions is not None:
            _query["limit[subscriptions]"] = encode_param(limit_subscriptions, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v1/subscriptionGroups/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.SubscriptionGroupResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def delete(
        self, *, id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="DELETE",
            path=f"/v1/subscriptionGroups/{id}",
            auth_names=["itc-bearer-token"],
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
