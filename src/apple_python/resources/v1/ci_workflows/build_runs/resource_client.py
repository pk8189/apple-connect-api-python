"""File Generated by Sideko (sideko.dev)"""

from apple_python.core import (
    encode_param,
    QueryParams,
    default_request_options,
    AsyncBaseClient,
    SyncBaseClient,
    RequestOptions,
)
import typing
import typing_extensions
from apple_python.types.v1.ci_workflows.build_runs import models


class BuildRunsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def list(
        self,
        *,
        id: str,
        fields_builds: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "appEncryptionDeclaration",
                    "appStoreVersion",
                    "betaAppReviewSubmission",
                    "betaBuildLocalizations",
                    "betaGroups",
                    "buildAudienceType",
                    "buildBetaDetail",
                    "buildBundles",
                    "computedMinMacOsVersion",
                    "diagnosticSignatures",
                    "expirationDate",
                    "expired",
                    "iconAssetToken",
                    "icons",
                    "individualTesters",
                    "lsMinimumSystemVersion",
                    "minOsVersion",
                    "perfPowerMetrics",
                    "preReleaseVersion",
                    "processingState",
                    "uploadedDate",
                    "usesNonExemptEncryption",
                    "version",
                ]
            ]
        ] = None,
        fields_ci_build_runs: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "actions",
                    "buildRun",
                    "builds",
                    "cancelReason",
                    "clean",
                    "completionStatus",
                    "createdDate",
                    "destinationBranch",
                    "destinationCommit",
                    "executionProgress",
                    "finishedDate",
                    "isPullRequestBuild",
                    "issueCounts",
                    "number",
                    "product",
                    "pullRequest",
                    "sourceBranchOrTag",
                    "sourceCommit",
                    "startReason",
                    "startedDate",
                    "workflow",
                ]
            ]
        ] = None,
        fields_ci_products: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "additionalRepositories",
                    "app",
                    "buildRuns",
                    "bundleId",
                    "createdDate",
                    "name",
                    "primaryRepositories",
                    "productType",
                    "workflows",
                ]
            ]
        ] = None,
        fields_ci_workflows: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "actions",
                    "branchStartCondition",
                    "buildRuns",
                    "clean",
                    "containerFilePath",
                    "description",
                    "isEnabled",
                    "isLockedForEditing",
                    "lastModifiedDate",
                    "macOsVersion",
                    "manualBranchStartCondition",
                    "manualPullRequestStartCondition",
                    "manualTagStartCondition",
                    "name",
                    "product",
                    "pullRequestStartCondition",
                    "repository",
                    "scheduledStartCondition",
                    "tagStartCondition",
                    "xcodeVersion",
                ]
            ]
        ] = None,
        fields_scm_git_references: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "canonicalName", "isDeleted", "kind", "name", "repository"
                ]
            ]
        ] = None,
        fields_scm_pull_requests: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "destinationBranchName",
                    "destinationRepositoryName",
                    "destinationRepositoryOwner",
                    "isClosed",
                    "isCrossRepository",
                    "number",
                    "repository",
                    "sourceBranchName",
                    "sourceRepositoryName",
                    "sourceRepositoryOwner",
                    "title",
                    "webUrl",
                ]
            ]
        ] = None,
        filter_builds: typing.Optional[typing.List[str]] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "builds",
                    "destinationBranch",
                    "product",
                    "pullRequest",
                    "sourceBranchOrTag",
                    "workflow",
                ]
            ]
        ] = None,
        limit: typing.Optional[int] = None,
        limit_builds: typing.Optional[int] = None,
        sort: typing.Optional[
            typing.List[typing_extensions.Literal["number", "-number"]]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.CiBuildRunsResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_builds is not None:
            _query["fields[builds]"] = encode_param(fields_builds, False)
        if fields_ci_build_runs is not None:
            _query["fields[ciBuildRuns]"] = encode_param(fields_ci_build_runs, False)
        if fields_ci_products is not None:
            _query["fields[ciProducts]"] = encode_param(fields_ci_products, False)
        if fields_ci_workflows is not None:
            _query["fields[ciWorkflows]"] = encode_param(fields_ci_workflows, False)
        if fields_scm_git_references is not None:
            _query["fields[scmGitReferences]"] = encode_param(
                fields_scm_git_references, False
            )
        if fields_scm_pull_requests is not None:
            _query["fields[scmPullRequests]"] = encode_param(
                fields_scm_pull_requests, False
            )
        if filter_builds is not None:
            _query["filter[builds]"] = encode_param(filter_builds, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if limit_builds is not None:
            _query["limit[builds]"] = encode_param(limit_builds, False)
        if sort is not None:
            _query["sort"] = encode_param(sort, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v1/ciWorkflows/{id}/buildRuns",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.CiBuildRunsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncBuildRunsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def list(
        self,
        *,
        id: str,
        fields_builds: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "appEncryptionDeclaration",
                    "appStoreVersion",
                    "betaAppReviewSubmission",
                    "betaBuildLocalizations",
                    "betaGroups",
                    "buildAudienceType",
                    "buildBetaDetail",
                    "buildBundles",
                    "computedMinMacOsVersion",
                    "diagnosticSignatures",
                    "expirationDate",
                    "expired",
                    "iconAssetToken",
                    "icons",
                    "individualTesters",
                    "lsMinimumSystemVersion",
                    "minOsVersion",
                    "perfPowerMetrics",
                    "preReleaseVersion",
                    "processingState",
                    "uploadedDate",
                    "usesNonExemptEncryption",
                    "version",
                ]
            ]
        ] = None,
        fields_ci_build_runs: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "actions",
                    "buildRun",
                    "builds",
                    "cancelReason",
                    "clean",
                    "completionStatus",
                    "createdDate",
                    "destinationBranch",
                    "destinationCommit",
                    "executionProgress",
                    "finishedDate",
                    "isPullRequestBuild",
                    "issueCounts",
                    "number",
                    "product",
                    "pullRequest",
                    "sourceBranchOrTag",
                    "sourceCommit",
                    "startReason",
                    "startedDate",
                    "workflow",
                ]
            ]
        ] = None,
        fields_ci_products: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "additionalRepositories",
                    "app",
                    "buildRuns",
                    "bundleId",
                    "createdDate",
                    "name",
                    "primaryRepositories",
                    "productType",
                    "workflows",
                ]
            ]
        ] = None,
        fields_ci_workflows: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "actions",
                    "branchStartCondition",
                    "buildRuns",
                    "clean",
                    "containerFilePath",
                    "description",
                    "isEnabled",
                    "isLockedForEditing",
                    "lastModifiedDate",
                    "macOsVersion",
                    "manualBranchStartCondition",
                    "manualPullRequestStartCondition",
                    "manualTagStartCondition",
                    "name",
                    "product",
                    "pullRequestStartCondition",
                    "repository",
                    "scheduledStartCondition",
                    "tagStartCondition",
                    "xcodeVersion",
                ]
            ]
        ] = None,
        fields_scm_git_references: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "canonicalName", "isDeleted", "kind", "name", "repository"
                ]
            ]
        ] = None,
        fields_scm_pull_requests: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "destinationBranchName",
                    "destinationRepositoryName",
                    "destinationRepositoryOwner",
                    "isClosed",
                    "isCrossRepository",
                    "number",
                    "repository",
                    "sourceBranchName",
                    "sourceRepositoryName",
                    "sourceRepositoryOwner",
                    "title",
                    "webUrl",
                ]
            ]
        ] = None,
        filter_builds: typing.Optional[typing.List[str]] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "builds",
                    "destinationBranch",
                    "product",
                    "pullRequest",
                    "sourceBranchOrTag",
                    "workflow",
                ]
            ]
        ] = None,
        limit: typing.Optional[int] = None,
        limit_builds: typing.Optional[int] = None,
        sort: typing.Optional[
            typing.List[typing_extensions.Literal["number", "-number"]]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.CiBuildRunsResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_builds is not None:
            _query["fields[builds]"] = encode_param(fields_builds, False)
        if fields_ci_build_runs is not None:
            _query["fields[ciBuildRuns]"] = encode_param(fields_ci_build_runs, False)
        if fields_ci_products is not None:
            _query["fields[ciProducts]"] = encode_param(fields_ci_products, False)
        if fields_ci_workflows is not None:
            _query["fields[ciWorkflows]"] = encode_param(fields_ci_workflows, False)
        if fields_scm_git_references is not None:
            _query["fields[scmGitReferences]"] = encode_param(
                fields_scm_git_references, False
            )
        if fields_scm_pull_requests is not None:
            _query["fields[scmPullRequests]"] = encode_param(
                fields_scm_pull_requests, False
            )
        if filter_builds is not None:
            _query["filter[builds]"] = encode_param(filter_builds, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if limit_builds is not None:
            _query["limit[builds]"] = encode_param(limit_builds, False)
        if sort is not None:
            _query["sort"] = encode_param(sort, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v1/ciWorkflows/{id}/buildRuns",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.CiBuildRunsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
