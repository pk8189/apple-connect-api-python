"""File Generated by Sideko (sideko.dev)"""

from apple_python.core import (
    QueryParams,
    AsyncBaseClient,
    encode_param,
    SyncBaseClient,
    RequestOptions,
    default_request_options,
)
import typing
import typing_extensions
from apple_python.types.v1.actors import models


class ActorsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def get(
        self,
        *,
        id: str,
        fields_actors: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "actorType",
                    "apiKeyId",
                    "userEmail",
                    "userFirstName",
                    "userLastName",
                ]
            ]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.ActorResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_actors is not None:
            _query["fields[actors]"] = encode_param(fields_actors, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v1/actors/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.ActorResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def list(
        self,
        *,
        filter_id: typing.List[str],
        fields_actors: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "actorType",
                    "apiKeyId",
                    "userEmail",
                    "userFirstName",
                    "userLastName",
                ]
            ]
        ] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.ActorsResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        _query["filter[id]"] = encode_param(filter_id, False)
        if fields_actors is not None:
            _query["fields[actors]"] = encode_param(fields_actors, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path="/v1/actors",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.ActorsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncActorsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def get(
        self,
        *,
        id: str,
        fields_actors: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "actorType",
                    "apiKeyId",
                    "userEmail",
                    "userFirstName",
                    "userLastName",
                ]
            ]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.ActorResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_actors is not None:
            _query["fields[actors]"] = encode_param(fields_actors, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v1/actors/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.ActorResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def list(
        self,
        *,
        filter_id: typing.List[str],
        fields_actors: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "actorType",
                    "apiKeyId",
                    "userEmail",
                    "userFirstName",
                    "userLastName",
                ]
            ]
        ] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.ActorsResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        _query["filter[id]"] = encode_param(filter_id, False)
        if fields_actors is not None:
            _query["fields[actors]"] = encode_param(fields_actors, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path="/v1/actors",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.ActorsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
