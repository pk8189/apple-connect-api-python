"""File Generated by Sideko (sideko.dev)"""

from apple_python.core import (
    encode_param,
    default_request_options,
    SyncBaseClient,
    AsyncBaseClient,
    QueryParams,
    RequestOptions,
)
import typing
import typing_extensions
from apple_python.types.v1.app_screenshot_sets.app_screenshots import models


class AppScreenshotsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def list(
        self,
        *,
        id: str,
        fields_app_screenshot_sets: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appCustomProductPageLocalization",
                    "appScreenshots",
                    "appStoreVersionExperimentTreatmentLocalization",
                    "appStoreVersionLocalization",
                    "screenshotDisplayType",
                ]
            ]
        ] = None,
        fields_app_screenshots: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appScreenshotSet",
                    "assetDeliveryState",
                    "assetToken",
                    "assetType",
                    "fileName",
                    "fileSize",
                    "imageAsset",
                    "sourceFileChecksum",
                    "uploadOperations",
                    "uploaded",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[typing_extensions.Literal["appScreenshotSet"]]
        ] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AppScreenshotsResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_app_screenshot_sets is not None:
            _query["fields[appScreenshotSets]"] = encode_param(
                fields_app_screenshot_sets, False
            )
        if fields_app_screenshots is not None:
            _query["fields[appScreenshots]"] = encode_param(
                fields_app_screenshots, False
            )
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v1/appScreenshotSets/{id}/appScreenshots",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.AppScreenshotsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncAppScreenshotsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def list(
        self,
        *,
        id: str,
        fields_app_screenshot_sets: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appCustomProductPageLocalization",
                    "appScreenshots",
                    "appStoreVersionExperimentTreatmentLocalization",
                    "appStoreVersionLocalization",
                    "screenshotDisplayType",
                ]
            ]
        ] = None,
        fields_app_screenshots: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appScreenshotSet",
                    "assetDeliveryState",
                    "assetToken",
                    "assetType",
                    "fileName",
                    "fileSize",
                    "imageAsset",
                    "sourceFileChecksum",
                    "uploadOperations",
                    "uploaded",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[typing_extensions.Literal["appScreenshotSet"]]
        ] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AppScreenshotsResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_app_screenshot_sets is not None:
            _query["fields[appScreenshotSets]"] = encode_param(
                fields_app_screenshot_sets, False
            )
        if fields_app_screenshots is not None:
            _query["fields[appScreenshots]"] = encode_param(
                fields_app_screenshots, False
            )
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v1/appScreenshotSets/{id}/appScreenshots",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.AppScreenshotsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
