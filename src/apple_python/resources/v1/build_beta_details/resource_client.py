"""File Generated by Sideko (sideko.dev)"""

from apple_python.core import (
    to_encodable,
    RequestOptions,
    SyncBaseClient,
    QueryParams,
    encode_param,
    AsyncBaseClient,
    default_request_options,
)
from apple_python.resources.v1.build_beta_details.build import (
    BuildClient,
    AsyncBuildClient,
)
import typing
import typing_extensions
from apple_python.types.v1.build_beta_details import params, models


class BuildBetaDetailsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.build = BuildClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)
    def patch(
        self,
        *,
        data: params.BuildBetaDetailUpdateRequest,
        id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.BuildBetaDetailResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerBuildBetaDetailUpdateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="PATCH",
            path=f"/v1/buildBetaDetails/{id}",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.BuildBetaDetailResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def get(
        self,
        *,
        id: str,
        fields_build_beta_details: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "autoNotifyEnabled",
                    "build",
                    "externalBuildState",
                    "internalBuildState",
                ]
            ]
        ] = None,
        fields_builds: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "appEncryptionDeclaration",
                    "appStoreVersion",
                    "betaAppReviewSubmission",
                    "betaBuildLocalizations",
                    "betaGroups",
                    "buildAudienceType",
                    "buildBetaDetail",
                    "buildBundles",
                    "computedMinMacOsVersion",
                    "diagnosticSignatures",
                    "expirationDate",
                    "expired",
                    "iconAssetToken",
                    "icons",
                    "individualTesters",
                    "lsMinimumSystemVersion",
                    "minOsVersion",
                    "perfPowerMetrics",
                    "preReleaseVersion",
                    "processingState",
                    "uploadedDate",
                    "usesNonExemptEncryption",
                    "version",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[typing_extensions.Literal["build"]]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.BuildBetaDetailResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_build_beta_details is not None:
            _query["fields[buildBetaDetails]"] = encode_param(
                fields_build_beta_details, False
            )
        if fields_builds is not None:
            _query["fields[builds]"] = encode_param(fields_builds, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v1/buildBetaDetails/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.BuildBetaDetailResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def list(
        self,
        *,
        fields_build_beta_details: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "autoNotifyEnabled",
                    "build",
                    "externalBuildState",
                    "internalBuildState",
                ]
            ]
        ] = None,
        fields_builds: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "appEncryptionDeclaration",
                    "appStoreVersion",
                    "betaAppReviewSubmission",
                    "betaBuildLocalizations",
                    "betaGroups",
                    "buildAudienceType",
                    "buildBetaDetail",
                    "buildBundles",
                    "computedMinMacOsVersion",
                    "diagnosticSignatures",
                    "expirationDate",
                    "expired",
                    "iconAssetToken",
                    "icons",
                    "individualTesters",
                    "lsMinimumSystemVersion",
                    "minOsVersion",
                    "perfPowerMetrics",
                    "preReleaseVersion",
                    "processingState",
                    "uploadedDate",
                    "usesNonExemptEncryption",
                    "version",
                ]
            ]
        ] = None,
        filter_build: typing.Optional[typing.List[str]] = None,
        filter_id: typing.Optional[typing.List[str]] = None,
        include: typing.Optional[
            typing.List[typing_extensions.Literal["build"]]
        ] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.BuildBetaDetailsResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_build_beta_details is not None:
            _query["fields[buildBetaDetails]"] = encode_param(
                fields_build_beta_details, False
            )
        if fields_builds is not None:
            _query["fields[builds]"] = encode_param(fields_builds, False)
        if filter_build is not None:
            _query["filter[build]"] = encode_param(filter_build, False)
        if filter_id is not None:
            _query["filter[id]"] = encode_param(filter_id, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path="/v1/buildBetaDetails",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.BuildBetaDetailsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncBuildBetaDetailsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.build = AsyncBuildClient(base_client=self._base_client)

    # register async api methods (keep comment for code generation)
    async def patch(
        self,
        *,
        data: params.BuildBetaDetailUpdateRequest,
        id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.BuildBetaDetailResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerBuildBetaDetailUpdateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="PATCH",
            path=f"/v1/buildBetaDetails/{id}",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.BuildBetaDetailResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def get(
        self,
        *,
        id: str,
        fields_build_beta_details: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "autoNotifyEnabled",
                    "build",
                    "externalBuildState",
                    "internalBuildState",
                ]
            ]
        ] = None,
        fields_builds: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "appEncryptionDeclaration",
                    "appStoreVersion",
                    "betaAppReviewSubmission",
                    "betaBuildLocalizations",
                    "betaGroups",
                    "buildAudienceType",
                    "buildBetaDetail",
                    "buildBundles",
                    "computedMinMacOsVersion",
                    "diagnosticSignatures",
                    "expirationDate",
                    "expired",
                    "iconAssetToken",
                    "icons",
                    "individualTesters",
                    "lsMinimumSystemVersion",
                    "minOsVersion",
                    "perfPowerMetrics",
                    "preReleaseVersion",
                    "processingState",
                    "uploadedDate",
                    "usesNonExemptEncryption",
                    "version",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[typing_extensions.Literal["build"]]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.BuildBetaDetailResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_build_beta_details is not None:
            _query["fields[buildBetaDetails]"] = encode_param(
                fields_build_beta_details, False
            )
        if fields_builds is not None:
            _query["fields[builds]"] = encode_param(fields_builds, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v1/buildBetaDetails/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.BuildBetaDetailResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def list(
        self,
        *,
        fields_build_beta_details: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "autoNotifyEnabled",
                    "build",
                    "externalBuildState",
                    "internalBuildState",
                ]
            ]
        ] = None,
        fields_builds: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "appEncryptionDeclaration",
                    "appStoreVersion",
                    "betaAppReviewSubmission",
                    "betaBuildLocalizations",
                    "betaGroups",
                    "buildAudienceType",
                    "buildBetaDetail",
                    "buildBundles",
                    "computedMinMacOsVersion",
                    "diagnosticSignatures",
                    "expirationDate",
                    "expired",
                    "iconAssetToken",
                    "icons",
                    "individualTesters",
                    "lsMinimumSystemVersion",
                    "minOsVersion",
                    "perfPowerMetrics",
                    "preReleaseVersion",
                    "processingState",
                    "uploadedDate",
                    "usesNonExemptEncryption",
                    "version",
                ]
            ]
        ] = None,
        filter_build: typing.Optional[typing.List[str]] = None,
        filter_id: typing.Optional[typing.List[str]] = None,
        include: typing.Optional[
            typing.List[typing_extensions.Literal["build"]]
        ] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.BuildBetaDetailsResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_build_beta_details is not None:
            _query["fields[buildBetaDetails]"] = encode_param(
                fields_build_beta_details, False
            )
        if fields_builds is not None:
            _query["fields[builds]"] = encode_param(fields_builds, False)
        if filter_build is not None:
            _query["filter[build]"] = encode_param(filter_build, False)
        if filter_id is not None:
            _query["filter[id]"] = encode_param(filter_id, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path="/v1/buildBetaDetails",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.BuildBetaDetailsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
