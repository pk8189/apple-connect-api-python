"""File Generated by Sideko (sideko.dev)"""

from apple_python.core import (
    RequestOptions,
    default_request_options,
    SyncBaseClient,
    QueryParams,
    AsyncBaseClient,
    to_encodable,
    encode_param,
)
import typing
import typing_extensions
from apple_python.types.v1.certificates import models, params


class CertificatesClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def create(
        self,
        *,
        data: params.CertificateCreateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.CertificateResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerCertificateCreateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="POST",
            path="/v1/certificates",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.CertificateResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def get(
        self,
        *,
        id: str,
        fields_certificates: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "certificateContent",
                    "certificateType",
                    "csrContent",
                    "displayName",
                    "expirationDate",
                    "name",
                    "platform",
                    "serialNumber",
                ]
            ]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.CertificateResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_certificates is not None:
            _query["fields[certificates]"] = encode_param(fields_certificates, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v1/certificates/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.CertificateResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def list(
        self,
        *,
        fields_certificates: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "certificateContent",
                    "certificateType",
                    "csrContent",
                    "displayName",
                    "expirationDate",
                    "name",
                    "platform",
                    "serialNumber",
                ]
            ]
        ] = None,
        filter_certificate_type: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "IOS_DEVELOPMENT",
                    "IOS_DISTRIBUTION",
                    "MAC_APP_DISTRIBUTION",
                    "MAC_INSTALLER_DISTRIBUTION",
                    "MAC_APP_DEVELOPMENT",
                    "DEVELOPER_ID_KEXT",
                    "DEVELOPER_ID_APPLICATION",
                    "DEVELOPMENT",
                    "DISTRIBUTION",
                    "PASS_TYPE_ID",
                    "PASS_TYPE_ID_WITH_NFC",
                ]
            ]
        ] = None,
        filter_display_name: typing.Optional[typing.List[str]] = None,
        filter_id: typing.Optional[typing.List[str]] = None,
        filter_serial_number: typing.Optional[typing.List[str]] = None,
        limit: typing.Optional[int] = None,
        sort: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "certificateType",
                    "-certificateType",
                    "displayName",
                    "-displayName",
                    "id",
                    "-id",
                    "serialNumber",
                    "-serialNumber",
                ]
            ]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.CertificatesResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_certificates is not None:
            _query["fields[certificates]"] = encode_param(fields_certificates, False)
        if filter_certificate_type is not None:
            _query["filter[certificateType]"] = encode_param(
                filter_certificate_type, False
            )
        if filter_display_name is not None:
            _query["filter[displayName]"] = encode_param(filter_display_name, False)
        if filter_id is not None:
            _query["filter[id]"] = encode_param(filter_id, False)
        if filter_serial_number is not None:
            _query["filter[serialNumber]"] = encode_param(filter_serial_number, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if sort is not None:
            _query["sort"] = encode_param(sort, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path="/v1/certificates",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.CertificatesResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def delete(
        self, *, id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="DELETE",
            path=f"/v1/certificates/{id}",
            auth_names=["itc-bearer-token"],
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncCertificatesClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def create(
        self,
        *,
        data: params.CertificateCreateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.CertificateResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerCertificateCreateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="POST",
            path="/v1/certificates",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.CertificateResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def get(
        self,
        *,
        id: str,
        fields_certificates: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "certificateContent",
                    "certificateType",
                    "csrContent",
                    "displayName",
                    "expirationDate",
                    "name",
                    "platform",
                    "serialNumber",
                ]
            ]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.CertificateResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_certificates is not None:
            _query["fields[certificates]"] = encode_param(fields_certificates, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v1/certificates/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.CertificateResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def list(
        self,
        *,
        fields_certificates: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "certificateContent",
                    "certificateType",
                    "csrContent",
                    "displayName",
                    "expirationDate",
                    "name",
                    "platform",
                    "serialNumber",
                ]
            ]
        ] = None,
        filter_certificate_type: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "IOS_DEVELOPMENT",
                    "IOS_DISTRIBUTION",
                    "MAC_APP_DISTRIBUTION",
                    "MAC_INSTALLER_DISTRIBUTION",
                    "MAC_APP_DEVELOPMENT",
                    "DEVELOPER_ID_KEXT",
                    "DEVELOPER_ID_APPLICATION",
                    "DEVELOPMENT",
                    "DISTRIBUTION",
                    "PASS_TYPE_ID",
                    "PASS_TYPE_ID_WITH_NFC",
                ]
            ]
        ] = None,
        filter_display_name: typing.Optional[typing.List[str]] = None,
        filter_id: typing.Optional[typing.List[str]] = None,
        filter_serial_number: typing.Optional[typing.List[str]] = None,
        limit: typing.Optional[int] = None,
        sort: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "certificateType",
                    "-certificateType",
                    "displayName",
                    "-displayName",
                    "id",
                    "-id",
                    "serialNumber",
                    "-serialNumber",
                ]
            ]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.CertificatesResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_certificates is not None:
            _query["fields[certificates]"] = encode_param(fields_certificates, False)
        if filter_certificate_type is not None:
            _query["filter[certificateType]"] = encode_param(
                filter_certificate_type, False
            )
        if filter_display_name is not None:
            _query["filter[displayName]"] = encode_param(filter_display_name, False)
        if filter_id is not None:
            _query["filter[id]"] = encode_param(filter_id, False)
        if filter_serial_number is not None:
            _query["filter[serialNumber]"] = encode_param(filter_serial_number, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if sort is not None:
            _query["sort"] = encode_param(sort, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path="/v1/certificates",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.CertificatesResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def delete(
        self, *, id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="DELETE",
            path=f"/v1/certificates/{id}",
            auth_names=["itc-bearer-token"],
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
