"""File Generated by Sideko (sideko.dev)"""

from apple_python.core import (
    QueryParams,
    default_request_options,
    encode_param,
    AsyncBaseClient,
    RequestOptions,
    to_encodable,
    SyncBaseClient,
)
from apple_python.resources.v1.game_center_details.achievement_releases import (
    AsyncAchievementReleasesClient,
    AchievementReleasesClient,
)
from apple_python.resources.v1.game_center_details.game_center_achievements import (
    AsyncGameCenterAchievementsClient,
    GameCenterAchievementsClient,
)
from apple_python.resources.v1.game_center_details.game_center_app_versions import (
    AsyncGameCenterAppVersionsClient,
    GameCenterAppVersionsClient,
)
from apple_python.resources.v1.game_center_details.game_center_group import (
    AsyncGameCenterGroupClient,
    GameCenterGroupClient,
)
from apple_python.resources.v1.game_center_details.game_center_leaderboard_sets import (
    GameCenterLeaderboardSetsClient,
    AsyncGameCenterLeaderboardSetsClient,
)
from apple_python.resources.v1.game_center_details.game_center_leaderboards import (
    GameCenterLeaderboardsClient,
    AsyncGameCenterLeaderboardsClient,
)
from apple_python.resources.v1.game_center_details.leaderboard_releases import (
    LeaderboardReleasesClient,
    AsyncLeaderboardReleasesClient,
)
from apple_python.resources.v1.game_center_details.leaderboard_set_releases import (
    AsyncLeaderboardSetReleasesClient,
    LeaderboardSetReleasesClient,
)
from apple_python.resources.v1.game_center_details.metrics import (
    AsyncMetricsClient,
    MetricsClient,
)
from apple_python.resources.v1.game_center_details.relationships import (
    AsyncRelationshipsClient,
    RelationshipsClient,
)
import typing
import typing_extensions
from apple_python.types.v1.game_center_details import models, params


class GameCenterDetailsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.achievement_releases = AchievementReleasesClient(
            base_client=self._base_client
        )
        self.game_center_achievements = GameCenterAchievementsClient(
            base_client=self._base_client
        )
        self.game_center_app_versions = GameCenterAppVersionsClient(
            base_client=self._base_client
        )
        self.game_center_group = GameCenterGroupClient(base_client=self._base_client)
        self.game_center_leaderboard_sets = GameCenterLeaderboardSetsClient(
            base_client=self._base_client
        )
        self.game_center_leaderboards = GameCenterLeaderboardsClient(
            base_client=self._base_client
        )
        self.leaderboard_releases = LeaderboardReleasesClient(
            base_client=self._base_client
        )
        self.leaderboard_set_releases = LeaderboardSetReleasesClient(
            base_client=self._base_client
        )
        self.metrics = MetricsClient(base_client=self._base_client)
        self.relationships = RelationshipsClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)
    def create(
        self,
        *,
        data: params.GameCenterDetailCreateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GameCenterDetailResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerGameCenterDetailCreateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="POST",
            path="/v1/gameCenterDetails",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.GameCenterDetailResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def patch(
        self,
        *,
        data: params.GameCenterDetailUpdateRequest,
        id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GameCenterDetailResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerGameCenterDetailUpdateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="PATCH",
            path=f"/v1/gameCenterDetails/{id}",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.GameCenterDetailResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def get(
        self,
        *,
        id: str,
        fields_game_center_achievement_releases: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "gameCenterAchievement", "gameCenterDetail", "live"
                ]
            ]
        ] = None,
        fields_game_center_achievements: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "archived",
                    "gameCenterDetail",
                    "gameCenterGroup",
                    "groupAchievement",
                    "localizations",
                    "points",
                    "referenceName",
                    "releases",
                    "repeatable",
                    "showBeforeEarned",
                    "vendorIdentifier",
                ]
            ]
        ] = None,
        fields_game_center_app_versions: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appStoreVersion", "compatibilityVersions", "enabled"
                ]
            ]
        ] = None,
        fields_game_center_details: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "achievementReleases",
                    "app",
                    "arcadeEnabled",
                    "challengeEnabled",
                    "defaultGroupLeaderboard",
                    "defaultLeaderboard",
                    "gameCenterAchievements",
                    "gameCenterAppVersions",
                    "gameCenterGroup",
                    "gameCenterLeaderboardSets",
                    "gameCenterLeaderboards",
                    "leaderboardReleases",
                    "leaderboardSetReleases",
                ]
            ]
        ] = None,
        fields_game_center_groups: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "gameCenterAchievements",
                    "gameCenterDetails",
                    "gameCenterLeaderboardSets",
                    "gameCenterLeaderboards",
                    "referenceName",
                ]
            ]
        ] = None,
        fields_game_center_leaderboard_releases: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "gameCenterDetail", "gameCenterLeaderboard", "live"
                ]
            ]
        ] = None,
        fields_game_center_leaderboard_set_releases: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "gameCenterDetail", "gameCenterLeaderboardSet", "live"
                ]
            ]
        ] = None,
        fields_game_center_leaderboard_sets: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "gameCenterDetail",
                    "gameCenterGroup",
                    "gameCenterLeaderboards",
                    "groupLeaderboardSet",
                    "localizations",
                    "referenceName",
                    "releases",
                    "vendorIdentifier",
                ]
            ]
        ] = None,
        fields_game_center_leaderboards: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "archived",
                    "defaultFormatter",
                    "gameCenterDetail",
                    "gameCenterGroup",
                    "gameCenterLeaderboardSets",
                    "groupLeaderboard",
                    "localizations",
                    "recurrenceDuration",
                    "recurrenceRule",
                    "recurrenceStartDate",
                    "referenceName",
                    "releases",
                    "scoreRangeEnd",
                    "scoreRangeStart",
                    "scoreSortType",
                    "submissionType",
                    "vendorIdentifier",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "achievementReleases",
                    "app",
                    "defaultGroupLeaderboard",
                    "defaultLeaderboard",
                    "gameCenterAchievements",
                    "gameCenterAppVersions",
                    "gameCenterGroup",
                    "gameCenterLeaderboardSets",
                    "gameCenterLeaderboards",
                    "leaderboardReleases",
                    "leaderboardSetReleases",
                ]
            ]
        ] = None,
        limit_achievement_releases: typing.Optional[int] = None,
        limit_game_center_achievements: typing.Optional[int] = None,
        limit_game_center_app_versions: typing.Optional[int] = None,
        limit_game_center_leaderboard_sets: typing.Optional[int] = None,
        limit_game_center_leaderboards: typing.Optional[int] = None,
        limit_leaderboard_releases: typing.Optional[int] = None,
        limit_leaderboard_set_releases: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GameCenterDetailResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_game_center_achievement_releases is not None:
            _query["fields[gameCenterAchievementReleases]"] = encode_param(
                fields_game_center_achievement_releases, False
            )
        if fields_game_center_achievements is not None:
            _query["fields[gameCenterAchievements]"] = encode_param(
                fields_game_center_achievements, False
            )
        if fields_game_center_app_versions is not None:
            _query["fields[gameCenterAppVersions]"] = encode_param(
                fields_game_center_app_versions, False
            )
        if fields_game_center_details is not None:
            _query["fields[gameCenterDetails]"] = encode_param(
                fields_game_center_details, False
            )
        if fields_game_center_groups is not None:
            _query["fields[gameCenterGroups]"] = encode_param(
                fields_game_center_groups, False
            )
        if fields_game_center_leaderboard_releases is not None:
            _query["fields[gameCenterLeaderboardReleases]"] = encode_param(
                fields_game_center_leaderboard_releases, False
            )
        if fields_game_center_leaderboard_set_releases is not None:
            _query["fields[gameCenterLeaderboardSetReleases]"] = encode_param(
                fields_game_center_leaderboard_set_releases, False
            )
        if fields_game_center_leaderboard_sets is not None:
            _query["fields[gameCenterLeaderboardSets]"] = encode_param(
                fields_game_center_leaderboard_sets, False
            )
        if fields_game_center_leaderboards is not None:
            _query["fields[gameCenterLeaderboards]"] = encode_param(
                fields_game_center_leaderboards, False
            )
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit_achievement_releases is not None:
            _query["limit[achievementReleases]"] = encode_param(
                limit_achievement_releases, False
            )
        if limit_game_center_achievements is not None:
            _query["limit[gameCenterAchievements]"] = encode_param(
                limit_game_center_achievements, False
            )
        if limit_game_center_app_versions is not None:
            _query["limit[gameCenterAppVersions]"] = encode_param(
                limit_game_center_app_versions, False
            )
        if limit_game_center_leaderboard_sets is not None:
            _query["limit[gameCenterLeaderboardSets]"] = encode_param(
                limit_game_center_leaderboard_sets, False
            )
        if limit_game_center_leaderboards is not None:
            _query["limit[gameCenterLeaderboards]"] = encode_param(
                limit_game_center_leaderboards, False
            )
        if limit_leaderboard_releases is not None:
            _query["limit[leaderboardReleases]"] = encode_param(
                limit_leaderboard_releases, False
            )
        if limit_leaderboard_set_releases is not None:
            _query["limit[leaderboardSetReleases]"] = encode_param(
                limit_leaderboard_set_releases, False
            )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v1/gameCenterDetails/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.GameCenterDetailResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncGameCenterDetailsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.achievement_releases = AsyncAchievementReleasesClient(
            base_client=self._base_client
        )
        self.game_center_achievements = AsyncGameCenterAchievementsClient(
            base_client=self._base_client
        )
        self.game_center_app_versions = AsyncGameCenterAppVersionsClient(
            base_client=self._base_client
        )
        self.game_center_group = AsyncGameCenterGroupClient(
            base_client=self._base_client
        )
        self.game_center_leaderboard_sets = AsyncGameCenterLeaderboardSetsClient(
            base_client=self._base_client
        )
        self.game_center_leaderboards = AsyncGameCenterLeaderboardsClient(
            base_client=self._base_client
        )
        self.leaderboard_releases = AsyncLeaderboardReleasesClient(
            base_client=self._base_client
        )
        self.leaderboard_set_releases = AsyncLeaderboardSetReleasesClient(
            base_client=self._base_client
        )
        self.metrics = AsyncMetricsClient(base_client=self._base_client)
        self.relationships = AsyncRelationshipsClient(base_client=self._base_client)

    # register async api methods (keep comment for code generation)
    async def create(
        self,
        *,
        data: params.GameCenterDetailCreateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GameCenterDetailResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerGameCenterDetailCreateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="POST",
            path="/v1/gameCenterDetails",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.GameCenterDetailResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def patch(
        self,
        *,
        data: params.GameCenterDetailUpdateRequest,
        id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GameCenterDetailResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerGameCenterDetailUpdateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="PATCH",
            path=f"/v1/gameCenterDetails/{id}",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.GameCenterDetailResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def get(
        self,
        *,
        id: str,
        fields_game_center_achievement_releases: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "gameCenterAchievement", "gameCenterDetail", "live"
                ]
            ]
        ] = None,
        fields_game_center_achievements: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "archived",
                    "gameCenterDetail",
                    "gameCenterGroup",
                    "groupAchievement",
                    "localizations",
                    "points",
                    "referenceName",
                    "releases",
                    "repeatable",
                    "showBeforeEarned",
                    "vendorIdentifier",
                ]
            ]
        ] = None,
        fields_game_center_app_versions: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appStoreVersion", "compatibilityVersions", "enabled"
                ]
            ]
        ] = None,
        fields_game_center_details: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "achievementReleases",
                    "app",
                    "arcadeEnabled",
                    "challengeEnabled",
                    "defaultGroupLeaderboard",
                    "defaultLeaderboard",
                    "gameCenterAchievements",
                    "gameCenterAppVersions",
                    "gameCenterGroup",
                    "gameCenterLeaderboardSets",
                    "gameCenterLeaderboards",
                    "leaderboardReleases",
                    "leaderboardSetReleases",
                ]
            ]
        ] = None,
        fields_game_center_groups: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "gameCenterAchievements",
                    "gameCenterDetails",
                    "gameCenterLeaderboardSets",
                    "gameCenterLeaderboards",
                    "referenceName",
                ]
            ]
        ] = None,
        fields_game_center_leaderboard_releases: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "gameCenterDetail", "gameCenterLeaderboard", "live"
                ]
            ]
        ] = None,
        fields_game_center_leaderboard_set_releases: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "gameCenterDetail", "gameCenterLeaderboardSet", "live"
                ]
            ]
        ] = None,
        fields_game_center_leaderboard_sets: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "gameCenterDetail",
                    "gameCenterGroup",
                    "gameCenterLeaderboards",
                    "groupLeaderboardSet",
                    "localizations",
                    "referenceName",
                    "releases",
                    "vendorIdentifier",
                ]
            ]
        ] = None,
        fields_game_center_leaderboards: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "archived",
                    "defaultFormatter",
                    "gameCenterDetail",
                    "gameCenterGroup",
                    "gameCenterLeaderboardSets",
                    "groupLeaderboard",
                    "localizations",
                    "recurrenceDuration",
                    "recurrenceRule",
                    "recurrenceStartDate",
                    "referenceName",
                    "releases",
                    "scoreRangeEnd",
                    "scoreRangeStart",
                    "scoreSortType",
                    "submissionType",
                    "vendorIdentifier",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "achievementReleases",
                    "app",
                    "defaultGroupLeaderboard",
                    "defaultLeaderboard",
                    "gameCenterAchievements",
                    "gameCenterAppVersions",
                    "gameCenterGroup",
                    "gameCenterLeaderboardSets",
                    "gameCenterLeaderboards",
                    "leaderboardReleases",
                    "leaderboardSetReleases",
                ]
            ]
        ] = None,
        limit_achievement_releases: typing.Optional[int] = None,
        limit_game_center_achievements: typing.Optional[int] = None,
        limit_game_center_app_versions: typing.Optional[int] = None,
        limit_game_center_leaderboard_sets: typing.Optional[int] = None,
        limit_game_center_leaderboards: typing.Optional[int] = None,
        limit_leaderboard_releases: typing.Optional[int] = None,
        limit_leaderboard_set_releases: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GameCenterDetailResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_game_center_achievement_releases is not None:
            _query["fields[gameCenterAchievementReleases]"] = encode_param(
                fields_game_center_achievement_releases, False
            )
        if fields_game_center_achievements is not None:
            _query["fields[gameCenterAchievements]"] = encode_param(
                fields_game_center_achievements, False
            )
        if fields_game_center_app_versions is not None:
            _query["fields[gameCenterAppVersions]"] = encode_param(
                fields_game_center_app_versions, False
            )
        if fields_game_center_details is not None:
            _query["fields[gameCenterDetails]"] = encode_param(
                fields_game_center_details, False
            )
        if fields_game_center_groups is not None:
            _query["fields[gameCenterGroups]"] = encode_param(
                fields_game_center_groups, False
            )
        if fields_game_center_leaderboard_releases is not None:
            _query["fields[gameCenterLeaderboardReleases]"] = encode_param(
                fields_game_center_leaderboard_releases, False
            )
        if fields_game_center_leaderboard_set_releases is not None:
            _query["fields[gameCenterLeaderboardSetReleases]"] = encode_param(
                fields_game_center_leaderboard_set_releases, False
            )
        if fields_game_center_leaderboard_sets is not None:
            _query["fields[gameCenterLeaderboardSets]"] = encode_param(
                fields_game_center_leaderboard_sets, False
            )
        if fields_game_center_leaderboards is not None:
            _query["fields[gameCenterLeaderboards]"] = encode_param(
                fields_game_center_leaderboards, False
            )
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit_achievement_releases is not None:
            _query["limit[achievementReleases]"] = encode_param(
                limit_achievement_releases, False
            )
        if limit_game_center_achievements is not None:
            _query["limit[gameCenterAchievements]"] = encode_param(
                limit_game_center_achievements, False
            )
        if limit_game_center_app_versions is not None:
            _query["limit[gameCenterAppVersions]"] = encode_param(
                limit_game_center_app_versions, False
            )
        if limit_game_center_leaderboard_sets is not None:
            _query["limit[gameCenterLeaderboardSets]"] = encode_param(
                limit_game_center_leaderboard_sets, False
            )
        if limit_game_center_leaderboards is not None:
            _query["limit[gameCenterLeaderboards]"] = encode_param(
                limit_game_center_leaderboards, False
            )
        if limit_leaderboard_releases is not None:
            _query["limit[leaderboardReleases]"] = encode_param(
                limit_leaderboard_releases, False
            )
        if limit_leaderboard_set_releases is not None:
            _query["limit[leaderboardSetReleases]"] = encode_param(
                limit_leaderboard_set_releases, False
            )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v1/gameCenterDetails/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.GameCenterDetailResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
