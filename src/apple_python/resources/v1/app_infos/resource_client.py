"""File Generated by Sideko (sideko.dev)"""

from apple_python.core import (
    AsyncBaseClient,
    QueryParams,
    RequestOptions,
    default_request_options,
    SyncBaseClient,
    to_encodable,
    encode_param,
)
from apple_python.resources.v1.app_infos.age_rating_declaration import (
    AsyncAgeRatingDeclarationClient,
    AgeRatingDeclarationClient,
)
from apple_python.resources.v1.app_infos.app_info_localizations import (
    AppInfoLocalizationsClient,
    AsyncAppInfoLocalizationsClient,
)
from apple_python.resources.v1.app_infos.primary_category import (
    AsyncPrimaryCategoryClient,
    PrimaryCategoryClient,
)
from apple_python.resources.v1.app_infos.primary_subcategory_one import (
    AsyncPrimarySubcategoryOneClient,
    PrimarySubcategoryOneClient,
)
from apple_python.resources.v1.app_infos.primary_subcategory_two import (
    AsyncPrimarySubcategoryTwoClient,
    PrimarySubcategoryTwoClient,
)
from apple_python.resources.v1.app_infos.secondary_category import (
    AsyncSecondaryCategoryClient,
    SecondaryCategoryClient,
)
from apple_python.resources.v1.app_infos.secondary_subcategory_one import (
    AsyncSecondarySubcategoryOneClient,
    SecondarySubcategoryOneClient,
)
from apple_python.resources.v1.app_infos.secondary_subcategory_two import (
    SecondarySubcategoryTwoClient,
    AsyncSecondarySubcategoryTwoClient,
)
import typing
import typing_extensions
from apple_python.types.v1.app_infos import params, models


class AppInfosClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.age_rating_declaration = AgeRatingDeclarationClient(
            base_client=self._base_client
        )
        self.app_info_localizations = AppInfoLocalizationsClient(
            base_client=self._base_client
        )
        self.primary_category = PrimaryCategoryClient(base_client=self._base_client)
        self.primary_subcategory_one = PrimarySubcategoryOneClient(
            base_client=self._base_client
        )
        self.primary_subcategory_two = PrimarySubcategoryTwoClient(
            base_client=self._base_client
        )
        self.secondary_category = SecondaryCategoryClient(base_client=self._base_client)
        self.secondary_subcategory_one = SecondarySubcategoryOneClient(
            base_client=self._base_client
        )
        self.secondary_subcategory_two = SecondarySubcategoryTwoClient(
            base_client=self._base_client
        )

    # register sync api methods (keep comment for code generation)
    def patch(
        self,
        *,
        data: params.AppInfoUpdateRequest,
        id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AppInfoResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerAppInfoUpdateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="PATCH",
            path=f"/v1/appInfos/{id}",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.AppInfoResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def get(
        self,
        *,
        id: str,
        fields_age_rating_declarations: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "ageRatingOverride",
                    "alcoholTobaccoOrDrugUseOrReferences",
                    "contests",
                    "gambling",
                    "gamblingAndContests",
                    "gamblingSimulated",
                    "horrorOrFearThemes",
                    "kidsAgeBand",
                    "matureOrSuggestiveThemes",
                    "medicalOrTreatmentInformation",
                    "profanityOrCrudeHumor",
                    "seventeenPlus",
                    "sexualContentGraphicAndNudity",
                    "sexualContentOrNudity",
                    "unrestrictedWebAccess",
                    "violenceCartoonOrFantasy",
                    "violenceRealistic",
                    "violenceRealisticProlongedGraphicOrSadistic",
                ]
            ]
        ] = None,
        fields_app_categories: typing.Optional[
            typing.List[
                typing_extensions.Literal["parent", "platforms", "subcategories"]
            ]
        ] = None,
        fields_app_info_localizations: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appInfo",
                    "locale",
                    "name",
                    "privacyChoicesUrl",
                    "privacyPolicyText",
                    "privacyPolicyUrl",
                    "subtitle",
                ]
            ]
        ] = None,
        fields_app_infos: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "ageRatingDeclaration",
                    "app",
                    "appInfoLocalizations",
                    "appStoreAgeRating",
                    "appStoreState",
                    "brazilAgeRating",
                    "brazilAgeRatingV2",
                    "kidsAgeBand",
                    "primaryCategory",
                    "primarySubcategoryOne",
                    "primarySubcategoryTwo",
                    "secondaryCategory",
                    "secondarySubcategoryOne",
                    "secondarySubcategoryTwo",
                    "state",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "ageRatingDeclaration",
                    "app",
                    "appInfoLocalizations",
                    "primaryCategory",
                    "primarySubcategoryOne",
                    "primarySubcategoryTwo",
                    "secondaryCategory",
                    "secondarySubcategoryOne",
                    "secondarySubcategoryTwo",
                ]
            ]
        ] = None,
        limit_app_info_localizations: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AppInfoResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_age_rating_declarations is not None:
            _query["fields[ageRatingDeclarations]"] = encode_param(
                fields_age_rating_declarations, False
            )
        if fields_app_categories is not None:
            _query["fields[appCategories]"] = encode_param(fields_app_categories, False)
        if fields_app_info_localizations is not None:
            _query["fields[appInfoLocalizations]"] = encode_param(
                fields_app_info_localizations, False
            )
        if fields_app_infos is not None:
            _query["fields[appInfos]"] = encode_param(fields_app_infos, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit_app_info_localizations is not None:
            _query["limit[appInfoLocalizations]"] = encode_param(
                limit_app_info_localizations, False
            )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v1/appInfos/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.AppInfoResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncAppInfosClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.age_rating_declaration = AsyncAgeRatingDeclarationClient(
            base_client=self._base_client
        )
        self.app_info_localizations = AsyncAppInfoLocalizationsClient(
            base_client=self._base_client
        )
        self.primary_category = AsyncPrimaryCategoryClient(
            base_client=self._base_client
        )
        self.primary_subcategory_one = AsyncPrimarySubcategoryOneClient(
            base_client=self._base_client
        )
        self.primary_subcategory_two = AsyncPrimarySubcategoryTwoClient(
            base_client=self._base_client
        )
        self.secondary_category = AsyncSecondaryCategoryClient(
            base_client=self._base_client
        )
        self.secondary_subcategory_one = AsyncSecondarySubcategoryOneClient(
            base_client=self._base_client
        )
        self.secondary_subcategory_two = AsyncSecondarySubcategoryTwoClient(
            base_client=self._base_client
        )

    # register async api methods (keep comment for code generation)
    async def patch(
        self,
        *,
        data: params.AppInfoUpdateRequest,
        id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AppInfoResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerAppInfoUpdateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="PATCH",
            path=f"/v1/appInfos/{id}",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.AppInfoResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def get(
        self,
        *,
        id: str,
        fields_age_rating_declarations: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "ageRatingOverride",
                    "alcoholTobaccoOrDrugUseOrReferences",
                    "contests",
                    "gambling",
                    "gamblingAndContests",
                    "gamblingSimulated",
                    "horrorOrFearThemes",
                    "kidsAgeBand",
                    "matureOrSuggestiveThemes",
                    "medicalOrTreatmentInformation",
                    "profanityOrCrudeHumor",
                    "seventeenPlus",
                    "sexualContentGraphicAndNudity",
                    "sexualContentOrNudity",
                    "unrestrictedWebAccess",
                    "violenceCartoonOrFantasy",
                    "violenceRealistic",
                    "violenceRealisticProlongedGraphicOrSadistic",
                ]
            ]
        ] = None,
        fields_app_categories: typing.Optional[
            typing.List[
                typing_extensions.Literal["parent", "platforms", "subcategories"]
            ]
        ] = None,
        fields_app_info_localizations: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appInfo",
                    "locale",
                    "name",
                    "privacyChoicesUrl",
                    "privacyPolicyText",
                    "privacyPolicyUrl",
                    "subtitle",
                ]
            ]
        ] = None,
        fields_app_infos: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "ageRatingDeclaration",
                    "app",
                    "appInfoLocalizations",
                    "appStoreAgeRating",
                    "appStoreState",
                    "brazilAgeRating",
                    "brazilAgeRatingV2",
                    "kidsAgeBand",
                    "primaryCategory",
                    "primarySubcategoryOne",
                    "primarySubcategoryTwo",
                    "secondaryCategory",
                    "secondarySubcategoryOne",
                    "secondarySubcategoryTwo",
                    "state",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "ageRatingDeclaration",
                    "app",
                    "appInfoLocalizations",
                    "primaryCategory",
                    "primarySubcategoryOne",
                    "primarySubcategoryTwo",
                    "secondaryCategory",
                    "secondarySubcategoryOne",
                    "secondarySubcategoryTwo",
                ]
            ]
        ] = None,
        limit_app_info_localizations: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AppInfoResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_age_rating_declarations is not None:
            _query["fields[ageRatingDeclarations]"] = encode_param(
                fields_age_rating_declarations, False
            )
        if fields_app_categories is not None:
            _query["fields[appCategories]"] = encode_param(fields_app_categories, False)
        if fields_app_info_localizations is not None:
            _query["fields[appInfoLocalizations]"] = encode_param(
                fields_app_info_localizations, False
            )
        if fields_app_infos is not None:
            _query["fields[appInfos]"] = encode_param(fields_app_infos, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit_app_info_localizations is not None:
            _query["limit[appInfoLocalizations]"] = encode_param(
                limit_app_info_localizations, False
            )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v1/appInfos/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.AppInfoResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
