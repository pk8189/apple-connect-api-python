"""File Generated by Sideko (sideko.dev)"""

from apple_python.core import (
    SyncBaseClient,
    AsyncBaseClient,
    encode_param,
    to_encodable,
    default_request_options,
    QueryParams,
    RequestOptions,
)
from apple_python.resources.v1.profiles.bundle_id import (
    AsyncBundleIdClient,
    BundleIdClient,
)
from apple_python.resources.v1.profiles.certificates import (
    CertificatesClient,
    AsyncCertificatesClient,
)
from apple_python.resources.v1.profiles.devices import AsyncDevicesClient, DevicesClient
import typing
import typing_extensions
from apple_python.types.v1.profiles import params, models


class ProfilesClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.bundle_id = BundleIdClient(base_client=self._base_client)
        self.certificates = CertificatesClient(base_client=self._base_client)
        self.devices = DevicesClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)
    def create(
        self,
        *,
        data: params.ProfileCreateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.ProfileResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerProfileCreateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="POST",
            path="/v1/profiles",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.ProfileResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def get(
        self,
        *,
        id: str,
        fields_bundle_ids: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "bundleIdCapabilities",
                    "identifier",
                    "name",
                    "platform",
                    "profiles",
                    "seedId",
                ]
            ]
        ] = None,
        fields_certificates: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "certificateContent",
                    "certificateType",
                    "csrContent",
                    "displayName",
                    "expirationDate",
                    "name",
                    "platform",
                    "serialNumber",
                ]
            ]
        ] = None,
        fields_devices: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "addedDate",
                    "deviceClass",
                    "model",
                    "name",
                    "platform",
                    "status",
                    "udid",
                ]
            ]
        ] = None,
        fields_profiles: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "bundleId",
                    "certificates",
                    "createdDate",
                    "devices",
                    "expirationDate",
                    "name",
                    "platform",
                    "profileContent",
                    "profileState",
                    "profileType",
                    "uuid",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal["bundleId", "certificates", "devices"]
            ]
        ] = None,
        limit_certificates: typing.Optional[int] = None,
        limit_devices: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.ProfileResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_bundle_ids is not None:
            _query["fields[bundleIds]"] = encode_param(fields_bundle_ids, False)
        if fields_certificates is not None:
            _query["fields[certificates]"] = encode_param(fields_certificates, False)
        if fields_devices is not None:
            _query["fields[devices]"] = encode_param(fields_devices, False)
        if fields_profiles is not None:
            _query["fields[profiles]"] = encode_param(fields_profiles, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit_certificates is not None:
            _query["limit[certificates]"] = encode_param(limit_certificates, False)
        if limit_devices is not None:
            _query["limit[devices]"] = encode_param(limit_devices, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v1/profiles/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.ProfileResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def list(
        self,
        *,
        fields_bundle_ids: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "bundleIdCapabilities",
                    "identifier",
                    "name",
                    "platform",
                    "profiles",
                    "seedId",
                ]
            ]
        ] = None,
        fields_certificates: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "certificateContent",
                    "certificateType",
                    "csrContent",
                    "displayName",
                    "expirationDate",
                    "name",
                    "platform",
                    "serialNumber",
                ]
            ]
        ] = None,
        fields_devices: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "addedDate",
                    "deviceClass",
                    "model",
                    "name",
                    "platform",
                    "status",
                    "udid",
                ]
            ]
        ] = None,
        fields_profiles: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "bundleId",
                    "certificates",
                    "createdDate",
                    "devices",
                    "expirationDate",
                    "name",
                    "platform",
                    "profileContent",
                    "profileState",
                    "profileType",
                    "uuid",
                ]
            ]
        ] = None,
        filter_id: typing.Optional[typing.List[str]] = None,
        filter_name: typing.Optional[typing.List[str]] = None,
        filter_profile_state: typing.Optional[
            typing.List[typing_extensions.Literal["ACTIVE", "INVALID"]]
        ] = None,
        filter_profile_type: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "IOS_APP_DEVELOPMENT",
                    "IOS_APP_STORE",
                    "IOS_APP_ADHOC",
                    "IOS_APP_INHOUSE",
                    "MAC_APP_DEVELOPMENT",
                    "MAC_APP_STORE",
                    "MAC_APP_DIRECT",
                    "TVOS_APP_DEVELOPMENT",
                    "TVOS_APP_STORE",
                    "TVOS_APP_ADHOC",
                    "TVOS_APP_INHOUSE",
                    "MAC_CATALYST_APP_DEVELOPMENT",
                    "MAC_CATALYST_APP_STORE",
                    "MAC_CATALYST_APP_DIRECT",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal["bundleId", "certificates", "devices"]
            ]
        ] = None,
        limit: typing.Optional[int] = None,
        limit_certificates: typing.Optional[int] = None,
        limit_devices: typing.Optional[int] = None,
        sort: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "id",
                    "-id",
                    "name",
                    "-name",
                    "profileState",
                    "-profileState",
                    "profileType",
                    "-profileType",
                ]
            ]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.ProfilesResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_bundle_ids is not None:
            _query["fields[bundleIds]"] = encode_param(fields_bundle_ids, False)
        if fields_certificates is not None:
            _query["fields[certificates]"] = encode_param(fields_certificates, False)
        if fields_devices is not None:
            _query["fields[devices]"] = encode_param(fields_devices, False)
        if fields_profiles is not None:
            _query["fields[profiles]"] = encode_param(fields_profiles, False)
        if filter_id is not None:
            _query["filter[id]"] = encode_param(filter_id, False)
        if filter_name is not None:
            _query["filter[name]"] = encode_param(filter_name, False)
        if filter_profile_state is not None:
            _query["filter[profileState]"] = encode_param(filter_profile_state, False)
        if filter_profile_type is not None:
            _query["filter[profileType]"] = encode_param(filter_profile_type, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if limit_certificates is not None:
            _query["limit[certificates]"] = encode_param(limit_certificates, False)
        if limit_devices is not None:
            _query["limit[devices]"] = encode_param(limit_devices, False)
        if sort is not None:
            _query["sort"] = encode_param(sort, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path="/v1/profiles",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.ProfilesResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def delete(
        self, *, id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="DELETE",
            path=f"/v1/profiles/{id}",
            auth_names=["itc-bearer-token"],
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncProfilesClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.bundle_id = AsyncBundleIdClient(base_client=self._base_client)
        self.certificates = AsyncCertificatesClient(base_client=self._base_client)
        self.devices = AsyncDevicesClient(base_client=self._base_client)

    # register async api methods (keep comment for code generation)
    async def create(
        self,
        *,
        data: params.ProfileCreateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.ProfileResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerProfileCreateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="POST",
            path="/v1/profiles",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.ProfileResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def get(
        self,
        *,
        id: str,
        fields_bundle_ids: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "bundleIdCapabilities",
                    "identifier",
                    "name",
                    "platform",
                    "profiles",
                    "seedId",
                ]
            ]
        ] = None,
        fields_certificates: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "certificateContent",
                    "certificateType",
                    "csrContent",
                    "displayName",
                    "expirationDate",
                    "name",
                    "platform",
                    "serialNumber",
                ]
            ]
        ] = None,
        fields_devices: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "addedDate",
                    "deviceClass",
                    "model",
                    "name",
                    "platform",
                    "status",
                    "udid",
                ]
            ]
        ] = None,
        fields_profiles: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "bundleId",
                    "certificates",
                    "createdDate",
                    "devices",
                    "expirationDate",
                    "name",
                    "platform",
                    "profileContent",
                    "profileState",
                    "profileType",
                    "uuid",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal["bundleId", "certificates", "devices"]
            ]
        ] = None,
        limit_certificates: typing.Optional[int] = None,
        limit_devices: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.ProfileResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_bundle_ids is not None:
            _query["fields[bundleIds]"] = encode_param(fields_bundle_ids, False)
        if fields_certificates is not None:
            _query["fields[certificates]"] = encode_param(fields_certificates, False)
        if fields_devices is not None:
            _query["fields[devices]"] = encode_param(fields_devices, False)
        if fields_profiles is not None:
            _query["fields[profiles]"] = encode_param(fields_profiles, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit_certificates is not None:
            _query["limit[certificates]"] = encode_param(limit_certificates, False)
        if limit_devices is not None:
            _query["limit[devices]"] = encode_param(limit_devices, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v1/profiles/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.ProfileResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def list(
        self,
        *,
        fields_bundle_ids: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "bundleIdCapabilities",
                    "identifier",
                    "name",
                    "platform",
                    "profiles",
                    "seedId",
                ]
            ]
        ] = None,
        fields_certificates: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "certificateContent",
                    "certificateType",
                    "csrContent",
                    "displayName",
                    "expirationDate",
                    "name",
                    "platform",
                    "serialNumber",
                ]
            ]
        ] = None,
        fields_devices: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "addedDate",
                    "deviceClass",
                    "model",
                    "name",
                    "platform",
                    "status",
                    "udid",
                ]
            ]
        ] = None,
        fields_profiles: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "bundleId",
                    "certificates",
                    "createdDate",
                    "devices",
                    "expirationDate",
                    "name",
                    "platform",
                    "profileContent",
                    "profileState",
                    "profileType",
                    "uuid",
                ]
            ]
        ] = None,
        filter_id: typing.Optional[typing.List[str]] = None,
        filter_name: typing.Optional[typing.List[str]] = None,
        filter_profile_state: typing.Optional[
            typing.List[typing_extensions.Literal["ACTIVE", "INVALID"]]
        ] = None,
        filter_profile_type: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "IOS_APP_DEVELOPMENT",
                    "IOS_APP_STORE",
                    "IOS_APP_ADHOC",
                    "IOS_APP_INHOUSE",
                    "MAC_APP_DEVELOPMENT",
                    "MAC_APP_STORE",
                    "MAC_APP_DIRECT",
                    "TVOS_APP_DEVELOPMENT",
                    "TVOS_APP_STORE",
                    "TVOS_APP_ADHOC",
                    "TVOS_APP_INHOUSE",
                    "MAC_CATALYST_APP_DEVELOPMENT",
                    "MAC_CATALYST_APP_STORE",
                    "MAC_CATALYST_APP_DIRECT",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal["bundleId", "certificates", "devices"]
            ]
        ] = None,
        limit: typing.Optional[int] = None,
        limit_certificates: typing.Optional[int] = None,
        limit_devices: typing.Optional[int] = None,
        sort: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "id",
                    "-id",
                    "name",
                    "-name",
                    "profileState",
                    "-profileState",
                    "profileType",
                    "-profileType",
                ]
            ]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.ProfilesResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_bundle_ids is not None:
            _query["fields[bundleIds]"] = encode_param(fields_bundle_ids, False)
        if fields_certificates is not None:
            _query["fields[certificates]"] = encode_param(fields_certificates, False)
        if fields_devices is not None:
            _query["fields[devices]"] = encode_param(fields_devices, False)
        if fields_profiles is not None:
            _query["fields[profiles]"] = encode_param(fields_profiles, False)
        if filter_id is not None:
            _query["filter[id]"] = encode_param(filter_id, False)
        if filter_name is not None:
            _query["filter[name]"] = encode_param(filter_name, False)
        if filter_profile_state is not None:
            _query["filter[profileState]"] = encode_param(filter_profile_state, False)
        if filter_profile_type is not None:
            _query["filter[profileType]"] = encode_param(filter_profile_type, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if limit_certificates is not None:
            _query["limit[certificates]"] = encode_param(limit_certificates, False)
        if limit_devices is not None:
            _query["limit[devices]"] = encode_param(limit_devices, False)
        if sort is not None:
            _query["sort"] = encode_param(sort, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path="/v1/profiles",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.ProfilesResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def delete(
        self, *, id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="DELETE",
            path=f"/v1/profiles/{id}",
            auth_names=["itc-bearer-token"],
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
