"""File Generated by Sideko (sideko.dev)"""

from apple_python.core import (
    RequestOptions,
    default_request_options,
    to_encodable,
    AsyncBaseClient,
    QueryParams,
    SyncBaseClient,
    encode_param,
)
from apple_python.resources.v1.user_invitations.visible_apps import (
    AsyncVisibleAppsClient,
    VisibleAppsClient,
)
import typing
import typing_extensions
from apple_python.types.v1.user_invitations import params, models


class UserInvitationsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.visible_apps = VisibleAppsClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)
    def create(
        self,
        *,
        data: params.UserInvitationCreateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.UserInvitationResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerUserInvitationCreateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="POST",
            path="/v1/userInvitations",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.UserInvitationResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def get(
        self,
        *,
        id: str,
        fields_apps: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "alternativeDistributionKey",
                    "analyticsReportRequests",
                    "appAvailability",
                    "appClips",
                    "appCustomProductPages",
                    "appEncryptionDeclarations",
                    "appEvents",
                    "appInfos",
                    "appPricePoints",
                    "appPriceSchedule",
                    "appStoreVersionExperimentsV2",
                    "appStoreVersions",
                    "betaAppLocalizations",
                    "betaAppReviewDetail",
                    "betaGroups",
                    "betaLicenseAgreement",
                    "betaTesters",
                    "builds",
                    "bundleId",
                    "ciProduct",
                    "contentRightsDeclaration",
                    "customerReviews",
                    "endUserLicenseAgreement",
                    "gameCenterDetail",
                    "gameCenterEnabledVersions",
                    "inAppPurchases",
                    "inAppPurchasesV2",
                    "isOrEverWasMadeForKids",
                    "marketplaceSearchDetail",
                    "name",
                    "perfPowerMetrics",
                    "preOrder",
                    "preReleaseVersions",
                    "primaryLocale",
                    "promotedPurchases",
                    "reviewSubmissions",
                    "sku",
                    "subscriptionGracePeriod",
                    "subscriptionGroups",
                    "subscriptionStatusUrl",
                    "subscriptionStatusUrlForSandbox",
                    "subscriptionStatusUrlVersion",
                    "subscriptionStatusUrlVersionForSandbox",
                ]
            ]
        ] = None,
        fields_user_invitations: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "allAppsVisible",
                    "email",
                    "expirationDate",
                    "firstName",
                    "lastName",
                    "provisioningAllowed",
                    "roles",
                    "visibleApps",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[typing_extensions.Literal["visibleApps"]]
        ] = None,
        limit_visible_apps: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.UserInvitationResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_apps is not None:
            _query["fields[apps]"] = encode_param(fields_apps, False)
        if fields_user_invitations is not None:
            _query["fields[userInvitations]"] = encode_param(
                fields_user_invitations, False
            )
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit_visible_apps is not None:
            _query["limit[visibleApps]"] = encode_param(limit_visible_apps, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v1/userInvitations/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.UserInvitationResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def list(
        self,
        *,
        fields_apps: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "alternativeDistributionKey",
                    "analyticsReportRequests",
                    "appAvailability",
                    "appClips",
                    "appCustomProductPages",
                    "appEncryptionDeclarations",
                    "appEvents",
                    "appInfos",
                    "appPricePoints",
                    "appPriceSchedule",
                    "appStoreVersionExperimentsV2",
                    "appStoreVersions",
                    "betaAppLocalizations",
                    "betaAppReviewDetail",
                    "betaGroups",
                    "betaLicenseAgreement",
                    "betaTesters",
                    "builds",
                    "bundleId",
                    "ciProduct",
                    "contentRightsDeclaration",
                    "customerReviews",
                    "endUserLicenseAgreement",
                    "gameCenterDetail",
                    "gameCenterEnabledVersions",
                    "inAppPurchases",
                    "inAppPurchasesV2",
                    "isOrEverWasMadeForKids",
                    "marketplaceSearchDetail",
                    "name",
                    "perfPowerMetrics",
                    "preOrder",
                    "preReleaseVersions",
                    "primaryLocale",
                    "promotedPurchases",
                    "reviewSubmissions",
                    "sku",
                    "subscriptionGracePeriod",
                    "subscriptionGroups",
                    "subscriptionStatusUrl",
                    "subscriptionStatusUrlForSandbox",
                    "subscriptionStatusUrlVersion",
                    "subscriptionStatusUrlVersionForSandbox",
                ]
            ]
        ] = None,
        fields_user_invitations: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "allAppsVisible",
                    "email",
                    "expirationDate",
                    "firstName",
                    "lastName",
                    "provisioningAllowed",
                    "roles",
                    "visibleApps",
                ]
            ]
        ] = None,
        filter_email: typing.Optional[typing.List[str]] = None,
        filter_roles: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "ADMIN",
                    "FINANCE",
                    "ACCOUNT_HOLDER",
                    "SALES",
                    "MARKETING",
                    "APP_MANAGER",
                    "DEVELOPER",
                    "ACCESS_TO_REPORTS",
                    "CUSTOMER_SUPPORT",
                    "CREATE_APPS",
                    "CLOUD_MANAGED_DEVELOPER_ID",
                    "CLOUD_MANAGED_APP_DISTRIBUTION",
                    "GENERATE_INDIVIDUAL_KEYS",
                ]
            ]
        ] = None,
        filter_visible_apps: typing.Optional[typing.List[str]] = None,
        include: typing.Optional[
            typing.List[typing_extensions.Literal["visibleApps"]]
        ] = None,
        limit: typing.Optional[int] = None,
        limit_visible_apps: typing.Optional[int] = None,
        sort: typing.Optional[
            typing.List[
                typing_extensions.Literal["email", "-email", "lastName", "-lastName"]
            ]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.UserInvitationsResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_apps is not None:
            _query["fields[apps]"] = encode_param(fields_apps, False)
        if fields_user_invitations is not None:
            _query["fields[userInvitations]"] = encode_param(
                fields_user_invitations, False
            )
        if filter_email is not None:
            _query["filter[email]"] = encode_param(filter_email, False)
        if filter_roles is not None:
            _query["filter[roles]"] = encode_param(filter_roles, False)
        if filter_visible_apps is not None:
            _query["filter[visibleApps]"] = encode_param(filter_visible_apps, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if limit_visible_apps is not None:
            _query["limit[visibleApps]"] = encode_param(limit_visible_apps, False)
        if sort is not None:
            _query["sort"] = encode_param(sort, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path="/v1/userInvitations",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.UserInvitationsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def delete(
        self, *, id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="DELETE",
            path=f"/v1/userInvitations/{id}",
            auth_names=["itc-bearer-token"],
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncUserInvitationsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.visible_apps = AsyncVisibleAppsClient(base_client=self._base_client)

    # register async api methods (keep comment for code generation)
    async def create(
        self,
        *,
        data: params.UserInvitationCreateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.UserInvitationResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerUserInvitationCreateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="POST",
            path="/v1/userInvitations",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.UserInvitationResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def get(
        self,
        *,
        id: str,
        fields_apps: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "alternativeDistributionKey",
                    "analyticsReportRequests",
                    "appAvailability",
                    "appClips",
                    "appCustomProductPages",
                    "appEncryptionDeclarations",
                    "appEvents",
                    "appInfos",
                    "appPricePoints",
                    "appPriceSchedule",
                    "appStoreVersionExperimentsV2",
                    "appStoreVersions",
                    "betaAppLocalizations",
                    "betaAppReviewDetail",
                    "betaGroups",
                    "betaLicenseAgreement",
                    "betaTesters",
                    "builds",
                    "bundleId",
                    "ciProduct",
                    "contentRightsDeclaration",
                    "customerReviews",
                    "endUserLicenseAgreement",
                    "gameCenterDetail",
                    "gameCenterEnabledVersions",
                    "inAppPurchases",
                    "inAppPurchasesV2",
                    "isOrEverWasMadeForKids",
                    "marketplaceSearchDetail",
                    "name",
                    "perfPowerMetrics",
                    "preOrder",
                    "preReleaseVersions",
                    "primaryLocale",
                    "promotedPurchases",
                    "reviewSubmissions",
                    "sku",
                    "subscriptionGracePeriod",
                    "subscriptionGroups",
                    "subscriptionStatusUrl",
                    "subscriptionStatusUrlForSandbox",
                    "subscriptionStatusUrlVersion",
                    "subscriptionStatusUrlVersionForSandbox",
                ]
            ]
        ] = None,
        fields_user_invitations: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "allAppsVisible",
                    "email",
                    "expirationDate",
                    "firstName",
                    "lastName",
                    "provisioningAllowed",
                    "roles",
                    "visibleApps",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[typing_extensions.Literal["visibleApps"]]
        ] = None,
        limit_visible_apps: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.UserInvitationResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_apps is not None:
            _query["fields[apps]"] = encode_param(fields_apps, False)
        if fields_user_invitations is not None:
            _query["fields[userInvitations]"] = encode_param(
                fields_user_invitations, False
            )
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit_visible_apps is not None:
            _query["limit[visibleApps]"] = encode_param(limit_visible_apps, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v1/userInvitations/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.UserInvitationResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def list(
        self,
        *,
        fields_apps: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "alternativeDistributionKey",
                    "analyticsReportRequests",
                    "appAvailability",
                    "appClips",
                    "appCustomProductPages",
                    "appEncryptionDeclarations",
                    "appEvents",
                    "appInfos",
                    "appPricePoints",
                    "appPriceSchedule",
                    "appStoreVersionExperimentsV2",
                    "appStoreVersions",
                    "betaAppLocalizations",
                    "betaAppReviewDetail",
                    "betaGroups",
                    "betaLicenseAgreement",
                    "betaTesters",
                    "builds",
                    "bundleId",
                    "ciProduct",
                    "contentRightsDeclaration",
                    "customerReviews",
                    "endUserLicenseAgreement",
                    "gameCenterDetail",
                    "gameCenterEnabledVersions",
                    "inAppPurchases",
                    "inAppPurchasesV2",
                    "isOrEverWasMadeForKids",
                    "marketplaceSearchDetail",
                    "name",
                    "perfPowerMetrics",
                    "preOrder",
                    "preReleaseVersions",
                    "primaryLocale",
                    "promotedPurchases",
                    "reviewSubmissions",
                    "sku",
                    "subscriptionGracePeriod",
                    "subscriptionGroups",
                    "subscriptionStatusUrl",
                    "subscriptionStatusUrlForSandbox",
                    "subscriptionStatusUrlVersion",
                    "subscriptionStatusUrlVersionForSandbox",
                ]
            ]
        ] = None,
        fields_user_invitations: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "allAppsVisible",
                    "email",
                    "expirationDate",
                    "firstName",
                    "lastName",
                    "provisioningAllowed",
                    "roles",
                    "visibleApps",
                ]
            ]
        ] = None,
        filter_email: typing.Optional[typing.List[str]] = None,
        filter_roles: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "ADMIN",
                    "FINANCE",
                    "ACCOUNT_HOLDER",
                    "SALES",
                    "MARKETING",
                    "APP_MANAGER",
                    "DEVELOPER",
                    "ACCESS_TO_REPORTS",
                    "CUSTOMER_SUPPORT",
                    "CREATE_APPS",
                    "CLOUD_MANAGED_DEVELOPER_ID",
                    "CLOUD_MANAGED_APP_DISTRIBUTION",
                    "GENERATE_INDIVIDUAL_KEYS",
                ]
            ]
        ] = None,
        filter_visible_apps: typing.Optional[typing.List[str]] = None,
        include: typing.Optional[
            typing.List[typing_extensions.Literal["visibleApps"]]
        ] = None,
        limit: typing.Optional[int] = None,
        limit_visible_apps: typing.Optional[int] = None,
        sort: typing.Optional[
            typing.List[
                typing_extensions.Literal["email", "-email", "lastName", "-lastName"]
            ]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.UserInvitationsResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_apps is not None:
            _query["fields[apps]"] = encode_param(fields_apps, False)
        if fields_user_invitations is not None:
            _query["fields[userInvitations]"] = encode_param(
                fields_user_invitations, False
            )
        if filter_email is not None:
            _query["filter[email]"] = encode_param(filter_email, False)
        if filter_roles is not None:
            _query["filter[roles]"] = encode_param(filter_roles, False)
        if filter_visible_apps is not None:
            _query["filter[visibleApps]"] = encode_param(filter_visible_apps, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if limit_visible_apps is not None:
            _query["limit[visibleApps]"] = encode_param(limit_visible_apps, False)
        if sort is not None:
            _query["sort"] = encode_param(sort, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path="/v1/userInvitations",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.UserInvitationsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def delete(
        self, *, id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="DELETE",
            path=f"/v1/userInvitations/{id}",
            auth_names=["itc-bearer-token"],
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
