"""File Generated by Sideko (sideko.dev)"""

from apple_python.core import (
    default_request_options,
    RequestOptions,
    SyncBaseClient,
    AsyncBaseClient,
    QueryParams,
    encode_param,
)
import typing
import typing_extensions
from apple_python.types.v1.ci_products.workflows import models


class WorkflowsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def list(
        self,
        *,
        id: str,
        fields_ci_mac_os_versions: typing.Optional[
            typing.List[typing_extensions.Literal["name", "version", "xcodeVersions"]]
        ] = None,
        fields_ci_products: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "additionalRepositories",
                    "app",
                    "buildRuns",
                    "bundleId",
                    "createdDate",
                    "name",
                    "primaryRepositories",
                    "productType",
                    "workflows",
                ]
            ]
        ] = None,
        fields_ci_workflows: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "actions",
                    "branchStartCondition",
                    "buildRuns",
                    "clean",
                    "containerFilePath",
                    "description",
                    "isEnabled",
                    "isLockedForEditing",
                    "lastModifiedDate",
                    "macOsVersion",
                    "manualBranchStartCondition",
                    "manualPullRequestStartCondition",
                    "manualTagStartCondition",
                    "name",
                    "product",
                    "pullRequestStartCondition",
                    "repository",
                    "scheduledStartCondition",
                    "tagStartCondition",
                    "xcodeVersion",
                ]
            ]
        ] = None,
        fields_ci_xcode_versions: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "macOsVersions", "name", "testDestinations", "version"
                ]
            ]
        ] = None,
        fields_scm_repositories: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "defaultBranch",
                    "gitReferences",
                    "httpCloneUrl",
                    "lastAccessedDate",
                    "ownerName",
                    "pullRequests",
                    "repositoryName",
                    "scmProvider",
                    "sshCloneUrl",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "macOsVersion", "product", "repository", "xcodeVersion"
                ]
            ]
        ] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.CiWorkflowsResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_ci_mac_os_versions is not None:
            _query["fields[ciMacOsVersions]"] = encode_param(
                fields_ci_mac_os_versions, False
            )
        if fields_ci_products is not None:
            _query["fields[ciProducts]"] = encode_param(fields_ci_products, False)
        if fields_ci_workflows is not None:
            _query["fields[ciWorkflows]"] = encode_param(fields_ci_workflows, False)
        if fields_ci_xcode_versions is not None:
            _query["fields[ciXcodeVersions]"] = encode_param(
                fields_ci_xcode_versions, False
            )
        if fields_scm_repositories is not None:
            _query["fields[scmRepositories]"] = encode_param(
                fields_scm_repositories, False
            )
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v1/ciProducts/{id}/workflows",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.CiWorkflowsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncWorkflowsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def list(
        self,
        *,
        id: str,
        fields_ci_mac_os_versions: typing.Optional[
            typing.List[typing_extensions.Literal["name", "version", "xcodeVersions"]]
        ] = None,
        fields_ci_products: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "additionalRepositories",
                    "app",
                    "buildRuns",
                    "bundleId",
                    "createdDate",
                    "name",
                    "primaryRepositories",
                    "productType",
                    "workflows",
                ]
            ]
        ] = None,
        fields_ci_workflows: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "actions",
                    "branchStartCondition",
                    "buildRuns",
                    "clean",
                    "containerFilePath",
                    "description",
                    "isEnabled",
                    "isLockedForEditing",
                    "lastModifiedDate",
                    "macOsVersion",
                    "manualBranchStartCondition",
                    "manualPullRequestStartCondition",
                    "manualTagStartCondition",
                    "name",
                    "product",
                    "pullRequestStartCondition",
                    "repository",
                    "scheduledStartCondition",
                    "tagStartCondition",
                    "xcodeVersion",
                ]
            ]
        ] = None,
        fields_ci_xcode_versions: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "macOsVersions", "name", "testDestinations", "version"
                ]
            ]
        ] = None,
        fields_scm_repositories: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "defaultBranch",
                    "gitReferences",
                    "httpCloneUrl",
                    "lastAccessedDate",
                    "ownerName",
                    "pullRequests",
                    "repositoryName",
                    "scmProvider",
                    "sshCloneUrl",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "macOsVersion", "product", "repository", "xcodeVersion"
                ]
            ]
        ] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.CiWorkflowsResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_ci_mac_os_versions is not None:
            _query["fields[ciMacOsVersions]"] = encode_param(
                fields_ci_mac_os_versions, False
            )
        if fields_ci_products is not None:
            _query["fields[ciProducts]"] = encode_param(fields_ci_products, False)
        if fields_ci_workflows is not None:
            _query["fields[ciWorkflows]"] = encode_param(fields_ci_workflows, False)
        if fields_ci_xcode_versions is not None:
            _query["fields[ciXcodeVersions]"] = encode_param(
                fields_ci_xcode_versions, False
            )
        if fields_scm_repositories is not None:
            _query["fields[scmRepositories]"] = encode_param(
                fields_scm_repositories, False
            )
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v1/ciProducts/{id}/workflows",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.CiWorkflowsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
