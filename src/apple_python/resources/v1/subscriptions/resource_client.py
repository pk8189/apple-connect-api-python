"""File Generated by Sideko (sideko.dev)"""

from apple_python.core import (
    QueryParams,
    encode_param,
    default_request_options,
    SyncBaseClient,
    RequestOptions,
    to_encodable,
    AsyncBaseClient,
)
from apple_python.resources.v1.subscriptions.relationships import (
    AsyncRelationshipsClient,
    RelationshipsClient,
)
from apple_python.resources.v1.subscriptions.app_store_review_screenshot import (
    AppStoreReviewScreenshotClient,
    AsyncAppStoreReviewScreenshotClient,
)
from apple_python.resources.v1.subscriptions.introductory_offers import (
    IntroductoryOffersClient,
    AsyncIntroductoryOffersClient,
)
from apple_python.resources.v1.subscriptions.offer_codes import (
    OfferCodesClient,
    AsyncOfferCodesClient,
)
from apple_python.resources.v1.subscriptions.price_points import (
    PricePointsClient,
    AsyncPricePointsClient,
)
from apple_python.resources.v1.subscriptions.prices import (
    PricesClient,
    AsyncPricesClient,
)
from apple_python.resources.v1.subscriptions.promoted_purchase import (
    PromotedPurchaseClient,
    AsyncPromotedPurchaseClient,
)
from apple_python.resources.v1.subscriptions.promotional_offers import (
    PromotionalOffersClient,
    AsyncPromotionalOffersClient,
)
from apple_python.resources.v1.subscriptions.subscription_availability import (
    AsyncSubscriptionAvailabilityClient,
    SubscriptionAvailabilityClient,
)
from apple_python.resources.v1.subscriptions.subscription_localizations import (
    SubscriptionLocalizationsClient,
    AsyncSubscriptionLocalizationsClient,
)
import typing
import typing_extensions
from apple_python.types.v1.subscriptions import params, models


class SubscriptionsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.relationships = RelationshipsClient(base_client=self._base_client)
        self.app_store_review_screenshot = AppStoreReviewScreenshotClient(
            base_client=self._base_client
        )
        self.introductory_offers = IntroductoryOffersClient(
            base_client=self._base_client
        )
        self.offer_codes = OfferCodesClient(base_client=self._base_client)
        self.price_points = PricePointsClient(base_client=self._base_client)
        self.prices = PricesClient(base_client=self._base_client)
        self.promoted_purchase = PromotedPurchaseClient(base_client=self._base_client)
        self.promotional_offers = PromotionalOffersClient(base_client=self._base_client)
        self.subscription_availability = SubscriptionAvailabilityClient(
            base_client=self._base_client
        )
        self.subscription_localizations = SubscriptionLocalizationsClient(
            base_client=self._base_client
        )

    # register sync api methods (keep comment for code generation)
    def create(
        self,
        *,
        data: params.SubscriptionCreateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.SubscriptionResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerSubscriptionCreateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="POST",
            path="/v1/subscriptions",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.SubscriptionResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def patch(
        self,
        *,
        data: params.SubscriptionUpdateRequest,
        id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.SubscriptionResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerSubscriptionUpdateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="PATCH",
            path=f"/v1/subscriptions/{id}",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.SubscriptionResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def get(
        self,
        *,
        id: str,
        fields_promoted_purchases: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "enabled",
                    "inAppPurchaseV2",
                    "promotionImages",
                    "state",
                    "subscription",
                    "visibleForAllUsers",
                ]
            ]
        ] = None,
        fields_subscription_app_store_review_screenshots: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "assetDeliveryState",
                    "assetToken",
                    "assetType",
                    "fileName",
                    "fileSize",
                    "imageAsset",
                    "sourceFileChecksum",
                    "subscription",
                    "uploadOperations",
                    "uploaded",
                ]
            ]
        ] = None,
        fields_subscription_availabilities: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "availableInNewTerritories", "availableTerritories", "subscription"
                ]
            ]
        ] = None,
        fields_subscription_introductory_offers: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "duration",
                    "endDate",
                    "numberOfPeriods",
                    "offerMode",
                    "startDate",
                    "subscription",
                    "subscriptionPricePoint",
                    "territory",
                ]
            ]
        ] = None,
        fields_subscription_localizations: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "description", "locale", "name", "state", "subscription"
                ]
            ]
        ] = None,
        fields_subscription_offer_codes: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "active",
                    "customCodes",
                    "customerEligibilities",
                    "duration",
                    "name",
                    "numberOfPeriods",
                    "offerEligibility",
                    "offerMode",
                    "oneTimeUseCodes",
                    "prices",
                    "subscription",
                    "totalNumberOfCodes",
                ]
            ]
        ] = None,
        fields_subscription_price_points: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "customerPrice",
                    "equalizations",
                    "proceeds",
                    "proceedsYear2",
                    "subscription",
                    "territory",
                ]
            ]
        ] = None,
        fields_subscription_prices: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "preserveCurrentPrice",
                    "preserved",
                    "startDate",
                    "subscription",
                    "subscriptionPricePoint",
                    "territory",
                ]
            ]
        ] = None,
        fields_subscription_promotional_offers: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "duration",
                    "name",
                    "numberOfPeriods",
                    "offerCode",
                    "offerMode",
                    "prices",
                    "subscription",
                ]
            ]
        ] = None,
        fields_subscriptions: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appStoreReviewScreenshot",
                    "familySharable",
                    "group",
                    "groupLevel",
                    "introductoryOffers",
                    "name",
                    "offerCodes",
                    "pricePoints",
                    "prices",
                    "productId",
                    "promotedPurchase",
                    "promotionalOffers",
                    "reviewNote",
                    "state",
                    "subscriptionAvailability",
                    "subscriptionLocalizations",
                    "subscriptionPeriod",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appStoreReviewScreenshot",
                    "group",
                    "introductoryOffers",
                    "offerCodes",
                    "prices",
                    "promotedPurchase",
                    "promotionalOffers",
                    "subscriptionAvailability",
                    "subscriptionLocalizations",
                ]
            ]
        ] = None,
        limit_introductory_offers: typing.Optional[int] = None,
        limit_offer_codes: typing.Optional[int] = None,
        limit_prices: typing.Optional[int] = None,
        limit_promotional_offers: typing.Optional[int] = None,
        limit_subscription_localizations: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.SubscriptionResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_promoted_purchases is not None:
            _query["fields[promotedPurchases]"] = encode_param(
                fields_promoted_purchases, False
            )
        if fields_subscription_app_store_review_screenshots is not None:
            _query["fields[subscriptionAppStoreReviewScreenshots]"] = encode_param(
                fields_subscription_app_store_review_screenshots, False
            )
        if fields_subscription_availabilities is not None:
            _query["fields[subscriptionAvailabilities]"] = encode_param(
                fields_subscription_availabilities, False
            )
        if fields_subscription_introductory_offers is not None:
            _query["fields[subscriptionIntroductoryOffers]"] = encode_param(
                fields_subscription_introductory_offers, False
            )
        if fields_subscription_localizations is not None:
            _query["fields[subscriptionLocalizations]"] = encode_param(
                fields_subscription_localizations, False
            )
        if fields_subscription_offer_codes is not None:
            _query["fields[subscriptionOfferCodes]"] = encode_param(
                fields_subscription_offer_codes, False
            )
        if fields_subscription_price_points is not None:
            _query["fields[subscriptionPricePoints]"] = encode_param(
                fields_subscription_price_points, False
            )
        if fields_subscription_prices is not None:
            _query["fields[subscriptionPrices]"] = encode_param(
                fields_subscription_prices, False
            )
        if fields_subscription_promotional_offers is not None:
            _query["fields[subscriptionPromotionalOffers]"] = encode_param(
                fields_subscription_promotional_offers, False
            )
        if fields_subscriptions is not None:
            _query["fields[subscriptions]"] = encode_param(fields_subscriptions, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit_introductory_offers is not None:
            _query["limit[introductoryOffers]"] = encode_param(
                limit_introductory_offers, False
            )
        if limit_offer_codes is not None:
            _query["limit[offerCodes]"] = encode_param(limit_offer_codes, False)
        if limit_prices is not None:
            _query["limit[prices]"] = encode_param(limit_prices, False)
        if limit_promotional_offers is not None:
            _query["limit[promotionalOffers]"] = encode_param(
                limit_promotional_offers, False
            )
        if limit_subscription_localizations is not None:
            _query["limit[subscriptionLocalizations]"] = encode_param(
                limit_subscription_localizations, False
            )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v1/subscriptions/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.SubscriptionResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def delete(
        self, *, id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="DELETE",
            path=f"/v1/subscriptions/{id}",
            auth_names=["itc-bearer-token"],
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncSubscriptionsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.relationships = AsyncRelationshipsClient(base_client=self._base_client)
        self.app_store_review_screenshot = AsyncAppStoreReviewScreenshotClient(
            base_client=self._base_client
        )
        self.introductory_offers = AsyncIntroductoryOffersClient(
            base_client=self._base_client
        )
        self.offer_codes = AsyncOfferCodesClient(base_client=self._base_client)
        self.price_points = AsyncPricePointsClient(base_client=self._base_client)
        self.prices = AsyncPricesClient(base_client=self._base_client)
        self.promoted_purchase = AsyncPromotedPurchaseClient(
            base_client=self._base_client
        )
        self.promotional_offers = AsyncPromotionalOffersClient(
            base_client=self._base_client
        )
        self.subscription_availability = AsyncSubscriptionAvailabilityClient(
            base_client=self._base_client
        )
        self.subscription_localizations = AsyncSubscriptionLocalizationsClient(
            base_client=self._base_client
        )

    # register async api methods (keep comment for code generation)
    async def create(
        self,
        *,
        data: params.SubscriptionCreateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.SubscriptionResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerSubscriptionCreateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="POST",
            path="/v1/subscriptions",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.SubscriptionResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def patch(
        self,
        *,
        data: params.SubscriptionUpdateRequest,
        id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.SubscriptionResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerSubscriptionUpdateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="PATCH",
            path=f"/v1/subscriptions/{id}",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.SubscriptionResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def get(
        self,
        *,
        id: str,
        fields_promoted_purchases: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "enabled",
                    "inAppPurchaseV2",
                    "promotionImages",
                    "state",
                    "subscription",
                    "visibleForAllUsers",
                ]
            ]
        ] = None,
        fields_subscription_app_store_review_screenshots: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "assetDeliveryState",
                    "assetToken",
                    "assetType",
                    "fileName",
                    "fileSize",
                    "imageAsset",
                    "sourceFileChecksum",
                    "subscription",
                    "uploadOperations",
                    "uploaded",
                ]
            ]
        ] = None,
        fields_subscription_availabilities: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "availableInNewTerritories", "availableTerritories", "subscription"
                ]
            ]
        ] = None,
        fields_subscription_introductory_offers: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "duration",
                    "endDate",
                    "numberOfPeriods",
                    "offerMode",
                    "startDate",
                    "subscription",
                    "subscriptionPricePoint",
                    "territory",
                ]
            ]
        ] = None,
        fields_subscription_localizations: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "description", "locale", "name", "state", "subscription"
                ]
            ]
        ] = None,
        fields_subscription_offer_codes: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "active",
                    "customCodes",
                    "customerEligibilities",
                    "duration",
                    "name",
                    "numberOfPeriods",
                    "offerEligibility",
                    "offerMode",
                    "oneTimeUseCodes",
                    "prices",
                    "subscription",
                    "totalNumberOfCodes",
                ]
            ]
        ] = None,
        fields_subscription_price_points: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "customerPrice",
                    "equalizations",
                    "proceeds",
                    "proceedsYear2",
                    "subscription",
                    "territory",
                ]
            ]
        ] = None,
        fields_subscription_prices: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "preserveCurrentPrice",
                    "preserved",
                    "startDate",
                    "subscription",
                    "subscriptionPricePoint",
                    "territory",
                ]
            ]
        ] = None,
        fields_subscription_promotional_offers: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "duration",
                    "name",
                    "numberOfPeriods",
                    "offerCode",
                    "offerMode",
                    "prices",
                    "subscription",
                ]
            ]
        ] = None,
        fields_subscriptions: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appStoreReviewScreenshot",
                    "familySharable",
                    "group",
                    "groupLevel",
                    "introductoryOffers",
                    "name",
                    "offerCodes",
                    "pricePoints",
                    "prices",
                    "productId",
                    "promotedPurchase",
                    "promotionalOffers",
                    "reviewNote",
                    "state",
                    "subscriptionAvailability",
                    "subscriptionLocalizations",
                    "subscriptionPeriod",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appStoreReviewScreenshot",
                    "group",
                    "introductoryOffers",
                    "offerCodes",
                    "prices",
                    "promotedPurchase",
                    "promotionalOffers",
                    "subscriptionAvailability",
                    "subscriptionLocalizations",
                ]
            ]
        ] = None,
        limit_introductory_offers: typing.Optional[int] = None,
        limit_offer_codes: typing.Optional[int] = None,
        limit_prices: typing.Optional[int] = None,
        limit_promotional_offers: typing.Optional[int] = None,
        limit_subscription_localizations: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.SubscriptionResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_promoted_purchases is not None:
            _query["fields[promotedPurchases]"] = encode_param(
                fields_promoted_purchases, False
            )
        if fields_subscription_app_store_review_screenshots is not None:
            _query["fields[subscriptionAppStoreReviewScreenshots]"] = encode_param(
                fields_subscription_app_store_review_screenshots, False
            )
        if fields_subscription_availabilities is not None:
            _query["fields[subscriptionAvailabilities]"] = encode_param(
                fields_subscription_availabilities, False
            )
        if fields_subscription_introductory_offers is not None:
            _query["fields[subscriptionIntroductoryOffers]"] = encode_param(
                fields_subscription_introductory_offers, False
            )
        if fields_subscription_localizations is not None:
            _query["fields[subscriptionLocalizations]"] = encode_param(
                fields_subscription_localizations, False
            )
        if fields_subscription_offer_codes is not None:
            _query["fields[subscriptionOfferCodes]"] = encode_param(
                fields_subscription_offer_codes, False
            )
        if fields_subscription_price_points is not None:
            _query["fields[subscriptionPricePoints]"] = encode_param(
                fields_subscription_price_points, False
            )
        if fields_subscription_prices is not None:
            _query["fields[subscriptionPrices]"] = encode_param(
                fields_subscription_prices, False
            )
        if fields_subscription_promotional_offers is not None:
            _query["fields[subscriptionPromotionalOffers]"] = encode_param(
                fields_subscription_promotional_offers, False
            )
        if fields_subscriptions is not None:
            _query["fields[subscriptions]"] = encode_param(fields_subscriptions, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit_introductory_offers is not None:
            _query["limit[introductoryOffers]"] = encode_param(
                limit_introductory_offers, False
            )
        if limit_offer_codes is not None:
            _query["limit[offerCodes]"] = encode_param(limit_offer_codes, False)
        if limit_prices is not None:
            _query["limit[prices]"] = encode_param(limit_prices, False)
        if limit_promotional_offers is not None:
            _query["limit[promotionalOffers]"] = encode_param(
                limit_promotional_offers, False
            )
        if limit_subscription_localizations is not None:
            _query["limit[subscriptionLocalizations]"] = encode_param(
                limit_subscription_localizations, False
            )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v1/subscriptions/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.SubscriptionResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def delete(
        self, *, id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="DELETE",
            path=f"/v1/subscriptions/{id}",
            auth_names=["itc-bearer-token"],
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
