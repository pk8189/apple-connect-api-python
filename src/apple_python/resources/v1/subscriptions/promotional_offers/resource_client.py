"""File Generated by Sideko (sideko.dev)"""

from apple_python.core import (
    RequestOptions,
    SyncBaseClient,
    default_request_options,
    encode_param,
    AsyncBaseClient,
    QueryParams,
)
import typing
import typing_extensions
from apple_python.types.v1.subscriptions.promotional_offers import models


class PromotionalOffersClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def list(
        self,
        *,
        id: str,
        fields_subscription_promotional_offer_prices: typing.Optional[
            typing.List[
                typing_extensions.Literal["subscriptionPricePoint", "territory"]
            ]
        ] = None,
        fields_subscription_promotional_offers: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "duration",
                    "name",
                    "numberOfPeriods",
                    "offerCode",
                    "offerMode",
                    "prices",
                    "subscription",
                ]
            ]
        ] = None,
        fields_subscriptions: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appStoreReviewScreenshot",
                    "familySharable",
                    "group",
                    "groupLevel",
                    "introductoryOffers",
                    "name",
                    "offerCodes",
                    "pricePoints",
                    "prices",
                    "productId",
                    "promotedPurchase",
                    "promotionalOffers",
                    "reviewNote",
                    "state",
                    "subscriptionAvailability",
                    "subscriptionLocalizations",
                    "subscriptionPeriod",
                ]
            ]
        ] = None,
        filter_territory: typing.Optional[typing.List[str]] = None,
        include: typing.Optional[
            typing.List[typing_extensions.Literal["prices", "subscription"]]
        ] = None,
        limit: typing.Optional[int] = None,
        limit_prices: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.SubscriptionPromotionalOffersResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_subscription_promotional_offer_prices is not None:
            _query["fields[subscriptionPromotionalOfferPrices]"] = encode_param(
                fields_subscription_promotional_offer_prices, False
            )
        if fields_subscription_promotional_offers is not None:
            _query["fields[subscriptionPromotionalOffers]"] = encode_param(
                fields_subscription_promotional_offers, False
            )
        if fields_subscriptions is not None:
            _query["fields[subscriptions]"] = encode_param(fields_subscriptions, False)
        if filter_territory is not None:
            _query["filter[territory]"] = encode_param(filter_territory, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if limit_prices is not None:
            _query["limit[prices]"] = encode_param(limit_prices, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v1/subscriptions/{id}/promotionalOffers",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.SubscriptionPromotionalOffersResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncPromotionalOffersClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def list(
        self,
        *,
        id: str,
        fields_subscription_promotional_offer_prices: typing.Optional[
            typing.List[
                typing_extensions.Literal["subscriptionPricePoint", "territory"]
            ]
        ] = None,
        fields_subscription_promotional_offers: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "duration",
                    "name",
                    "numberOfPeriods",
                    "offerCode",
                    "offerMode",
                    "prices",
                    "subscription",
                ]
            ]
        ] = None,
        fields_subscriptions: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appStoreReviewScreenshot",
                    "familySharable",
                    "group",
                    "groupLevel",
                    "introductoryOffers",
                    "name",
                    "offerCodes",
                    "pricePoints",
                    "prices",
                    "productId",
                    "promotedPurchase",
                    "promotionalOffers",
                    "reviewNote",
                    "state",
                    "subscriptionAvailability",
                    "subscriptionLocalizations",
                    "subscriptionPeriod",
                ]
            ]
        ] = None,
        filter_territory: typing.Optional[typing.List[str]] = None,
        include: typing.Optional[
            typing.List[typing_extensions.Literal["prices", "subscription"]]
        ] = None,
        limit: typing.Optional[int] = None,
        limit_prices: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.SubscriptionPromotionalOffersResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_subscription_promotional_offer_prices is not None:
            _query["fields[subscriptionPromotionalOfferPrices]"] = encode_param(
                fields_subscription_promotional_offer_prices, False
            )
        if fields_subscription_promotional_offers is not None:
            _query["fields[subscriptionPromotionalOffers]"] = encode_param(
                fields_subscription_promotional_offers, False
            )
        if fields_subscriptions is not None:
            _query["fields[subscriptions]"] = encode_param(fields_subscriptions, False)
        if filter_territory is not None:
            _query["filter[territory]"] = encode_param(filter_territory, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if limit_prices is not None:
            _query["limit[prices]"] = encode_param(limit_prices, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v1/subscriptions/{id}/promotionalOffers",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.SubscriptionPromotionalOffersResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
