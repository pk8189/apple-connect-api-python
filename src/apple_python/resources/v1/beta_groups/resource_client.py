"""File Generated by Sideko (sideko.dev)"""

from apple_python.core import (
    RequestOptions,
    default_request_options,
    AsyncBaseClient,
    to_encodable,
    SyncBaseClient,
    QueryParams,
    encode_param,
)
from apple_python.resources.v1.beta_groups.relationships import (
    AsyncRelationshipsClient,
    RelationshipsClient,
)
from apple_python.resources.v1.beta_groups.app import AppClient, AsyncAppClient
from apple_python.resources.v1.beta_groups.beta_testers import (
    BetaTestersClient,
    AsyncBetaTestersClient,
)
from apple_python.resources.v1.beta_groups.builds import AsyncBuildsClient, BuildsClient
from apple_python.resources.v1.beta_groups.metrics import (
    MetricsClient,
    AsyncMetricsClient,
)
import typing
import typing_extensions
from apple_python.types.v1.beta_groups import models, params


class BetaGroupsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.relationships = RelationshipsClient(base_client=self._base_client)
        self.app = AppClient(base_client=self._base_client)
        self.beta_testers = BetaTestersClient(base_client=self._base_client)
        self.builds = BuildsClient(base_client=self._base_client)
        self.metrics = MetricsClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)
    def create(
        self,
        *,
        data: params.BetaGroupCreateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.BetaGroupResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerBetaGroupCreateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="POST",
            path="/v1/betaGroups",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.BetaGroupResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def patch(
        self,
        *,
        data: params.BetaGroupUpdateRequest,
        id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.BetaGroupResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerBetaGroupUpdateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="PATCH",
            path=f"/v1/betaGroups/{id}",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.BetaGroupResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def get(
        self,
        *,
        id: str,
        fields_apps: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "alternativeDistributionKey",
                    "analyticsReportRequests",
                    "appAvailability",
                    "appClips",
                    "appCustomProductPages",
                    "appEncryptionDeclarations",
                    "appEvents",
                    "appInfos",
                    "appPricePoints",
                    "appPriceSchedule",
                    "appStoreVersionExperimentsV2",
                    "appStoreVersions",
                    "betaAppLocalizations",
                    "betaAppReviewDetail",
                    "betaGroups",
                    "betaLicenseAgreement",
                    "betaTesters",
                    "builds",
                    "bundleId",
                    "ciProduct",
                    "contentRightsDeclaration",
                    "customerReviews",
                    "endUserLicenseAgreement",
                    "gameCenterDetail",
                    "gameCenterEnabledVersions",
                    "inAppPurchases",
                    "inAppPurchasesV2",
                    "isOrEverWasMadeForKids",
                    "marketplaceSearchDetail",
                    "name",
                    "perfPowerMetrics",
                    "preOrder",
                    "preReleaseVersions",
                    "primaryLocale",
                    "promotedPurchases",
                    "reviewSubmissions",
                    "sku",
                    "subscriptionGracePeriod",
                    "subscriptionGroups",
                    "subscriptionStatusUrl",
                    "subscriptionStatusUrlForSandbox",
                    "subscriptionStatusUrlVersion",
                    "subscriptionStatusUrlVersionForSandbox",
                ]
            ]
        ] = None,
        fields_beta_groups: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "betaTesters",
                    "builds",
                    "createdDate",
                    "feedbackEnabled",
                    "hasAccessToAllBuilds",
                    "iosBuildsAvailableForAppleSiliconMac",
                    "isInternalGroup",
                    "name",
                    "publicLink",
                    "publicLinkEnabled",
                    "publicLinkId",
                    "publicLinkLimit",
                    "publicLinkLimitEnabled",
                ]
            ]
        ] = None,
        fields_beta_testers: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "apps",
                    "betaGroups",
                    "builds",
                    "email",
                    "firstName",
                    "inviteType",
                    "lastName",
                    "state",
                ]
            ]
        ] = None,
        fields_builds: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "appEncryptionDeclaration",
                    "appStoreVersion",
                    "betaAppReviewSubmission",
                    "betaBuildLocalizations",
                    "betaGroups",
                    "buildAudienceType",
                    "buildBetaDetail",
                    "buildBundles",
                    "computedMinMacOsVersion",
                    "diagnosticSignatures",
                    "expirationDate",
                    "expired",
                    "iconAssetToken",
                    "icons",
                    "individualTesters",
                    "lsMinimumSystemVersion",
                    "minOsVersion",
                    "perfPowerMetrics",
                    "preReleaseVersion",
                    "processingState",
                    "uploadedDate",
                    "usesNonExemptEncryption",
                    "version",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[typing_extensions.Literal["app", "betaTesters", "builds"]]
        ] = None,
        limit_beta_testers: typing.Optional[int] = None,
        limit_builds: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.BetaGroupResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_apps is not None:
            _query["fields[apps]"] = encode_param(fields_apps, False)
        if fields_beta_groups is not None:
            _query["fields[betaGroups]"] = encode_param(fields_beta_groups, False)
        if fields_beta_testers is not None:
            _query["fields[betaTesters]"] = encode_param(fields_beta_testers, False)
        if fields_builds is not None:
            _query["fields[builds]"] = encode_param(fields_builds, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit_beta_testers is not None:
            _query["limit[betaTesters]"] = encode_param(limit_beta_testers, False)
        if limit_builds is not None:
            _query["limit[builds]"] = encode_param(limit_builds, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v1/betaGroups/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.BetaGroupResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def list(
        self,
        *,
        fields_apps: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "alternativeDistributionKey",
                    "analyticsReportRequests",
                    "appAvailability",
                    "appClips",
                    "appCustomProductPages",
                    "appEncryptionDeclarations",
                    "appEvents",
                    "appInfos",
                    "appPricePoints",
                    "appPriceSchedule",
                    "appStoreVersionExperimentsV2",
                    "appStoreVersions",
                    "betaAppLocalizations",
                    "betaAppReviewDetail",
                    "betaGroups",
                    "betaLicenseAgreement",
                    "betaTesters",
                    "builds",
                    "bundleId",
                    "ciProduct",
                    "contentRightsDeclaration",
                    "customerReviews",
                    "endUserLicenseAgreement",
                    "gameCenterDetail",
                    "gameCenterEnabledVersions",
                    "inAppPurchases",
                    "inAppPurchasesV2",
                    "isOrEverWasMadeForKids",
                    "marketplaceSearchDetail",
                    "name",
                    "perfPowerMetrics",
                    "preOrder",
                    "preReleaseVersions",
                    "primaryLocale",
                    "promotedPurchases",
                    "reviewSubmissions",
                    "sku",
                    "subscriptionGracePeriod",
                    "subscriptionGroups",
                    "subscriptionStatusUrl",
                    "subscriptionStatusUrlForSandbox",
                    "subscriptionStatusUrlVersion",
                    "subscriptionStatusUrlVersionForSandbox",
                ]
            ]
        ] = None,
        fields_beta_groups: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "betaTesters",
                    "builds",
                    "createdDate",
                    "feedbackEnabled",
                    "hasAccessToAllBuilds",
                    "iosBuildsAvailableForAppleSiliconMac",
                    "isInternalGroup",
                    "name",
                    "publicLink",
                    "publicLinkEnabled",
                    "publicLinkId",
                    "publicLinkLimit",
                    "publicLinkLimitEnabled",
                ]
            ]
        ] = None,
        fields_beta_testers: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "apps",
                    "betaGroups",
                    "builds",
                    "email",
                    "firstName",
                    "inviteType",
                    "lastName",
                    "state",
                ]
            ]
        ] = None,
        fields_builds: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "appEncryptionDeclaration",
                    "appStoreVersion",
                    "betaAppReviewSubmission",
                    "betaBuildLocalizations",
                    "betaGroups",
                    "buildAudienceType",
                    "buildBetaDetail",
                    "buildBundles",
                    "computedMinMacOsVersion",
                    "diagnosticSignatures",
                    "expirationDate",
                    "expired",
                    "iconAssetToken",
                    "icons",
                    "individualTesters",
                    "lsMinimumSystemVersion",
                    "minOsVersion",
                    "perfPowerMetrics",
                    "preReleaseVersion",
                    "processingState",
                    "uploadedDate",
                    "usesNonExemptEncryption",
                    "version",
                ]
            ]
        ] = None,
        filter_app: typing.Optional[typing.List[str]] = None,
        filter_builds: typing.Optional[typing.List[str]] = None,
        filter_id: typing.Optional[typing.List[str]] = None,
        filter_is_internal_group: typing.Optional[typing.List[str]] = None,
        filter_name: typing.Optional[typing.List[str]] = None,
        filter_public_link_enabled: typing.Optional[typing.List[str]] = None,
        filter_public_link_limit_enabled: typing.Optional[typing.List[str]] = None,
        filter_public_link: typing.Optional[typing.List[str]] = None,
        include: typing.Optional[
            typing.List[typing_extensions.Literal["app", "betaTesters", "builds"]]
        ] = None,
        limit: typing.Optional[int] = None,
        limit_beta_testers: typing.Optional[int] = None,
        limit_builds: typing.Optional[int] = None,
        sort: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "createdDate",
                    "-createdDate",
                    "name",
                    "-name",
                    "publicLinkEnabled",
                    "-publicLinkEnabled",
                    "publicLinkLimit",
                    "-publicLinkLimit",
                ]
            ]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.BetaGroupsResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_apps is not None:
            _query["fields[apps]"] = encode_param(fields_apps, False)
        if fields_beta_groups is not None:
            _query["fields[betaGroups]"] = encode_param(fields_beta_groups, False)
        if fields_beta_testers is not None:
            _query["fields[betaTesters]"] = encode_param(fields_beta_testers, False)
        if fields_builds is not None:
            _query["fields[builds]"] = encode_param(fields_builds, False)
        if filter_app is not None:
            _query["filter[app]"] = encode_param(filter_app, False)
        if filter_builds is not None:
            _query["filter[builds]"] = encode_param(filter_builds, False)
        if filter_id is not None:
            _query["filter[id]"] = encode_param(filter_id, False)
        if filter_is_internal_group is not None:
            _query["filter[isInternalGroup]"] = encode_param(
                filter_is_internal_group, False
            )
        if filter_name is not None:
            _query["filter[name]"] = encode_param(filter_name, False)
        if filter_public_link_enabled is not None:
            _query["filter[publicLinkEnabled]"] = encode_param(
                filter_public_link_enabled, False
            )
        if filter_public_link_limit_enabled is not None:
            _query["filter[publicLinkLimitEnabled]"] = encode_param(
                filter_public_link_limit_enabled, False
            )
        if filter_public_link is not None:
            _query["filter[publicLink]"] = encode_param(filter_public_link, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if limit_beta_testers is not None:
            _query["limit[betaTesters]"] = encode_param(limit_beta_testers, False)
        if limit_builds is not None:
            _query["limit[builds]"] = encode_param(limit_builds, False)
        if sort is not None:
            _query["sort"] = encode_param(sort, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path="/v1/betaGroups",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.BetaGroupsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def delete(
        self, *, id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="DELETE",
            path=f"/v1/betaGroups/{id}",
            auth_names=["itc-bearer-token"],
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncBetaGroupsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.relationships = AsyncRelationshipsClient(base_client=self._base_client)
        self.app = AsyncAppClient(base_client=self._base_client)
        self.beta_testers = AsyncBetaTestersClient(base_client=self._base_client)
        self.builds = AsyncBuildsClient(base_client=self._base_client)
        self.metrics = AsyncMetricsClient(base_client=self._base_client)

    # register async api methods (keep comment for code generation)
    async def create(
        self,
        *,
        data: params.BetaGroupCreateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.BetaGroupResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerBetaGroupCreateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="POST",
            path="/v1/betaGroups",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.BetaGroupResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def patch(
        self,
        *,
        data: params.BetaGroupUpdateRequest,
        id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.BetaGroupResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerBetaGroupUpdateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="PATCH",
            path=f"/v1/betaGroups/{id}",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.BetaGroupResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def get(
        self,
        *,
        id: str,
        fields_apps: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "alternativeDistributionKey",
                    "analyticsReportRequests",
                    "appAvailability",
                    "appClips",
                    "appCustomProductPages",
                    "appEncryptionDeclarations",
                    "appEvents",
                    "appInfos",
                    "appPricePoints",
                    "appPriceSchedule",
                    "appStoreVersionExperimentsV2",
                    "appStoreVersions",
                    "betaAppLocalizations",
                    "betaAppReviewDetail",
                    "betaGroups",
                    "betaLicenseAgreement",
                    "betaTesters",
                    "builds",
                    "bundleId",
                    "ciProduct",
                    "contentRightsDeclaration",
                    "customerReviews",
                    "endUserLicenseAgreement",
                    "gameCenterDetail",
                    "gameCenterEnabledVersions",
                    "inAppPurchases",
                    "inAppPurchasesV2",
                    "isOrEverWasMadeForKids",
                    "marketplaceSearchDetail",
                    "name",
                    "perfPowerMetrics",
                    "preOrder",
                    "preReleaseVersions",
                    "primaryLocale",
                    "promotedPurchases",
                    "reviewSubmissions",
                    "sku",
                    "subscriptionGracePeriod",
                    "subscriptionGroups",
                    "subscriptionStatusUrl",
                    "subscriptionStatusUrlForSandbox",
                    "subscriptionStatusUrlVersion",
                    "subscriptionStatusUrlVersionForSandbox",
                ]
            ]
        ] = None,
        fields_beta_groups: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "betaTesters",
                    "builds",
                    "createdDate",
                    "feedbackEnabled",
                    "hasAccessToAllBuilds",
                    "iosBuildsAvailableForAppleSiliconMac",
                    "isInternalGroup",
                    "name",
                    "publicLink",
                    "publicLinkEnabled",
                    "publicLinkId",
                    "publicLinkLimit",
                    "publicLinkLimitEnabled",
                ]
            ]
        ] = None,
        fields_beta_testers: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "apps",
                    "betaGroups",
                    "builds",
                    "email",
                    "firstName",
                    "inviteType",
                    "lastName",
                    "state",
                ]
            ]
        ] = None,
        fields_builds: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "appEncryptionDeclaration",
                    "appStoreVersion",
                    "betaAppReviewSubmission",
                    "betaBuildLocalizations",
                    "betaGroups",
                    "buildAudienceType",
                    "buildBetaDetail",
                    "buildBundles",
                    "computedMinMacOsVersion",
                    "diagnosticSignatures",
                    "expirationDate",
                    "expired",
                    "iconAssetToken",
                    "icons",
                    "individualTesters",
                    "lsMinimumSystemVersion",
                    "minOsVersion",
                    "perfPowerMetrics",
                    "preReleaseVersion",
                    "processingState",
                    "uploadedDate",
                    "usesNonExemptEncryption",
                    "version",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[typing_extensions.Literal["app", "betaTesters", "builds"]]
        ] = None,
        limit_beta_testers: typing.Optional[int] = None,
        limit_builds: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.BetaGroupResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_apps is not None:
            _query["fields[apps]"] = encode_param(fields_apps, False)
        if fields_beta_groups is not None:
            _query["fields[betaGroups]"] = encode_param(fields_beta_groups, False)
        if fields_beta_testers is not None:
            _query["fields[betaTesters]"] = encode_param(fields_beta_testers, False)
        if fields_builds is not None:
            _query["fields[builds]"] = encode_param(fields_builds, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit_beta_testers is not None:
            _query["limit[betaTesters]"] = encode_param(limit_beta_testers, False)
        if limit_builds is not None:
            _query["limit[builds]"] = encode_param(limit_builds, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v1/betaGroups/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.BetaGroupResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def list(
        self,
        *,
        fields_apps: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "alternativeDistributionKey",
                    "analyticsReportRequests",
                    "appAvailability",
                    "appClips",
                    "appCustomProductPages",
                    "appEncryptionDeclarations",
                    "appEvents",
                    "appInfos",
                    "appPricePoints",
                    "appPriceSchedule",
                    "appStoreVersionExperimentsV2",
                    "appStoreVersions",
                    "betaAppLocalizations",
                    "betaAppReviewDetail",
                    "betaGroups",
                    "betaLicenseAgreement",
                    "betaTesters",
                    "builds",
                    "bundleId",
                    "ciProduct",
                    "contentRightsDeclaration",
                    "customerReviews",
                    "endUserLicenseAgreement",
                    "gameCenterDetail",
                    "gameCenterEnabledVersions",
                    "inAppPurchases",
                    "inAppPurchasesV2",
                    "isOrEverWasMadeForKids",
                    "marketplaceSearchDetail",
                    "name",
                    "perfPowerMetrics",
                    "preOrder",
                    "preReleaseVersions",
                    "primaryLocale",
                    "promotedPurchases",
                    "reviewSubmissions",
                    "sku",
                    "subscriptionGracePeriod",
                    "subscriptionGroups",
                    "subscriptionStatusUrl",
                    "subscriptionStatusUrlForSandbox",
                    "subscriptionStatusUrlVersion",
                    "subscriptionStatusUrlVersionForSandbox",
                ]
            ]
        ] = None,
        fields_beta_groups: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "betaTesters",
                    "builds",
                    "createdDate",
                    "feedbackEnabled",
                    "hasAccessToAllBuilds",
                    "iosBuildsAvailableForAppleSiliconMac",
                    "isInternalGroup",
                    "name",
                    "publicLink",
                    "publicLinkEnabled",
                    "publicLinkId",
                    "publicLinkLimit",
                    "publicLinkLimitEnabled",
                ]
            ]
        ] = None,
        fields_beta_testers: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "apps",
                    "betaGroups",
                    "builds",
                    "email",
                    "firstName",
                    "inviteType",
                    "lastName",
                    "state",
                ]
            ]
        ] = None,
        fields_builds: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "appEncryptionDeclaration",
                    "appStoreVersion",
                    "betaAppReviewSubmission",
                    "betaBuildLocalizations",
                    "betaGroups",
                    "buildAudienceType",
                    "buildBetaDetail",
                    "buildBundles",
                    "computedMinMacOsVersion",
                    "diagnosticSignatures",
                    "expirationDate",
                    "expired",
                    "iconAssetToken",
                    "icons",
                    "individualTesters",
                    "lsMinimumSystemVersion",
                    "minOsVersion",
                    "perfPowerMetrics",
                    "preReleaseVersion",
                    "processingState",
                    "uploadedDate",
                    "usesNonExemptEncryption",
                    "version",
                ]
            ]
        ] = None,
        filter_app: typing.Optional[typing.List[str]] = None,
        filter_builds: typing.Optional[typing.List[str]] = None,
        filter_id: typing.Optional[typing.List[str]] = None,
        filter_is_internal_group: typing.Optional[typing.List[str]] = None,
        filter_name: typing.Optional[typing.List[str]] = None,
        filter_public_link_enabled: typing.Optional[typing.List[str]] = None,
        filter_public_link_limit_enabled: typing.Optional[typing.List[str]] = None,
        filter_public_link: typing.Optional[typing.List[str]] = None,
        include: typing.Optional[
            typing.List[typing_extensions.Literal["app", "betaTesters", "builds"]]
        ] = None,
        limit: typing.Optional[int] = None,
        limit_beta_testers: typing.Optional[int] = None,
        limit_builds: typing.Optional[int] = None,
        sort: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "createdDate",
                    "-createdDate",
                    "name",
                    "-name",
                    "publicLinkEnabled",
                    "-publicLinkEnabled",
                    "publicLinkLimit",
                    "-publicLinkLimit",
                ]
            ]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.BetaGroupsResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_apps is not None:
            _query["fields[apps]"] = encode_param(fields_apps, False)
        if fields_beta_groups is not None:
            _query["fields[betaGroups]"] = encode_param(fields_beta_groups, False)
        if fields_beta_testers is not None:
            _query["fields[betaTesters]"] = encode_param(fields_beta_testers, False)
        if fields_builds is not None:
            _query["fields[builds]"] = encode_param(fields_builds, False)
        if filter_app is not None:
            _query["filter[app]"] = encode_param(filter_app, False)
        if filter_builds is not None:
            _query["filter[builds]"] = encode_param(filter_builds, False)
        if filter_id is not None:
            _query["filter[id]"] = encode_param(filter_id, False)
        if filter_is_internal_group is not None:
            _query["filter[isInternalGroup]"] = encode_param(
                filter_is_internal_group, False
            )
        if filter_name is not None:
            _query["filter[name]"] = encode_param(filter_name, False)
        if filter_public_link_enabled is not None:
            _query["filter[publicLinkEnabled]"] = encode_param(
                filter_public_link_enabled, False
            )
        if filter_public_link_limit_enabled is not None:
            _query["filter[publicLinkLimitEnabled]"] = encode_param(
                filter_public_link_limit_enabled, False
            )
        if filter_public_link is not None:
            _query["filter[publicLink]"] = encode_param(filter_public_link, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if limit_beta_testers is not None:
            _query["limit[betaTesters]"] = encode_param(limit_beta_testers, False)
        if limit_builds is not None:
            _query["limit[builds]"] = encode_param(limit_builds, False)
        if sort is not None:
            _query["sort"] = encode_param(sort, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path="/v1/betaGroups",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.BetaGroupsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def delete(
        self, *, id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="DELETE",
            path=f"/v1/betaGroups/{id}",
            auth_names=["itc-bearer-token"],
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
