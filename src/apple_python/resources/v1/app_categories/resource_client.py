"""File Generated by Sideko (sideko.dev)"""

from apple_python.core import (
    QueryParams,
    RequestOptions,
    SyncBaseClient,
    encode_param,
    AsyncBaseClient,
    default_request_options,
)
from apple_python.resources.v1.app_categories.parent import (
    AsyncParentClient,
    ParentClient,
)
from apple_python.resources.v1.app_categories.subcategories import (
    SubcategoriesClient,
    AsyncSubcategoriesClient,
)
import typing
import typing_extensions
from apple_python.types.v1.app_categories import models


class AppCategoriesClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.parent = ParentClient(base_client=self._base_client)
        self.subcategories = SubcategoriesClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)
    def get(
        self,
        *,
        id: str,
        fields_app_categories: typing.Optional[
            typing.List[
                typing_extensions.Literal["parent", "platforms", "subcategories"]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[typing_extensions.Literal["parent", "subcategories"]]
        ] = None,
        limit_subcategories: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AppCategoryResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_app_categories is not None:
            _query["fields[appCategories]"] = encode_param(fields_app_categories, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit_subcategories is not None:
            _query["limit[subcategories]"] = encode_param(limit_subcategories, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v1/appCategories/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.AppCategoryResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def list(
        self,
        *,
        exists_parent: typing.Optional[bool] = None,
        fields_app_categories: typing.Optional[
            typing.List[
                typing_extensions.Literal["parent", "platforms", "subcategories"]
            ]
        ] = None,
        filter_platforms: typing.Optional[
            typing.List[
                typing_extensions.Literal["IOS", "MAC_OS", "TV_OS", "VISION_OS"]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[typing_extensions.Literal["parent", "subcategories"]]
        ] = None,
        limit: typing.Optional[int] = None,
        limit_subcategories: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AppCategoriesResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if exists_parent is not None:
            _query["exists[parent]"] = encode_param(exists_parent, False)
        if fields_app_categories is not None:
            _query["fields[appCategories]"] = encode_param(fields_app_categories, False)
        if filter_platforms is not None:
            _query["filter[platforms]"] = encode_param(filter_platforms, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if limit_subcategories is not None:
            _query["limit[subcategories]"] = encode_param(limit_subcategories, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path="/v1/appCategories",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.AppCategoriesResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncAppCategoriesClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.parent = AsyncParentClient(base_client=self._base_client)
        self.subcategories = AsyncSubcategoriesClient(base_client=self._base_client)

    # register async api methods (keep comment for code generation)
    async def get(
        self,
        *,
        id: str,
        fields_app_categories: typing.Optional[
            typing.List[
                typing_extensions.Literal["parent", "platforms", "subcategories"]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[typing_extensions.Literal["parent", "subcategories"]]
        ] = None,
        limit_subcategories: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AppCategoryResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_app_categories is not None:
            _query["fields[appCategories]"] = encode_param(fields_app_categories, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit_subcategories is not None:
            _query["limit[subcategories]"] = encode_param(limit_subcategories, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v1/appCategories/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.AppCategoryResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def list(
        self,
        *,
        exists_parent: typing.Optional[bool] = None,
        fields_app_categories: typing.Optional[
            typing.List[
                typing_extensions.Literal["parent", "platforms", "subcategories"]
            ]
        ] = None,
        filter_platforms: typing.Optional[
            typing.List[
                typing_extensions.Literal["IOS", "MAC_OS", "TV_OS", "VISION_OS"]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[typing_extensions.Literal["parent", "subcategories"]]
        ] = None,
        limit: typing.Optional[int] = None,
        limit_subcategories: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AppCategoriesResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if exists_parent is not None:
            _query["exists[parent]"] = encode_param(exists_parent, False)
        if fields_app_categories is not None:
            _query["fields[appCategories]"] = encode_param(fields_app_categories, False)
        if filter_platforms is not None:
            _query["filter[platforms]"] = encode_param(filter_platforms, False)
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit is not None:
            _query["limit"] = encode_param(limit, False)
        if limit_subcategories is not None:
            _query["limit[subcategories]"] = encode_param(limit_subcategories, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path="/v1/appCategories",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.AppCategoriesResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
