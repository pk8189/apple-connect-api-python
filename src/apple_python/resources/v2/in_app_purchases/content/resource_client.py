"""File Generated by Sideko (sideko.dev)"""

from apple_python.core import (
    AsyncBaseClient,
    default_request_options,
    encode_param,
    QueryParams,
    RequestOptions,
    SyncBaseClient,
)
import typing
import typing_extensions
from apple_python.types.v2.in_app_purchases.content import models


class ContentClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def list(
        self,
        *,
        id: str,
        fields_in_app_purchase_contents: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "fileName", "fileSize", "inAppPurchaseV2", "lastModifiedDate", "url"
                ]
            ]
        ] = None,
        fields_in_app_purchases: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "appStoreReviewScreenshot",
                    "content",
                    "contentHosting",
                    "familySharable",
                    "iapPriceSchedule",
                    "inAppPurchaseAvailability",
                    "inAppPurchaseLocalizations",
                    "inAppPurchaseType",
                    "name",
                    "pricePoints",
                    "productId",
                    "promotedPurchase",
                    "reviewNote",
                    "state",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[typing_extensions.Literal["inAppPurchaseV2"]]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.InAppPurchaseContentResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_in_app_purchase_contents is not None:
            _query["fields[inAppPurchaseContents]"] = encode_param(
                fields_in_app_purchase_contents, False
            )
        if fields_in_app_purchases is not None:
            _query["fields[inAppPurchases]"] = encode_param(
                fields_in_app_purchases, False
            )
        if include is not None:
            _query["include"] = encode_param(include, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v2/inAppPurchases/{id}/content",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.InAppPurchaseContentResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncContentClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def list(
        self,
        *,
        id: str,
        fields_in_app_purchase_contents: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "fileName", "fileSize", "inAppPurchaseV2", "lastModifiedDate", "url"
                ]
            ]
        ] = None,
        fields_in_app_purchases: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "appStoreReviewScreenshot",
                    "content",
                    "contentHosting",
                    "familySharable",
                    "iapPriceSchedule",
                    "inAppPurchaseAvailability",
                    "inAppPurchaseLocalizations",
                    "inAppPurchaseType",
                    "name",
                    "pricePoints",
                    "productId",
                    "promotedPurchase",
                    "reviewNote",
                    "state",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[typing_extensions.Literal["inAppPurchaseV2"]]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.InAppPurchaseContentResponse:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_in_app_purchase_contents is not None:
            _query["fields[inAppPurchaseContents]"] = encode_param(
                fields_in_app_purchase_contents, False
            )
        if fields_in_app_purchases is not None:
            _query["fields[inAppPurchases]"] = encode_param(
                fields_in_app_purchases, False
            )
        if include is not None:
            _query["include"] = encode_param(include, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v2/inAppPurchases/{id}/content",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.InAppPurchaseContentResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
