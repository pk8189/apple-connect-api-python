"""File Generated by Sideko (sideko.dev)"""

from apple_python.core import (
    RequestOptions,
    encode_param,
    AsyncBaseClient,
    SyncBaseClient,
    to_encodable,
    QueryParams,
    default_request_options,
)
from apple_python.resources.v2.in_app_purchases.app_store_review_screenshot import (
    AppStoreReviewScreenshotClient,
    AsyncAppStoreReviewScreenshotClient,
)
from apple_python.resources.v2.in_app_purchases.content import (
    ContentClient,
    AsyncContentClient,
)
from apple_python.resources.v2.in_app_purchases.iap_price_schedule import (
    IapPriceScheduleClient,
    AsyncIapPriceScheduleClient,
)
from apple_python.resources.v2.in_app_purchases.in_app_purchase_availability import (
    InAppPurchaseAvailabilityClient,
    AsyncInAppPurchaseAvailabilityClient,
)
from apple_python.resources.v2.in_app_purchases.in_app_purchase_localizations import (
    AsyncInAppPurchaseLocalizationsClient,
    InAppPurchaseLocalizationsClient,
)
from apple_python.resources.v2.in_app_purchases.price_points import (
    AsyncPricePointsClient,
    PricePointsClient,
)
from apple_python.resources.v2.in_app_purchases.promoted_purchase import (
    AsyncPromotedPurchaseClient,
    PromotedPurchaseClient,
)
import typing
import typing_extensions
from apple_python.types.v2.in_app_purchases import models, params


class InAppPurchasesClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.app_store_review_screenshot = AppStoreReviewScreenshotClient(
            base_client=self._base_client
        )
        self.content = ContentClient(base_client=self._base_client)
        self.iap_price_schedule = IapPriceScheduleClient(base_client=self._base_client)
        self.in_app_purchase_availability = InAppPurchaseAvailabilityClient(
            base_client=self._base_client
        )
        self.in_app_purchase_localizations = InAppPurchaseLocalizationsClient(
            base_client=self._base_client
        )
        self.price_points = PricePointsClient(base_client=self._base_client)
        self.promoted_purchase = PromotedPurchaseClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)
    def create(
        self,
        *,
        data: params.InAppPurchaseV2CreateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.InAppPurchaseV2Response:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerInAppPurchaseV2CreateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="POST",
            path="/v2/inAppPurchases",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.InAppPurchaseV2Response,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def patch(
        self,
        *,
        data: params.InAppPurchaseV2UpdateRequest,
        id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.InAppPurchaseV2Response:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerInAppPurchaseV2UpdateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="PATCH",
            path=f"/v2/inAppPurchases/{id}",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.InAppPurchaseV2Response,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def get(
        self,
        *,
        id: str,
        fields_in_app_purchase_app_store_review_screenshots: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "assetDeliveryState",
                    "assetToken",
                    "assetType",
                    "fileName",
                    "fileSize",
                    "imageAsset",
                    "inAppPurchaseV2",
                    "sourceFileChecksum",
                    "uploadOperations",
                    "uploaded",
                ]
            ]
        ] = None,
        fields_in_app_purchase_availabilities: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "availableInNewTerritories", "availableTerritories", "inAppPurchase"
                ]
            ]
        ] = None,
        fields_in_app_purchase_contents: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "fileName", "fileSize", "inAppPurchaseV2", "lastModifiedDate", "url"
                ]
            ]
        ] = None,
        fields_in_app_purchase_localizations: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "description", "inAppPurchaseV2", "locale", "name", "state"
                ]
            ]
        ] = None,
        fields_in_app_purchase_price_points: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "customerPrice", "inAppPurchaseV2", "proceeds", "territory"
                ]
            ]
        ] = None,
        fields_in_app_purchase_price_schedules: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "automaticPrices", "baseTerritory", "inAppPurchase", "manualPrices"
                ]
            ]
        ] = None,
        fields_in_app_purchases: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "appStoreReviewScreenshot",
                    "content",
                    "contentHosting",
                    "familySharable",
                    "iapPriceSchedule",
                    "inAppPurchaseAvailability",
                    "inAppPurchaseLocalizations",
                    "inAppPurchaseType",
                    "name",
                    "pricePoints",
                    "productId",
                    "promotedPurchase",
                    "reviewNote",
                    "state",
                ]
            ]
        ] = None,
        fields_promoted_purchases: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "enabled",
                    "inAppPurchaseV2",
                    "promotionImages",
                    "state",
                    "subscription",
                    "visibleForAllUsers",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appStoreReviewScreenshot",
                    "content",
                    "iapPriceSchedule",
                    "inAppPurchaseAvailability",
                    "inAppPurchaseLocalizations",
                    "pricePoints",
                    "promotedPurchase",
                ]
            ]
        ] = None,
        limit_in_app_purchase_localizations: typing.Optional[int] = None,
        limit_price_points: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.InAppPurchaseV2Response:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_in_app_purchase_app_store_review_screenshots is not None:
            _query["fields[inAppPurchaseAppStoreReviewScreenshots]"] = encode_param(
                fields_in_app_purchase_app_store_review_screenshots, False
            )
        if fields_in_app_purchase_availabilities is not None:
            _query["fields[inAppPurchaseAvailabilities]"] = encode_param(
                fields_in_app_purchase_availabilities, False
            )
        if fields_in_app_purchase_contents is not None:
            _query["fields[inAppPurchaseContents]"] = encode_param(
                fields_in_app_purchase_contents, False
            )
        if fields_in_app_purchase_localizations is not None:
            _query["fields[inAppPurchaseLocalizations]"] = encode_param(
                fields_in_app_purchase_localizations, False
            )
        if fields_in_app_purchase_price_points is not None:
            _query["fields[inAppPurchasePricePoints]"] = encode_param(
                fields_in_app_purchase_price_points, False
            )
        if fields_in_app_purchase_price_schedules is not None:
            _query["fields[inAppPurchasePriceSchedules]"] = encode_param(
                fields_in_app_purchase_price_schedules, False
            )
        if fields_in_app_purchases is not None:
            _query["fields[inAppPurchases]"] = encode_param(
                fields_in_app_purchases, False
            )
        if fields_promoted_purchases is not None:
            _query["fields[promotedPurchases]"] = encode_param(
                fields_promoted_purchases, False
            )
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit_in_app_purchase_localizations is not None:
            _query["limit[inAppPurchaseLocalizations]"] = encode_param(
                limit_in_app_purchase_localizations, False
            )
        if limit_price_points is not None:
            _query["limit[pricePoints]"] = encode_param(limit_price_points, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v2/inAppPurchases/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.InAppPurchaseV2Response,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def delete(
        self, *, id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="DELETE",
            path=f"/v2/inAppPurchases/{id}",
            auth_names=["itc-bearer-token"],
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncInAppPurchasesClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.app_store_review_screenshot = AsyncAppStoreReviewScreenshotClient(
            base_client=self._base_client
        )
        self.content = AsyncContentClient(base_client=self._base_client)
        self.iap_price_schedule = AsyncIapPriceScheduleClient(
            base_client=self._base_client
        )
        self.in_app_purchase_availability = AsyncInAppPurchaseAvailabilityClient(
            base_client=self._base_client
        )
        self.in_app_purchase_localizations = AsyncInAppPurchaseLocalizationsClient(
            base_client=self._base_client
        )
        self.price_points = AsyncPricePointsClient(base_client=self._base_client)
        self.promoted_purchase = AsyncPromotedPurchaseClient(
            base_client=self._base_client
        )

    # register async api methods (keep comment for code generation)
    async def create(
        self,
        *,
        data: params.InAppPurchaseV2CreateRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.InAppPurchaseV2Response:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerInAppPurchaseV2CreateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="POST",
            path="/v2/inAppPurchases",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.InAppPurchaseV2Response,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def patch(
        self,
        *,
        data: params.InAppPurchaseV2UpdateRequest,
        id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.InAppPurchaseV2Response:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=params._SerializerInAppPurchaseV2UpdateRequest
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="PATCH",
            path=f"/v2/inAppPurchases/{id}",
            auth_names=["itc-bearer-token"],
            json=_json,
            cast_to=models.InAppPurchaseV2Response,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def get(
        self,
        *,
        id: str,
        fields_in_app_purchase_app_store_review_screenshots: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "assetDeliveryState",
                    "assetToken",
                    "assetType",
                    "fileName",
                    "fileSize",
                    "imageAsset",
                    "inAppPurchaseV2",
                    "sourceFileChecksum",
                    "uploadOperations",
                    "uploaded",
                ]
            ]
        ] = None,
        fields_in_app_purchase_availabilities: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "availableInNewTerritories", "availableTerritories", "inAppPurchase"
                ]
            ]
        ] = None,
        fields_in_app_purchase_contents: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "fileName", "fileSize", "inAppPurchaseV2", "lastModifiedDate", "url"
                ]
            ]
        ] = None,
        fields_in_app_purchase_localizations: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "description", "inAppPurchaseV2", "locale", "name", "state"
                ]
            ]
        ] = None,
        fields_in_app_purchase_price_points: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "customerPrice", "inAppPurchaseV2", "proceeds", "territory"
                ]
            ]
        ] = None,
        fields_in_app_purchase_price_schedules: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "automaticPrices", "baseTerritory", "inAppPurchase", "manualPrices"
                ]
            ]
        ] = None,
        fields_in_app_purchases: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "appStoreReviewScreenshot",
                    "content",
                    "contentHosting",
                    "familySharable",
                    "iapPriceSchedule",
                    "inAppPurchaseAvailability",
                    "inAppPurchaseLocalizations",
                    "inAppPurchaseType",
                    "name",
                    "pricePoints",
                    "productId",
                    "promotedPurchase",
                    "reviewNote",
                    "state",
                ]
            ]
        ] = None,
        fields_promoted_purchases: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app",
                    "enabled",
                    "inAppPurchaseV2",
                    "promotionImages",
                    "state",
                    "subscription",
                    "visibleForAllUsers",
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "appStoreReviewScreenshot",
                    "content",
                    "iapPriceSchedule",
                    "inAppPurchaseAvailability",
                    "inAppPurchaseLocalizations",
                    "pricePoints",
                    "promotedPurchase",
                ]
            ]
        ] = None,
        limit_in_app_purchase_localizations: typing.Optional[int] = None,
        limit_price_points: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.InAppPurchaseV2Response:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_in_app_purchase_app_store_review_screenshots is not None:
            _query["fields[inAppPurchaseAppStoreReviewScreenshots]"] = encode_param(
                fields_in_app_purchase_app_store_review_screenshots, False
            )
        if fields_in_app_purchase_availabilities is not None:
            _query["fields[inAppPurchaseAvailabilities]"] = encode_param(
                fields_in_app_purchase_availabilities, False
            )
        if fields_in_app_purchase_contents is not None:
            _query["fields[inAppPurchaseContents]"] = encode_param(
                fields_in_app_purchase_contents, False
            )
        if fields_in_app_purchase_localizations is not None:
            _query["fields[inAppPurchaseLocalizations]"] = encode_param(
                fields_in_app_purchase_localizations, False
            )
        if fields_in_app_purchase_price_points is not None:
            _query["fields[inAppPurchasePricePoints]"] = encode_param(
                fields_in_app_purchase_price_points, False
            )
        if fields_in_app_purchase_price_schedules is not None:
            _query["fields[inAppPurchasePriceSchedules]"] = encode_param(
                fields_in_app_purchase_price_schedules, False
            )
        if fields_in_app_purchases is not None:
            _query["fields[inAppPurchases]"] = encode_param(
                fields_in_app_purchases, False
            )
        if fields_promoted_purchases is not None:
            _query["fields[promotedPurchases]"] = encode_param(
                fields_promoted_purchases, False
            )
        if include is not None:
            _query["include"] = encode_param(include, False)
        if limit_in_app_purchase_localizations is not None:
            _query["limit[inAppPurchaseLocalizations]"] = encode_param(
                limit_in_app_purchase_localizations, False
            )
        if limit_price_points is not None:
            _query["limit[pricePoints]"] = encode_param(limit_price_points, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v2/inAppPurchases/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.InAppPurchaseV2Response,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def delete(
        self, *, id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="DELETE",
            path=f"/v2/inAppPurchases/{id}",
            auth_names=["itc-bearer-token"],
            cast_to=type(None),
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
