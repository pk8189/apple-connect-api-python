"""File Generated by Sideko (sideko.dev)"""

from apple_python.core import (
    QueryParams,
    RequestOptions,
    AsyncBaseClient,
    SyncBaseClient,
    encode_param,
    default_request_options,
)
from apple_python.resources.v3.app_price_points.equalizations import (
    EqualizationsClient,
    AsyncEqualizationsClient,
)
import typing
import typing_extensions
from apple_python.types.v3.app_price_points import models


class AppPricePointsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.equalizations = EqualizationsClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)
    def get(
        self,
        *,
        id: str,
        fields_app_price_points: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app", "customerPrice", "equalizations", "proceeds", "territory"
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[typing_extensions.Literal["app", "territory"]]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AppPricePointV3Response:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_app_price_points is not None:
            _query["fields[appPricePoints]"] = encode_param(
                fields_app_price_points, False
            )
        if include is not None:
            _query["include"] = encode_param(include, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v3/appPricePoints/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.AppPricePointV3Response,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncAppPricePointsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.equalizations = AsyncEqualizationsClient(base_client=self._base_client)

    # register async api methods (keep comment for code generation)
    async def get(
        self,
        *,
        id: str,
        fields_app_price_points: typing.Optional[
            typing.List[
                typing_extensions.Literal[
                    "app", "customerPrice", "equalizations", "proceeds", "territory"
                ]
            ]
        ] = None,
        include: typing.Optional[
            typing.List[typing_extensions.Literal["app", "territory"]]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.AppPricePointV3Response:
        """
        no description available
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if fields_app_price_points is not None:
            _query["fields[appPricePoints]"] = encode_param(
                fields_app_price_points, False
            )
        if include is not None:
            _query["include"] = encode_param(include, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v3/appPricePoints/{id}",
            auth_names=["itc-bearer-token"],
            query_params=_query,
            cast_to=models.AppPricePointV3Response,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
