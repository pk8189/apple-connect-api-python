"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class AppAvailabilityV2CreateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    available_in_new_territories: typing_extensions.Required[bool]


class _SerializerAppAvailabilityV2CreateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for AppAvailabilityV2CreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    available_in_new_territories: bool = pydantic.Field(
        alias="availableInNewTerritories"
    )


class AppAvailabilityV2CreateRequestDataRelationshipsAppData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["apps"]]


class _SerializerAppAvailabilityV2CreateRequestDataRelationshipsAppData(
    pydantic.BaseModel
):
    """
    Serializer for AppAvailabilityV2CreateRequestDataRelationshipsAppData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["apps"] = pydantic.Field(alias="type")


class AppAvailabilityV2CreateRequestDataRelationshipsTerritoryAvailabilitiesDataItem(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["territoryAvailabilities"]
    ]


class _SerializerAppAvailabilityV2CreateRequestDataRelationshipsTerritoryAvailabilitiesDataItem(
    pydantic.BaseModel
):
    """
    Serializer for AppAvailabilityV2CreateRequestDataRelationshipsTerritoryAvailabilitiesDataItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["territoryAvailabilities"] = pydantic.Field(
        alias="type"
    )


class TerritoryAvailabilityInlineCreate(typing_extensions.TypedDict):
    """
    No description specified
    """

    id: typing_extensions.NotRequired[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["territoryAvailabilities"]
    ]


class _SerializerTerritoryAvailabilityInlineCreate(pydantic.BaseModel):
    """
    Serializer for TerritoryAvailabilityInlineCreate handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    type: typing_extensions.Literal["territoryAvailabilities"] = pydantic.Field(
        alias="type"
    )


class AppAvailabilityV2CreateRequestDataRelationshipsApp(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[
        AppAvailabilityV2CreateRequestDataRelationshipsAppData
    ]


class _SerializerAppAvailabilityV2CreateRequestDataRelationshipsApp(pydantic.BaseModel):
    """
    Serializer for AppAvailabilityV2CreateRequestDataRelationshipsApp handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAppAvailabilityV2CreateRequestDataRelationshipsAppData = (
        pydantic.Field(alias="data")
    )


class AppAvailabilityV2CreateRequestDataRelationshipsTerritoryAvailabilities(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        typing.List[
            AppAvailabilityV2CreateRequestDataRelationshipsTerritoryAvailabilitiesDataItem
        ]
    ]


class _SerializerAppAvailabilityV2CreateRequestDataRelationshipsTerritoryAvailabilities(
    pydantic.BaseModel
):
    """
    Serializer for AppAvailabilityV2CreateRequestDataRelationshipsTerritoryAvailabilities handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.List[
        _SerializerAppAvailabilityV2CreateRequestDataRelationshipsTerritoryAvailabilitiesDataItem
    ] = pydantic.Field(alias="data")


class AppAvailabilityV2CreateRequestDataRelationships(typing_extensions.TypedDict):
    """
    No description specified
    """

    app: typing_extensions.Required[AppAvailabilityV2CreateRequestDataRelationshipsApp]
    territory_availabilities: typing_extensions.Required[
        AppAvailabilityV2CreateRequestDataRelationshipsTerritoryAvailabilities
    ]


class _SerializerAppAvailabilityV2CreateRequestDataRelationships(pydantic.BaseModel):
    """
    Serializer for AppAvailabilityV2CreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    app: _SerializerAppAvailabilityV2CreateRequestDataRelationshipsApp = pydantic.Field(
        alias="app"
    )
    territory_availabilities: _SerializerAppAvailabilityV2CreateRequestDataRelationshipsTerritoryAvailabilities = pydantic.Field(
        alias="territoryAvailabilities"
    )


class AppAvailabilityV2CreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[AppAvailabilityV2CreateRequestDataAttributes]
    relationships: typing_extensions.Required[
        AppAvailabilityV2CreateRequestDataRelationships
    ]
    type: typing_extensions.Required[typing_extensions.Literal["appAvailabilities"]]


class _SerializerAppAvailabilityV2CreateRequestData(pydantic.BaseModel):
    """
    Serializer for AppAvailabilityV2CreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerAppAvailabilityV2CreateRequestDataAttributes = (
        pydantic.Field(alias="attributes")
    )
    relationships: _SerializerAppAvailabilityV2CreateRequestDataRelationships = (
        pydantic.Field(alias="relationships")
    )
    type: typing_extensions.Literal["appAvailabilities"] = pydantic.Field(alias="type")


class AppAvailabilityV2CreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[AppAvailabilityV2CreateRequestData]
    included: typing_extensions.NotRequired[
        typing.List[TerritoryAvailabilityInlineCreate]
    ]


class _SerializerAppAvailabilityV2CreateRequest(pydantic.BaseModel):
    """
    Serializer for AppAvailabilityV2CreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAppAvailabilityV2CreateRequestData = pydantic.Field(alias="data")
    included: typing.Optional[
        typing.List[_SerializerTerritoryAvailabilityInlineCreate]
    ] = pydantic.Field(alias="included", default=None)
