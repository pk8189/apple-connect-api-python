"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class ProfileCreateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    name: typing_extensions.Required[str]
    profile_type: typing_extensions.Required[
        typing_extensions.Literal[
            "IOS_APP_DEVELOPMENT",
            "IOS_APP_STORE",
            "IOS_APP_ADHOC",
            "IOS_APP_INHOUSE",
            "MAC_APP_DEVELOPMENT",
            "MAC_APP_STORE",
            "MAC_APP_DIRECT",
            "TVOS_APP_DEVELOPMENT",
            "TVOS_APP_STORE",
            "TVOS_APP_ADHOC",
            "TVOS_APP_INHOUSE",
            "MAC_CATALYST_APP_DEVELOPMENT",
            "MAC_CATALYST_APP_STORE",
            "MAC_CATALYST_APP_DIRECT",
        ]
    ]


class _SerializerProfileCreateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for ProfileCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    name: str = pydantic.Field(alias="name")
    profile_type: typing_extensions.Literal[
        "IOS_APP_DEVELOPMENT",
        "IOS_APP_STORE",
        "IOS_APP_ADHOC",
        "IOS_APP_INHOUSE",
        "MAC_APP_DEVELOPMENT",
        "MAC_APP_STORE",
        "MAC_APP_DIRECT",
        "TVOS_APP_DEVELOPMENT",
        "TVOS_APP_STORE",
        "TVOS_APP_ADHOC",
        "TVOS_APP_INHOUSE",
        "MAC_CATALYST_APP_DEVELOPMENT",
        "MAC_CATALYST_APP_STORE",
        "MAC_CATALYST_APP_DIRECT",
    ] = pydantic.Field(alias="profileType")


class ProfileCreateRequestDataRelationshipsBundleIdData(typing_extensions.TypedDict):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["bundleIds"]]


class _SerializerProfileCreateRequestDataRelationshipsBundleIdData(pydantic.BaseModel):
    """
    Serializer for ProfileCreateRequestDataRelationshipsBundleIdData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["bundleIds"] = pydantic.Field(alias="type")


class ProfileCreateRequestDataRelationshipsCertificatesDataItem(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["certificates"]]


class _SerializerProfileCreateRequestDataRelationshipsCertificatesDataItem(
    pydantic.BaseModel
):
    """
    Serializer for ProfileCreateRequestDataRelationshipsCertificatesDataItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["certificates"] = pydantic.Field(alias="type")


class ProfileCreateRequestDataRelationshipsDevicesDataItem(typing_extensions.TypedDict):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["devices"]]


class _SerializerProfileCreateRequestDataRelationshipsDevicesDataItem(
    pydantic.BaseModel
):
    """
    Serializer for ProfileCreateRequestDataRelationshipsDevicesDataItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["devices"] = pydantic.Field(alias="type")


class ProfileCreateRequestDataRelationshipsBundleId(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[ProfileCreateRequestDataRelationshipsBundleIdData]


class _SerializerProfileCreateRequestDataRelationshipsBundleId(pydantic.BaseModel):
    """
    Serializer for ProfileCreateRequestDataRelationshipsBundleId handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerProfileCreateRequestDataRelationshipsBundleIdData = pydantic.Field(
        alias="data"
    )


class ProfileCreateRequestDataRelationshipsCertificates(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[
        typing.List[ProfileCreateRequestDataRelationshipsCertificatesDataItem]
    ]


class _SerializerProfileCreateRequestDataRelationshipsCertificates(pydantic.BaseModel):
    """
    Serializer for ProfileCreateRequestDataRelationshipsCertificates handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.List[
        _SerializerProfileCreateRequestDataRelationshipsCertificatesDataItem
    ] = pydantic.Field(alias="data")


class ProfileCreateRequestDataRelationshipsDevices(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        typing.List[ProfileCreateRequestDataRelationshipsDevicesDataItem]
    ]


class _SerializerProfileCreateRequestDataRelationshipsDevices(pydantic.BaseModel):
    """
    Serializer for ProfileCreateRequestDataRelationshipsDevices handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        typing.List[_SerializerProfileCreateRequestDataRelationshipsDevicesDataItem]
    ] = pydantic.Field(alias="data", default=None)


class ProfileCreateRequestDataRelationships(typing_extensions.TypedDict):
    """
    No description specified
    """

    bundle_id: typing_extensions.Required[ProfileCreateRequestDataRelationshipsBundleId]
    certificates: typing_extensions.Required[
        ProfileCreateRequestDataRelationshipsCertificates
    ]
    devices: typing_extensions.NotRequired[ProfileCreateRequestDataRelationshipsDevices]


class _SerializerProfileCreateRequestDataRelationships(pydantic.BaseModel):
    """
    Serializer for ProfileCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    bundle_id: _SerializerProfileCreateRequestDataRelationshipsBundleId = (
        pydantic.Field(alias="bundleId")
    )
    certificates: _SerializerProfileCreateRequestDataRelationshipsCertificates = (
        pydantic.Field(alias="certificates")
    )
    devices: typing.Optional[
        _SerializerProfileCreateRequestDataRelationshipsDevices
    ] = pydantic.Field(alias="devices", default=None)


class ProfileCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[ProfileCreateRequestDataAttributes]
    relationships: typing_extensions.Required[ProfileCreateRequestDataRelationships]
    type: typing_extensions.Required[typing_extensions.Literal["profiles"]]


class _SerializerProfileCreateRequestData(pydantic.BaseModel):
    """
    Serializer for ProfileCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerProfileCreateRequestDataAttributes = pydantic.Field(
        alias="attributes"
    )
    relationships: _SerializerProfileCreateRequestDataRelationships = pydantic.Field(
        alias="relationships"
    )
    type: typing_extensions.Literal["profiles"] = pydantic.Field(alias="type")


class ProfileCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[ProfileCreateRequestData]


class _SerializerProfileCreateRequest(pydantic.BaseModel):
    """
    Serializer for ProfileCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerProfileCreateRequestData = pydantic.Field(alias="data")
