"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class MarketplaceSearchDetailUpdateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    catalog_url: typing_extensions.NotRequired[str]


class _SerializerMarketplaceSearchDetailUpdateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for MarketplaceSearchDetailUpdateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    catalog_url: typing.Optional[str] = pydantic.Field(alias="catalogUrl", default=None)


class MarketplaceSearchDetailCreateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    catalog_url: typing_extensions.Required[str]


class _SerializerMarketplaceSearchDetailCreateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for MarketplaceSearchDetailCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    catalog_url: str = pydantic.Field(alias="catalogUrl")


class MarketplaceSearchDetailCreateRequestDataRelationshipsAppData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["apps"]]


class _SerializerMarketplaceSearchDetailCreateRequestDataRelationshipsAppData(
    pydantic.BaseModel
):
    """
    Serializer for MarketplaceSearchDetailCreateRequestDataRelationshipsAppData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["apps"] = pydantic.Field(alias="type")


class MarketplaceSearchDetailUpdateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[
        MarketplaceSearchDetailUpdateRequestDataAttributes
    ]
    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["marketplaceSearchDetails"]
    ]


class _SerializerMarketplaceSearchDetailUpdateRequestData(pydantic.BaseModel):
    """
    Serializer for MarketplaceSearchDetailUpdateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[
        _SerializerMarketplaceSearchDetailUpdateRequestDataAttributes
    ] = pydantic.Field(alias="attributes", default=None)
    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["marketplaceSearchDetails"] = pydantic.Field(
        alias="type"
    )


class MarketplaceSearchDetailCreateRequestDataRelationshipsApp(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        MarketplaceSearchDetailCreateRequestDataRelationshipsAppData
    ]


class _SerializerMarketplaceSearchDetailCreateRequestDataRelationshipsApp(
    pydantic.BaseModel
):
    """
    Serializer for MarketplaceSearchDetailCreateRequestDataRelationshipsApp handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerMarketplaceSearchDetailCreateRequestDataRelationshipsAppData = (
        pydantic.Field(alias="data")
    )


class MarketplaceSearchDetailUpdateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[MarketplaceSearchDetailUpdateRequestData]


class _SerializerMarketplaceSearchDetailUpdateRequest(pydantic.BaseModel):
    """
    Serializer for MarketplaceSearchDetailUpdateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerMarketplaceSearchDetailUpdateRequestData = pydantic.Field(
        alias="data"
    )


class MarketplaceSearchDetailCreateRequestDataRelationships(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    app: typing_extensions.Required[
        MarketplaceSearchDetailCreateRequestDataRelationshipsApp
    ]


class _SerializerMarketplaceSearchDetailCreateRequestDataRelationships(
    pydantic.BaseModel
):
    """
    Serializer for MarketplaceSearchDetailCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    app: _SerializerMarketplaceSearchDetailCreateRequestDataRelationshipsApp = (
        pydantic.Field(alias="app")
    )


class MarketplaceSearchDetailCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[
        MarketplaceSearchDetailCreateRequestDataAttributes
    ]
    relationships: typing_extensions.Required[
        MarketplaceSearchDetailCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["marketplaceSearchDetails"]
    ]


class _SerializerMarketplaceSearchDetailCreateRequestData(pydantic.BaseModel):
    """
    Serializer for MarketplaceSearchDetailCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerMarketplaceSearchDetailCreateRequestDataAttributes = (
        pydantic.Field(alias="attributes")
    )
    relationships: _SerializerMarketplaceSearchDetailCreateRequestDataRelationships = (
        pydantic.Field(alias="relationships")
    )
    type: typing_extensions.Literal["marketplaceSearchDetails"] = pydantic.Field(
        alias="type"
    )


class MarketplaceSearchDetailCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[MarketplaceSearchDetailCreateRequestData]


class _SerializerMarketplaceSearchDetailCreateRequest(pydantic.BaseModel):
    """
    Serializer for MarketplaceSearchDetailCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerMarketplaceSearchDetailCreateRequestData = pydantic.Field(
        alias="data"
    )
