"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class AlternativeDistributionDomainCreateRequestDataAttributes(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    domain: typing_extensions.Required[str]
    reference_name: typing_extensions.Required[str]


class _SerializerAlternativeDistributionDomainCreateRequestDataAttributes(
    pydantic.BaseModel
):
    """
    Serializer for AlternativeDistributionDomainCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    domain: str = pydantic.Field(alias="domain")
    reference_name: str = pydantic.Field(alias="referenceName")


class AlternativeDistributionDomainCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[
        AlternativeDistributionDomainCreateRequestDataAttributes
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["alternativeDistributionDomains"]
    ]


class _SerializerAlternativeDistributionDomainCreateRequestData(pydantic.BaseModel):
    """
    Serializer for AlternativeDistributionDomainCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerAlternativeDistributionDomainCreateRequestDataAttributes = (
        pydantic.Field(alias="attributes")
    )
    type: typing_extensions.Literal["alternativeDistributionDomains"] = pydantic.Field(
        alias="type"
    )


class AlternativeDistributionDomainCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[AlternativeDistributionDomainCreateRequestData]


class _SerializerAlternativeDistributionDomainCreateRequest(pydantic.BaseModel):
    """
    Serializer for AlternativeDistributionDomainCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAlternativeDistributionDomainCreateRequestData = pydantic.Field(
        alias="data"
    )
