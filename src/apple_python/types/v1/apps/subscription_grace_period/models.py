"""File Generated by Sideko (sideko.dev)"""

import io
import typing
import typing_extensions
from pydantic import (
    BaseModel as _PydanticBaseModel,
    Field as _PydanticField,
    ConfigDict as _PydanticConfigDict,
)

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class SubscriptionGracePeriodAttributes(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    duration: typing.Optional[
        typing_extensions.Literal["THREE_DAYS", "SIXTEEN_DAYS", "TWENTY_EIGHT_DAYS"]
    ] = _PydanticField(alias="duration", default=None)
    opt_in: typing.Optional[bool] = _PydanticField(alias="optIn", default=None)
    renewal_type: typing.Optional[
        typing_extensions.Literal["ALL_RENEWALS", "PAID_TO_PAID_ONLY"]
    ] = _PydanticField(alias="renewalType", default=None)
    sandbox_opt_in: typing.Optional[bool] = _PydanticField(
        alias="sandboxOptIn", default=None
    )


class ResourceLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class DocumentLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    self: str = _PydanticField(alias="self")


class SubscriptionGracePeriod(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    attributes: typing.Optional[SubscriptionGracePeriodAttributes] = _PydanticField(
        alias="attributes", default=None
    )
    id: str = _PydanticField(alias="id")
    links: typing.Optional[ResourceLinks] = _PydanticField(alias="links", default=None)
    type: typing_extensions.Literal["subscriptionGracePeriods"] = _PydanticField(
        alias="type"
    )


class SubscriptionGracePeriodResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: SubscriptionGracePeriod = _PydanticField(alias="data")
    links: DocumentLinks = _PydanticField(alias="links")
