"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class AppClipAdvancedExperienceUpdateRequestDataAttributesPlaceDisplayPointCoordinates(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    latitude: typing_extensions.NotRequired[float]
    longitude: typing_extensions.NotRequired[float]


class _SerializerAppClipAdvancedExperienceUpdateRequestDataAttributesPlaceDisplayPointCoordinates(
    pydantic.BaseModel
):
    """
    Serializer for AppClipAdvancedExperienceUpdateRequestDataAttributesPlaceDisplayPointCoordinates handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    latitude: typing.Optional[float] = pydantic.Field(alias="latitude", default=None)
    longitude: typing.Optional[float] = pydantic.Field(alias="longitude", default=None)


class AppClipAdvancedExperienceUpdateRequestDataAttributesPlaceMainAddressStructuredAddress(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    country_code: typing_extensions.NotRequired[str]
    floor: typing_extensions.NotRequired[str]
    locality: typing_extensions.NotRequired[str]
    neighborhood: typing_extensions.NotRequired[str]
    postal_code: typing_extensions.NotRequired[str]
    state_province: typing_extensions.NotRequired[str]
    street_address: typing_extensions.NotRequired[typing.List[str]]


class _SerializerAppClipAdvancedExperienceUpdateRequestDataAttributesPlaceMainAddressStructuredAddress(
    pydantic.BaseModel
):
    """
    Serializer for AppClipAdvancedExperienceUpdateRequestDataAttributesPlaceMainAddressStructuredAddress handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    country_code: typing.Optional[str] = pydantic.Field(
        alias="countryCode", default=None
    )
    floor: typing.Optional[str] = pydantic.Field(alias="floor", default=None)
    locality: typing.Optional[str] = pydantic.Field(alias="locality", default=None)
    neighborhood: typing.Optional[str] = pydantic.Field(
        alias="neighborhood", default=None
    )
    postal_code: typing.Optional[str] = pydantic.Field(alias="postalCode", default=None)
    state_province: typing.Optional[str] = pydantic.Field(
        alias="stateProvince", default=None
    )
    street_address: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="streetAddress", default=None
    )


class AppClipAdvancedExperienceUpdateRequestDataAttributesPlacePhoneNumber(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    intent: typing_extensions.NotRequired[str]
    number: typing_extensions.NotRequired[str]
    type: typing_extensions.NotRequired[
        typing_extensions.Literal["FAX", "LANDLINE", "MOBILE", "TOLLFREE"]
    ]


class _SerializerAppClipAdvancedExperienceUpdateRequestDataAttributesPlacePhoneNumber(
    pydantic.BaseModel
):
    """
    Serializer for AppClipAdvancedExperienceUpdateRequestDataAttributesPlacePhoneNumber handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    intent: typing.Optional[str] = pydantic.Field(alias="intent", default=None)
    number: typing.Optional[str] = pydantic.Field(alias="number", default=None)
    type: typing.Optional[
        typing_extensions.Literal["FAX", "LANDLINE", "MOBILE", "TOLLFREE"]
    ] = pydantic.Field(alias="type", default=None)


class AppClipAdvancedExperienceUpdateRequestDataRelationshipsAppClipData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["appClips"]]


class _SerializerAppClipAdvancedExperienceUpdateRequestDataRelationshipsAppClipData(
    pydantic.BaseModel
):
    """
    Serializer for AppClipAdvancedExperienceUpdateRequestDataRelationshipsAppClipData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["appClips"] = pydantic.Field(alias="type")


class AppClipAdvancedExperienceUpdateRequestDataRelationshipsHeaderImageData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["appClipAdvancedExperienceImages"]
    ]


class _SerializerAppClipAdvancedExperienceUpdateRequestDataRelationshipsHeaderImageData(
    pydantic.BaseModel
):
    """
    Serializer for AppClipAdvancedExperienceUpdateRequestDataRelationshipsHeaderImageData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["appClipAdvancedExperienceImages"] = pydantic.Field(
        alias="type"
    )


class AppClipAdvancedExperienceUpdateRequestDataRelationshipsLocalizationsDataItem(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["appClipAdvancedExperienceLocalizations"]
    ]


class _SerializerAppClipAdvancedExperienceUpdateRequestDataRelationshipsLocalizationsDataItem(
    pydantic.BaseModel
):
    """
    Serializer for AppClipAdvancedExperienceUpdateRequestDataRelationshipsLocalizationsDataItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["appClipAdvancedExperienceLocalizations"] = (
        pydantic.Field(alias="type")
    )


class AppClipAdvancedExperienceLocalizationInlineCreateAttributes(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    language: typing_extensions.NotRequired[
        typing_extensions.Literal[
            "AR",
            "CA",
            "CS",
            "DA",
            "DE",
            "EL",
            "EN",
            "ES",
            "FI",
            "FR",
            "HE",
            "HI",
            "HR",
            "HU",
            "ID",
            "IT",
            "JA",
            "KO",
            "MS",
            "NL",
            "NO",
            "PL",
            "PT",
            "RO",
            "RU",
            "SK",
            "SV",
            "TH",
            "TR",
            "UK",
            "VI",
            "ZH",
        ]
    ]
    subtitle: typing_extensions.NotRequired[str]
    title: typing_extensions.NotRequired[str]


class _SerializerAppClipAdvancedExperienceLocalizationInlineCreateAttributes(
    pydantic.BaseModel
):
    """
    Serializer for AppClipAdvancedExperienceLocalizationInlineCreateAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    language: typing.Optional[
        typing_extensions.Literal[
            "AR",
            "CA",
            "CS",
            "DA",
            "DE",
            "EL",
            "EN",
            "ES",
            "FI",
            "FR",
            "HE",
            "HI",
            "HR",
            "HU",
            "ID",
            "IT",
            "JA",
            "KO",
            "MS",
            "NL",
            "NO",
            "PL",
            "PT",
            "RO",
            "RU",
            "SK",
            "SV",
            "TH",
            "TR",
            "UK",
            "VI",
            "ZH",
        ]
    ] = pydantic.Field(alias="language", default=None)
    subtitle: typing.Optional[str] = pydantic.Field(alias="subtitle", default=None)
    title: typing.Optional[str] = pydantic.Field(alias="title", default=None)


class AppClipAdvancedExperienceCreateRequestDataAttributesPlaceDisplayPointCoordinates(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    latitude: typing_extensions.NotRequired[float]
    longitude: typing_extensions.NotRequired[float]


class _SerializerAppClipAdvancedExperienceCreateRequestDataAttributesPlaceDisplayPointCoordinates(
    pydantic.BaseModel
):
    """
    Serializer for AppClipAdvancedExperienceCreateRequestDataAttributesPlaceDisplayPointCoordinates handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    latitude: typing.Optional[float] = pydantic.Field(alias="latitude", default=None)
    longitude: typing.Optional[float] = pydantic.Field(alias="longitude", default=None)


class AppClipAdvancedExperienceCreateRequestDataAttributesPlaceMainAddressStructuredAddress(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    country_code: typing_extensions.NotRequired[str]
    floor: typing_extensions.NotRequired[str]
    locality: typing_extensions.NotRequired[str]
    neighborhood: typing_extensions.NotRequired[str]
    postal_code: typing_extensions.NotRequired[str]
    state_province: typing_extensions.NotRequired[str]
    street_address: typing_extensions.NotRequired[typing.List[str]]


class _SerializerAppClipAdvancedExperienceCreateRequestDataAttributesPlaceMainAddressStructuredAddress(
    pydantic.BaseModel
):
    """
    Serializer for AppClipAdvancedExperienceCreateRequestDataAttributesPlaceMainAddressStructuredAddress handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    country_code: typing.Optional[str] = pydantic.Field(
        alias="countryCode", default=None
    )
    floor: typing.Optional[str] = pydantic.Field(alias="floor", default=None)
    locality: typing.Optional[str] = pydantic.Field(alias="locality", default=None)
    neighborhood: typing.Optional[str] = pydantic.Field(
        alias="neighborhood", default=None
    )
    postal_code: typing.Optional[str] = pydantic.Field(alias="postalCode", default=None)
    state_province: typing.Optional[str] = pydantic.Field(
        alias="stateProvince", default=None
    )
    street_address: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="streetAddress", default=None
    )


class AppClipAdvancedExperienceCreateRequestDataAttributesPlacePhoneNumber(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    intent: typing_extensions.NotRequired[str]
    number: typing_extensions.NotRequired[str]
    type: typing_extensions.NotRequired[
        typing_extensions.Literal["FAX", "LANDLINE", "MOBILE", "TOLLFREE"]
    ]


class _SerializerAppClipAdvancedExperienceCreateRequestDataAttributesPlacePhoneNumber(
    pydantic.BaseModel
):
    """
    Serializer for AppClipAdvancedExperienceCreateRequestDataAttributesPlacePhoneNumber handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    intent: typing.Optional[str] = pydantic.Field(alias="intent", default=None)
    number: typing.Optional[str] = pydantic.Field(alias="number", default=None)
    type: typing.Optional[
        typing_extensions.Literal["FAX", "LANDLINE", "MOBILE", "TOLLFREE"]
    ] = pydantic.Field(alias="type", default=None)


class AppClipAdvancedExperienceCreateRequestDataRelationshipsAppClipData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["appClips"]]


class _SerializerAppClipAdvancedExperienceCreateRequestDataRelationshipsAppClipData(
    pydantic.BaseModel
):
    """
    Serializer for AppClipAdvancedExperienceCreateRequestDataRelationshipsAppClipData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["appClips"] = pydantic.Field(alias="type")


class AppClipAdvancedExperienceCreateRequestDataRelationshipsHeaderImageData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["appClipAdvancedExperienceImages"]
    ]


class _SerializerAppClipAdvancedExperienceCreateRequestDataRelationshipsHeaderImageData(
    pydantic.BaseModel
):
    """
    Serializer for AppClipAdvancedExperienceCreateRequestDataRelationshipsHeaderImageData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["appClipAdvancedExperienceImages"] = pydantic.Field(
        alias="type"
    )


class AppClipAdvancedExperienceCreateRequestDataRelationshipsLocalizationsDataItem(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["appClipAdvancedExperienceLocalizations"]
    ]


class _SerializerAppClipAdvancedExperienceCreateRequestDataRelationshipsLocalizationsDataItem(
    pydantic.BaseModel
):
    """
    Serializer for AppClipAdvancedExperienceCreateRequestDataRelationshipsLocalizationsDataItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["appClipAdvancedExperienceLocalizations"] = (
        pydantic.Field(alias="type")
    )


class AppClipAdvancedExperienceUpdateRequestDataAttributesPlaceDisplayPoint(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    coordinates: typing_extensions.NotRequired[
        AppClipAdvancedExperienceUpdateRequestDataAttributesPlaceDisplayPointCoordinates
    ]
    source: typing_extensions.NotRequired[
        typing_extensions.Literal["CALCULATED", "MANUALLY_PLACED"]
    ]


class _SerializerAppClipAdvancedExperienceUpdateRequestDataAttributesPlaceDisplayPoint(
    pydantic.BaseModel
):
    """
    Serializer for AppClipAdvancedExperienceUpdateRequestDataAttributesPlaceDisplayPoint handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    coordinates: typing.Optional[
        _SerializerAppClipAdvancedExperienceUpdateRequestDataAttributesPlaceDisplayPointCoordinates
    ] = pydantic.Field(alias="coordinates", default=None)
    source: typing.Optional[
        typing_extensions.Literal["CALCULATED", "MANUALLY_PLACED"]
    ] = pydantic.Field(alias="source", default=None)


class AppClipAdvancedExperienceUpdateRequestDataAttributesPlaceMainAddress(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    full_address: typing_extensions.NotRequired[str]
    structured_address: typing_extensions.NotRequired[
        AppClipAdvancedExperienceUpdateRequestDataAttributesPlaceMainAddressStructuredAddress
    ]


class _SerializerAppClipAdvancedExperienceUpdateRequestDataAttributesPlaceMainAddress(
    pydantic.BaseModel
):
    """
    Serializer for AppClipAdvancedExperienceUpdateRequestDataAttributesPlaceMainAddress handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    full_address: typing.Optional[str] = pydantic.Field(
        alias="fullAddress", default=None
    )
    structured_address: typing.Optional[
        _SerializerAppClipAdvancedExperienceUpdateRequestDataAttributesPlaceMainAddressStructuredAddress
    ] = pydantic.Field(alias="structuredAddress", default=None)


class AppClipAdvancedExperienceUpdateRequestDataRelationshipsAppClip(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        AppClipAdvancedExperienceUpdateRequestDataRelationshipsAppClipData
    ]


class _SerializerAppClipAdvancedExperienceUpdateRequestDataRelationshipsAppClip(
    pydantic.BaseModel
):
    """
    Serializer for AppClipAdvancedExperienceUpdateRequestDataRelationshipsAppClip handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        _SerializerAppClipAdvancedExperienceUpdateRequestDataRelationshipsAppClipData
    ] = pydantic.Field(alias="data", default=None)


class AppClipAdvancedExperienceUpdateRequestDataRelationshipsHeaderImage(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        AppClipAdvancedExperienceUpdateRequestDataRelationshipsHeaderImageData
    ]


class _SerializerAppClipAdvancedExperienceUpdateRequestDataRelationshipsHeaderImage(
    pydantic.BaseModel
):
    """
    Serializer for AppClipAdvancedExperienceUpdateRequestDataRelationshipsHeaderImage handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        _SerializerAppClipAdvancedExperienceUpdateRequestDataRelationshipsHeaderImageData
    ] = pydantic.Field(alias="data", default=None)


class AppClipAdvancedExperienceUpdateRequestDataRelationshipsLocalizations(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        typing.List[
            AppClipAdvancedExperienceUpdateRequestDataRelationshipsLocalizationsDataItem
        ]
    ]


class _SerializerAppClipAdvancedExperienceUpdateRequestDataRelationshipsLocalizations(
    pydantic.BaseModel
):
    """
    Serializer for AppClipAdvancedExperienceUpdateRequestDataRelationshipsLocalizations handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        typing.List[
            _SerializerAppClipAdvancedExperienceUpdateRequestDataRelationshipsLocalizationsDataItem
        ]
    ] = pydantic.Field(alias="data", default=None)


class AppClipAdvancedExperienceLocalizationInlineCreate(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[
        AppClipAdvancedExperienceLocalizationInlineCreateAttributes
    ]
    id: typing_extensions.NotRequired[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["appClipAdvancedExperienceLocalizations"]
    ]


class _SerializerAppClipAdvancedExperienceLocalizationInlineCreate(pydantic.BaseModel):
    """
    Serializer for AppClipAdvancedExperienceLocalizationInlineCreate handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[
        _SerializerAppClipAdvancedExperienceLocalizationInlineCreateAttributes
    ] = pydantic.Field(alias="attributes", default=None)
    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    type: typing_extensions.Literal["appClipAdvancedExperienceLocalizations"] = (
        pydantic.Field(alias="type")
    )


class AppClipAdvancedExperienceCreateRequestDataAttributesPlaceDisplayPoint(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    coordinates: typing_extensions.NotRequired[
        AppClipAdvancedExperienceCreateRequestDataAttributesPlaceDisplayPointCoordinates
    ]
    source: typing_extensions.NotRequired[
        typing_extensions.Literal["CALCULATED", "MANUALLY_PLACED"]
    ]


class _SerializerAppClipAdvancedExperienceCreateRequestDataAttributesPlaceDisplayPoint(
    pydantic.BaseModel
):
    """
    Serializer for AppClipAdvancedExperienceCreateRequestDataAttributesPlaceDisplayPoint handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    coordinates: typing.Optional[
        _SerializerAppClipAdvancedExperienceCreateRequestDataAttributesPlaceDisplayPointCoordinates
    ] = pydantic.Field(alias="coordinates", default=None)
    source: typing.Optional[
        typing_extensions.Literal["CALCULATED", "MANUALLY_PLACED"]
    ] = pydantic.Field(alias="source", default=None)


class AppClipAdvancedExperienceCreateRequestDataAttributesPlaceMainAddress(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    full_address: typing_extensions.NotRequired[str]
    structured_address: typing_extensions.NotRequired[
        AppClipAdvancedExperienceCreateRequestDataAttributesPlaceMainAddressStructuredAddress
    ]


class _SerializerAppClipAdvancedExperienceCreateRequestDataAttributesPlaceMainAddress(
    pydantic.BaseModel
):
    """
    Serializer for AppClipAdvancedExperienceCreateRequestDataAttributesPlaceMainAddress handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    full_address: typing.Optional[str] = pydantic.Field(
        alias="fullAddress", default=None
    )
    structured_address: typing.Optional[
        _SerializerAppClipAdvancedExperienceCreateRequestDataAttributesPlaceMainAddressStructuredAddress
    ] = pydantic.Field(alias="structuredAddress", default=None)


class AppClipAdvancedExperienceCreateRequestDataRelationshipsAppClip(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        AppClipAdvancedExperienceCreateRequestDataRelationshipsAppClipData
    ]


class _SerializerAppClipAdvancedExperienceCreateRequestDataRelationshipsAppClip(
    pydantic.BaseModel
):
    """
    Serializer for AppClipAdvancedExperienceCreateRequestDataRelationshipsAppClip handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAppClipAdvancedExperienceCreateRequestDataRelationshipsAppClipData = pydantic.Field(
        alias="data"
    )


class AppClipAdvancedExperienceCreateRequestDataRelationshipsHeaderImage(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        AppClipAdvancedExperienceCreateRequestDataRelationshipsHeaderImageData
    ]


class _SerializerAppClipAdvancedExperienceCreateRequestDataRelationshipsHeaderImage(
    pydantic.BaseModel
):
    """
    Serializer for AppClipAdvancedExperienceCreateRequestDataRelationshipsHeaderImage handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAppClipAdvancedExperienceCreateRequestDataRelationshipsHeaderImageData = pydantic.Field(
        alias="data"
    )


class AppClipAdvancedExperienceCreateRequestDataRelationshipsLocalizations(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        typing.List[
            AppClipAdvancedExperienceCreateRequestDataRelationshipsLocalizationsDataItem
        ]
    ]


class _SerializerAppClipAdvancedExperienceCreateRequestDataRelationshipsLocalizations(
    pydantic.BaseModel
):
    """
    Serializer for AppClipAdvancedExperienceCreateRequestDataRelationshipsLocalizations handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.List[
        _SerializerAppClipAdvancedExperienceCreateRequestDataRelationshipsLocalizationsDataItem
    ] = pydantic.Field(alias="data")


class AppClipAdvancedExperienceUpdateRequestDataAttributesPlace(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    categories: typing_extensions.NotRequired[typing.List[str]]
    display_point: typing_extensions.NotRequired[
        AppClipAdvancedExperienceUpdateRequestDataAttributesPlaceDisplayPoint
    ]
    home_page: typing_extensions.NotRequired[str]
    main_address: typing_extensions.NotRequired[
        AppClipAdvancedExperienceUpdateRequestDataAttributesPlaceMainAddress
    ]
    map_action: typing_extensions.NotRequired[
        typing_extensions.Literal[
            "BUY_TICKETS",
            "VIEW_AVAILABILITY",
            "VIEW_PRICING",
            "HOTEL_BOOK_ROOM",
            "PARKING_RESERVE_PARKING",
            "RESTAURANT_JOIN_WAITLIST",
            "RESTAURANT_ORDER_DELIVERY",
            "RESTAURANT_ORDER_FOOD",
            "RESTAURANT_ORDER_TAKEOUT",
            "RESTAURANT_RESERVATION",
            "SCHEDULE_APPOINTMENT",
            "RESTAURANT_VIEW_MENU",
            "THEATER_NOW_PLAYING",
        ]
    ]
    names: typing_extensions.NotRequired[typing.List[str]]
    phone_number: typing_extensions.NotRequired[
        AppClipAdvancedExperienceUpdateRequestDataAttributesPlacePhoneNumber
    ]
    place_id: typing_extensions.NotRequired[str]
    relationship: typing_extensions.NotRequired[
        typing_extensions.Literal["OWNER", "AUTHORIZED", "OTHER"]
    ]


class _SerializerAppClipAdvancedExperienceUpdateRequestDataAttributesPlace(
    pydantic.BaseModel
):
    """
    Serializer for AppClipAdvancedExperienceUpdateRequestDataAttributesPlace handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    categories: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="categories", default=None
    )
    display_point: typing.Optional[
        _SerializerAppClipAdvancedExperienceUpdateRequestDataAttributesPlaceDisplayPoint
    ] = pydantic.Field(alias="displayPoint", default=None)
    home_page: typing.Optional[str] = pydantic.Field(alias="homePage", default=None)
    main_address: typing.Optional[
        _SerializerAppClipAdvancedExperienceUpdateRequestDataAttributesPlaceMainAddress
    ] = pydantic.Field(alias="mainAddress", default=None)
    map_action: typing.Optional[
        typing_extensions.Literal[
            "BUY_TICKETS",
            "VIEW_AVAILABILITY",
            "VIEW_PRICING",
            "HOTEL_BOOK_ROOM",
            "PARKING_RESERVE_PARKING",
            "RESTAURANT_JOIN_WAITLIST",
            "RESTAURANT_ORDER_DELIVERY",
            "RESTAURANT_ORDER_FOOD",
            "RESTAURANT_ORDER_TAKEOUT",
            "RESTAURANT_RESERVATION",
            "SCHEDULE_APPOINTMENT",
            "RESTAURANT_VIEW_MENU",
            "THEATER_NOW_PLAYING",
        ]
    ] = pydantic.Field(alias="mapAction", default=None)
    names: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="names", default=None
    )
    phone_number: typing.Optional[
        _SerializerAppClipAdvancedExperienceUpdateRequestDataAttributesPlacePhoneNumber
    ] = pydantic.Field(alias="phoneNumber", default=None)
    place_id: typing.Optional[str] = pydantic.Field(alias="placeId", default=None)
    relationship: typing.Optional[
        typing_extensions.Literal["OWNER", "AUTHORIZED", "OTHER"]
    ] = pydantic.Field(alias="relationship", default=None)


class AppClipAdvancedExperienceUpdateRequestDataRelationships(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    app_clip: typing_extensions.NotRequired[
        AppClipAdvancedExperienceUpdateRequestDataRelationshipsAppClip
    ]
    header_image: typing_extensions.NotRequired[
        AppClipAdvancedExperienceUpdateRequestDataRelationshipsHeaderImage
    ]
    localizations: typing_extensions.NotRequired[
        AppClipAdvancedExperienceUpdateRequestDataRelationshipsLocalizations
    ]


class _SerializerAppClipAdvancedExperienceUpdateRequestDataRelationships(
    pydantic.BaseModel
):
    """
    Serializer for AppClipAdvancedExperienceUpdateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    app_clip: typing.Optional[
        _SerializerAppClipAdvancedExperienceUpdateRequestDataRelationshipsAppClip
    ] = pydantic.Field(alias="appClip", default=None)
    header_image: typing.Optional[
        _SerializerAppClipAdvancedExperienceUpdateRequestDataRelationshipsHeaderImage
    ] = pydantic.Field(alias="headerImage", default=None)
    localizations: typing.Optional[
        _SerializerAppClipAdvancedExperienceUpdateRequestDataRelationshipsLocalizations
    ] = pydantic.Field(alias="localizations", default=None)


class AppClipAdvancedExperienceCreateRequestDataAttributesPlace(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    categories: typing_extensions.NotRequired[typing.List[str]]
    display_point: typing_extensions.NotRequired[
        AppClipAdvancedExperienceCreateRequestDataAttributesPlaceDisplayPoint
    ]
    home_page: typing_extensions.NotRequired[str]
    main_address: typing_extensions.NotRequired[
        AppClipAdvancedExperienceCreateRequestDataAttributesPlaceMainAddress
    ]
    map_action: typing_extensions.NotRequired[
        typing_extensions.Literal[
            "BUY_TICKETS",
            "VIEW_AVAILABILITY",
            "VIEW_PRICING",
            "HOTEL_BOOK_ROOM",
            "PARKING_RESERVE_PARKING",
            "RESTAURANT_JOIN_WAITLIST",
            "RESTAURANT_ORDER_DELIVERY",
            "RESTAURANT_ORDER_FOOD",
            "RESTAURANT_ORDER_TAKEOUT",
            "RESTAURANT_RESERVATION",
            "SCHEDULE_APPOINTMENT",
            "RESTAURANT_VIEW_MENU",
            "THEATER_NOW_PLAYING",
        ]
    ]
    names: typing_extensions.NotRequired[typing.List[str]]
    phone_number: typing_extensions.NotRequired[
        AppClipAdvancedExperienceCreateRequestDataAttributesPlacePhoneNumber
    ]
    place_id: typing_extensions.NotRequired[str]
    relationship: typing_extensions.NotRequired[
        typing_extensions.Literal["OWNER", "AUTHORIZED", "OTHER"]
    ]


class _SerializerAppClipAdvancedExperienceCreateRequestDataAttributesPlace(
    pydantic.BaseModel
):
    """
    Serializer for AppClipAdvancedExperienceCreateRequestDataAttributesPlace handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    categories: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="categories", default=None
    )
    display_point: typing.Optional[
        _SerializerAppClipAdvancedExperienceCreateRequestDataAttributesPlaceDisplayPoint
    ] = pydantic.Field(alias="displayPoint", default=None)
    home_page: typing.Optional[str] = pydantic.Field(alias="homePage", default=None)
    main_address: typing.Optional[
        _SerializerAppClipAdvancedExperienceCreateRequestDataAttributesPlaceMainAddress
    ] = pydantic.Field(alias="mainAddress", default=None)
    map_action: typing.Optional[
        typing_extensions.Literal[
            "BUY_TICKETS",
            "VIEW_AVAILABILITY",
            "VIEW_PRICING",
            "HOTEL_BOOK_ROOM",
            "PARKING_RESERVE_PARKING",
            "RESTAURANT_JOIN_WAITLIST",
            "RESTAURANT_ORDER_DELIVERY",
            "RESTAURANT_ORDER_FOOD",
            "RESTAURANT_ORDER_TAKEOUT",
            "RESTAURANT_RESERVATION",
            "SCHEDULE_APPOINTMENT",
            "RESTAURANT_VIEW_MENU",
            "THEATER_NOW_PLAYING",
        ]
    ] = pydantic.Field(alias="mapAction", default=None)
    names: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="names", default=None
    )
    phone_number: typing.Optional[
        _SerializerAppClipAdvancedExperienceCreateRequestDataAttributesPlacePhoneNumber
    ] = pydantic.Field(alias="phoneNumber", default=None)
    place_id: typing.Optional[str] = pydantic.Field(alias="placeId", default=None)
    relationship: typing.Optional[
        typing_extensions.Literal["OWNER", "AUTHORIZED", "OTHER"]
    ] = pydantic.Field(alias="relationship", default=None)


class AppClipAdvancedExperienceCreateRequestDataRelationships(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    app_clip: typing_extensions.Required[
        AppClipAdvancedExperienceCreateRequestDataRelationshipsAppClip
    ]
    header_image: typing_extensions.Required[
        AppClipAdvancedExperienceCreateRequestDataRelationshipsHeaderImage
    ]
    localizations: typing_extensions.Required[
        AppClipAdvancedExperienceCreateRequestDataRelationshipsLocalizations
    ]


class _SerializerAppClipAdvancedExperienceCreateRequestDataRelationships(
    pydantic.BaseModel
):
    """
    Serializer for AppClipAdvancedExperienceCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    app_clip: _SerializerAppClipAdvancedExperienceCreateRequestDataRelationshipsAppClip = pydantic.Field(
        alias="appClip"
    )
    header_image: _SerializerAppClipAdvancedExperienceCreateRequestDataRelationshipsHeaderImage = pydantic.Field(
        alias="headerImage"
    )
    localizations: _SerializerAppClipAdvancedExperienceCreateRequestDataRelationshipsLocalizations = pydantic.Field(
        alias="localizations"
    )


class AppClipAdvancedExperienceUpdateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    action: typing_extensions.NotRequired[
        typing_extensions.Literal["OPEN", "VIEW", "PLAY"]
    ]
    business_category: typing_extensions.NotRequired[
        typing_extensions.Literal[
            "AUTOMOTIVE",
            "BEAUTY",
            "BIKES",
            "BOOKS",
            "CASINO",
            "EDUCATION",
            "EDUCATION_JAPAN",
            "ENTERTAINMENT",
            "EV_CHARGER",
            "FINANCIAL_USD",
            "FINANCIAL_CNY",
            "FINANCIAL_GBP",
            "FINANCIAL_JPY",
            "FINANCIAL_EUR",
            "FITNESS",
            "FOOD_AND_DRINK",
            "GAS",
            "GROCERY",
            "HEALTH_AND_MEDICAL",
            "HOTEL_AND_TRAVEL",
            "MUSIC",
            "PARKING",
            "PET_SERVICES",
            "PROFESSIONAL_SERVICES",
            "SHOPPING",
            "TICKETING",
            "TRANSIT",
        ]
    ]
    default_language: typing_extensions.NotRequired[
        typing_extensions.Literal[
            "AR",
            "CA",
            "CS",
            "DA",
            "DE",
            "EL",
            "EN",
            "ES",
            "FI",
            "FR",
            "HE",
            "HI",
            "HR",
            "HU",
            "ID",
            "IT",
            "JA",
            "KO",
            "MS",
            "NL",
            "NO",
            "PL",
            "PT",
            "RO",
            "RU",
            "SK",
            "SV",
            "TH",
            "TR",
            "UK",
            "VI",
            "ZH",
        ]
    ]
    is_powered_by: typing_extensions.NotRequired[bool]
    place: typing_extensions.NotRequired[
        AppClipAdvancedExperienceUpdateRequestDataAttributesPlace
    ]
    removed: typing_extensions.NotRequired[bool]


class _SerializerAppClipAdvancedExperienceUpdateRequestDataAttributes(
    pydantic.BaseModel
):
    """
    Serializer for AppClipAdvancedExperienceUpdateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    action: typing.Optional[typing_extensions.Literal["OPEN", "VIEW", "PLAY"]] = (
        pydantic.Field(alias="action", default=None)
    )
    business_category: typing.Optional[
        typing_extensions.Literal[
            "AUTOMOTIVE",
            "BEAUTY",
            "BIKES",
            "BOOKS",
            "CASINO",
            "EDUCATION",
            "EDUCATION_JAPAN",
            "ENTERTAINMENT",
            "EV_CHARGER",
            "FINANCIAL_USD",
            "FINANCIAL_CNY",
            "FINANCIAL_GBP",
            "FINANCIAL_JPY",
            "FINANCIAL_EUR",
            "FITNESS",
            "FOOD_AND_DRINK",
            "GAS",
            "GROCERY",
            "HEALTH_AND_MEDICAL",
            "HOTEL_AND_TRAVEL",
            "MUSIC",
            "PARKING",
            "PET_SERVICES",
            "PROFESSIONAL_SERVICES",
            "SHOPPING",
            "TICKETING",
            "TRANSIT",
        ]
    ] = pydantic.Field(alias="businessCategory", default=None)
    default_language: typing.Optional[
        typing_extensions.Literal[
            "AR",
            "CA",
            "CS",
            "DA",
            "DE",
            "EL",
            "EN",
            "ES",
            "FI",
            "FR",
            "HE",
            "HI",
            "HR",
            "HU",
            "ID",
            "IT",
            "JA",
            "KO",
            "MS",
            "NL",
            "NO",
            "PL",
            "PT",
            "RO",
            "RU",
            "SK",
            "SV",
            "TH",
            "TR",
            "UK",
            "VI",
            "ZH",
        ]
    ] = pydantic.Field(alias="defaultLanguage", default=None)
    is_powered_by: typing.Optional[bool] = pydantic.Field(
        alias="isPoweredBy", default=None
    )
    place: typing.Optional[
        _SerializerAppClipAdvancedExperienceUpdateRequestDataAttributesPlace
    ] = pydantic.Field(alias="place", default=None)
    removed: typing.Optional[bool] = pydantic.Field(alias="removed", default=None)


class AppClipAdvancedExperienceCreateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    action: typing_extensions.NotRequired[
        typing_extensions.Literal["OPEN", "VIEW", "PLAY"]
    ]
    business_category: typing_extensions.NotRequired[
        typing_extensions.Literal[
            "AUTOMOTIVE",
            "BEAUTY",
            "BIKES",
            "BOOKS",
            "CASINO",
            "EDUCATION",
            "EDUCATION_JAPAN",
            "ENTERTAINMENT",
            "EV_CHARGER",
            "FINANCIAL_USD",
            "FINANCIAL_CNY",
            "FINANCIAL_GBP",
            "FINANCIAL_JPY",
            "FINANCIAL_EUR",
            "FITNESS",
            "FOOD_AND_DRINK",
            "GAS",
            "GROCERY",
            "HEALTH_AND_MEDICAL",
            "HOTEL_AND_TRAVEL",
            "MUSIC",
            "PARKING",
            "PET_SERVICES",
            "PROFESSIONAL_SERVICES",
            "SHOPPING",
            "TICKETING",
            "TRANSIT",
        ]
    ]
    default_language: typing_extensions.Required[
        typing_extensions.Literal[
            "AR",
            "CA",
            "CS",
            "DA",
            "DE",
            "EL",
            "EN",
            "ES",
            "FI",
            "FR",
            "HE",
            "HI",
            "HR",
            "HU",
            "ID",
            "IT",
            "JA",
            "KO",
            "MS",
            "NL",
            "NO",
            "PL",
            "PT",
            "RO",
            "RU",
            "SK",
            "SV",
            "TH",
            "TR",
            "UK",
            "VI",
            "ZH",
        ]
    ]
    is_powered_by: typing_extensions.Required[bool]
    link: typing_extensions.Required[str]
    place: typing_extensions.NotRequired[
        AppClipAdvancedExperienceCreateRequestDataAttributesPlace
    ]


class _SerializerAppClipAdvancedExperienceCreateRequestDataAttributes(
    pydantic.BaseModel
):
    """
    Serializer for AppClipAdvancedExperienceCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    action: typing.Optional[typing_extensions.Literal["OPEN", "VIEW", "PLAY"]] = (
        pydantic.Field(alias="action", default=None)
    )
    business_category: typing.Optional[
        typing_extensions.Literal[
            "AUTOMOTIVE",
            "BEAUTY",
            "BIKES",
            "BOOKS",
            "CASINO",
            "EDUCATION",
            "EDUCATION_JAPAN",
            "ENTERTAINMENT",
            "EV_CHARGER",
            "FINANCIAL_USD",
            "FINANCIAL_CNY",
            "FINANCIAL_GBP",
            "FINANCIAL_JPY",
            "FINANCIAL_EUR",
            "FITNESS",
            "FOOD_AND_DRINK",
            "GAS",
            "GROCERY",
            "HEALTH_AND_MEDICAL",
            "HOTEL_AND_TRAVEL",
            "MUSIC",
            "PARKING",
            "PET_SERVICES",
            "PROFESSIONAL_SERVICES",
            "SHOPPING",
            "TICKETING",
            "TRANSIT",
        ]
    ] = pydantic.Field(alias="businessCategory", default=None)
    default_language: typing_extensions.Literal[
        "AR",
        "CA",
        "CS",
        "DA",
        "DE",
        "EL",
        "EN",
        "ES",
        "FI",
        "FR",
        "HE",
        "HI",
        "HR",
        "HU",
        "ID",
        "IT",
        "JA",
        "KO",
        "MS",
        "NL",
        "NO",
        "PL",
        "PT",
        "RO",
        "RU",
        "SK",
        "SV",
        "TH",
        "TR",
        "UK",
        "VI",
        "ZH",
    ] = pydantic.Field(alias="defaultLanguage")
    is_powered_by: bool = pydantic.Field(alias="isPoweredBy")
    link: str = pydantic.Field(alias="link")
    place: typing.Optional[
        _SerializerAppClipAdvancedExperienceCreateRequestDataAttributesPlace
    ] = pydantic.Field(alias="place", default=None)


class AppClipAdvancedExperienceUpdateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[
        AppClipAdvancedExperienceUpdateRequestDataAttributes
    ]
    id: typing_extensions.Required[str]
    relationships: typing_extensions.NotRequired[
        AppClipAdvancedExperienceUpdateRequestDataRelationships
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["appClipAdvancedExperiences"]
    ]


class _SerializerAppClipAdvancedExperienceUpdateRequestData(pydantic.BaseModel):
    """
    Serializer for AppClipAdvancedExperienceUpdateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[
        _SerializerAppClipAdvancedExperienceUpdateRequestDataAttributes
    ] = pydantic.Field(alias="attributes", default=None)
    id: str = pydantic.Field(alias="id")
    relationships: typing.Optional[
        _SerializerAppClipAdvancedExperienceUpdateRequestDataRelationships
    ] = pydantic.Field(alias="relationships", default=None)
    type: typing_extensions.Literal["appClipAdvancedExperiences"] = pydantic.Field(
        alias="type"
    )


class AppClipAdvancedExperienceCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[
        AppClipAdvancedExperienceCreateRequestDataAttributes
    ]
    relationships: typing_extensions.Required[
        AppClipAdvancedExperienceCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["appClipAdvancedExperiences"]
    ]


class _SerializerAppClipAdvancedExperienceCreateRequestData(pydantic.BaseModel):
    """
    Serializer for AppClipAdvancedExperienceCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerAppClipAdvancedExperienceCreateRequestDataAttributes = (
        pydantic.Field(alias="attributes")
    )
    relationships: _SerializerAppClipAdvancedExperienceCreateRequestDataRelationships = pydantic.Field(
        alias="relationships"
    )
    type: typing_extensions.Literal["appClipAdvancedExperiences"] = pydantic.Field(
        alias="type"
    )


class AppClipAdvancedExperienceUpdateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[AppClipAdvancedExperienceUpdateRequestData]
    included: typing_extensions.NotRequired[
        typing.List[AppClipAdvancedExperienceLocalizationInlineCreate]
    ]


class _SerializerAppClipAdvancedExperienceUpdateRequest(pydantic.BaseModel):
    """
    Serializer for AppClipAdvancedExperienceUpdateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAppClipAdvancedExperienceUpdateRequestData = pydantic.Field(
        alias="data"
    )
    included: typing.Optional[
        typing.List[_SerializerAppClipAdvancedExperienceLocalizationInlineCreate]
    ] = pydantic.Field(alias="included", default=None)


class AppClipAdvancedExperienceCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[AppClipAdvancedExperienceCreateRequestData]
    included: typing_extensions.NotRequired[
        typing.List[AppClipAdvancedExperienceLocalizationInlineCreate]
    ]


class _SerializerAppClipAdvancedExperienceCreateRequest(pydantic.BaseModel):
    """
    Serializer for AppClipAdvancedExperienceCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAppClipAdvancedExperienceCreateRequestData = pydantic.Field(
        alias="data"
    )
    included: typing.Optional[
        typing.List[_SerializerAppClipAdvancedExperienceLocalizationInlineCreate]
    ] = pydantic.Field(alias="included", default=None)
