"""File Generated by Sideko (sideko.dev)"""

import io
import typing
import typing_extensions
from pydantic import (
    BaseModel as _PydanticBaseModel,
    Field as _PydanticField,
    ConfigDict as _PydanticConfigDict,
)

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class CiGitUser(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    avatar_url: typing.Optional[str] = _PydanticField(alias="avatarUrl", default=None)
    display_name: typing.Optional[str] = _PydanticField(
        alias="displayName", default=None
    )


class CiIssueCounts(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    analyzer_warnings: typing.Optional[int] = _PydanticField(
        alias="analyzerWarnings", default=None
    )
    errors: typing.Optional[int] = _PydanticField(alias="errors", default=None)
    test_failures: typing.Optional[int] = _PydanticField(
        alias="testFailures", default=None
    )
    warnings_field: typing.Optional[int] = _PydanticField(
        alias="warnings", default=None
    )


class CiBuildRunAttributesSourceCommit(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    author: typing.Optional[CiGitUser] = _PydanticField(alias="author", default=None)
    commit_sha: typing.Optional[str] = _PydanticField(alias="commitSha", default=None)
    committer: typing.Optional[CiGitUser] = _PydanticField(
        alias="committer", default=None
    )
    message: typing.Optional[str] = _PydanticField(alias="message", default=None)
    web_url: typing.Optional[str] = _PydanticField(alias="webUrl", default=None)


class ResourceLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class CiBuildRunRelationshipsBuildsDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["builds"] = _PydanticField(alias="type")


class CiBuildRunRelationshipsBuildsLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class PagingInformationPaging(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    limit: int = _PydanticField(alias="limit")
    total: typing.Optional[int] = _PydanticField(alias="total", default=None)


class CiBuildRunRelationshipsDestinationBranchData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["scmGitReferences"] = _PydanticField(alias="type")


class CiBuildRunRelationshipsDestinationBranchLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class CiBuildRunRelationshipsProductData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["ciProducts"] = _PydanticField(alias="type")


class CiBuildRunRelationshipsProductLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class CiBuildRunRelationshipsPullRequestData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["scmPullRequests"] = _PydanticField(alias="type")


class CiBuildRunRelationshipsPullRequestLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class CiBuildRunRelationshipsSourceBranchOrTagData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["scmGitReferences"] = _PydanticField(alias="type")


class CiBuildRunRelationshipsSourceBranchOrTagLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class CiBuildRunRelationshipsWorkflowData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["ciWorkflows"] = _PydanticField(alias="type")


class CiBuildRunRelationshipsWorkflowLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class ImageAsset(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    height: typing.Optional[int] = _PydanticField(alias="height", default=None)
    template_url: typing.Optional[str] = _PydanticField(
        alias="templateUrl", default=None
    )
    width: typing.Optional[int] = _PydanticField(alias="width", default=None)


class BuildRelationshipsAppData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["apps"] = _PydanticField(alias="type")


class BuildRelationshipsAppLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class BuildRelationshipsAppEncryptionDeclarationData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["appEncryptionDeclarations"] = _PydanticField(
        alias="type"
    )


class BuildRelationshipsAppEncryptionDeclarationLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class BuildRelationshipsAppStoreVersionData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["appStoreVersions"] = _PydanticField(alias="type")


class BuildRelationshipsAppStoreVersionLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class BuildRelationshipsBetaAppReviewSubmissionData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["betaAppReviewSubmissions"] = _PydanticField(
        alias="type"
    )


class BuildRelationshipsBetaAppReviewSubmissionLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class BuildRelationshipsBetaBuildLocalizationsDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["betaBuildLocalizations"] = _PydanticField(
        alias="type"
    )


class BuildRelationshipsBetaBuildLocalizationsLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class BuildRelationshipsBetaGroupsDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["betaGroups"] = _PydanticField(alias="type")


class BuildRelationshipsBetaGroupsLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class BuildRelationshipsBuildBetaDetailData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["buildBetaDetails"] = _PydanticField(alias="type")


class BuildRelationshipsBuildBetaDetailLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class BuildRelationshipsBuildBundlesDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["buildBundles"] = _PydanticField(alias="type")


class BuildRelationshipsBuildBundlesLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class BuildRelationshipsIconsDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["buildIcons"] = _PydanticField(alias="type")


class BuildRelationshipsIconsLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class BuildRelationshipsIndividualTestersDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["betaTesters"] = _PydanticField(alias="type")


class BuildRelationshipsIndividualTestersLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class BuildRelationshipsPreReleaseVersionData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["preReleaseVersions"] = _PydanticField(alias="type")


class BuildRelationshipsPreReleaseVersionLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class CiTestDestination(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    device_type_identifier: typing.Optional[str] = _PydanticField(
        alias="deviceTypeIdentifier", default=None
    )
    device_type_name: typing.Optional[str] = _PydanticField(
        alias="deviceTypeName", default=None
    )
    kind: typing.Optional[typing_extensions.Literal["SIMULATOR", "MAC"]] = (
        _PydanticField(alias="kind", default=None)
    )
    runtime_identifier: typing.Optional[str] = _PydanticField(
        alias="runtimeIdentifier", default=None
    )
    runtime_name: typing.Optional[str] = _PydanticField(
        alias="runtimeName", default=None
    )


class CiStartConditionFileMatcher(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    directory: typing.Optional[str] = _PydanticField(alias="directory", default=None)
    file_extension: typing.Optional[str] = _PydanticField(
        alias="fileExtension", default=None
    )
    file_name: typing.Optional[str] = _PydanticField(alias="fileName", default=None)


class CiBranchPatternsPatternsItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    is_prefix: typing.Optional[bool] = _PydanticField(alias="isPrefix", default=None)
    pattern: typing.Optional[str] = _PydanticField(alias="pattern", default=None)


class CiTagPatternsPatternsItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    is_prefix: typing.Optional[bool] = _PydanticField(alias="isPrefix", default=None)
    pattern: typing.Optional[str] = _PydanticField(alias="pattern", default=None)


class CiScheduledStartConditionSchedule(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    days: typing.Optional[
        typing.List[
            typing_extensions.Literal[
                "SUNDAY",
                "MONDAY",
                "TUESDAY",
                "WEDNESDAY",
                "THURSDAY",
                "FRIDAY",
                "SATURDAY",
            ]
        ]
    ] = _PydanticField(alias="days", default=None)
    frequency: typing.Optional[
        typing_extensions.Literal["WEEKLY", "DAILY", "HOURLY"]
    ] = _PydanticField(alias="frequency", default=None)
    hour: typing.Optional[int] = _PydanticField(alias="hour", default=None)
    minute: typing.Optional[int] = _PydanticField(alias="minute", default=None)
    timezone: typing.Optional[str] = _PydanticField(alias="timezone", default=None)


class CiWorkflowRelationshipsMacOsVersionData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["ciMacOsVersions"] = _PydanticField(alias="type")


class CiWorkflowRelationshipsMacOsVersionLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class CiWorkflowRelationshipsProductData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["ciProducts"] = _PydanticField(alias="type")


class CiWorkflowRelationshipsProductLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class CiWorkflowRelationshipsRepositoryData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["scmRepositories"] = _PydanticField(alias="type")


class CiWorkflowRelationshipsRepositoryLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class CiWorkflowRelationshipsXcodeVersionData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["ciXcodeVersions"] = _PydanticField(alias="type")


class CiWorkflowRelationshipsXcodeVersionLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class CiProductAttributes(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    created_date: typing.Optional[str] = _PydanticField(
        alias="createdDate", default=None
    )
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)
    product_type: typing.Optional[typing_extensions.Literal["APP", "FRAMEWORK"]] = (
        _PydanticField(alias="productType", default=None)
    )


class CiProductRelationshipsAppData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["apps"] = _PydanticField(alias="type")


class CiProductRelationshipsAppLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class CiProductRelationshipsBundleIdData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["bundleIds"] = _PydanticField(alias="type")


class CiProductRelationshipsBundleIdLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class CiProductRelationshipsPrimaryRepositoriesDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["scmRepositories"] = _PydanticField(alias="type")


class CiProductRelationshipsPrimaryRepositoriesLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class ScmGitReferenceAttributes(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    canonical_name: typing.Optional[str] = _PydanticField(
        alias="canonicalName", default=None
    )
    is_deleted: typing.Optional[bool] = _PydanticField(alias="isDeleted", default=None)
    kind: typing.Optional[typing_extensions.Literal["BRANCH", "TAG"]] = _PydanticField(
        alias="kind", default=None
    )
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)


class ScmGitReferenceRelationshipsRepositoryData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["scmRepositories"] = _PydanticField(alias="type")


class ScmGitReferenceRelationshipsRepositoryLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class ScmPullRequestAttributes(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    destination_branch_name: typing.Optional[str] = _PydanticField(
        alias="destinationBranchName", default=None
    )
    destination_repository_name: typing.Optional[str] = _PydanticField(
        alias="destinationRepositoryName", default=None
    )
    destination_repository_owner: typing.Optional[str] = _PydanticField(
        alias="destinationRepositoryOwner", default=None
    )
    is_closed: typing.Optional[bool] = _PydanticField(alias="isClosed", default=None)
    is_cross_repository: typing.Optional[bool] = _PydanticField(
        alias="isCrossRepository", default=None
    )
    number: typing.Optional[int] = _PydanticField(alias="number", default=None)
    source_branch_name: typing.Optional[str] = _PydanticField(
        alias="sourceBranchName", default=None
    )
    source_repository_name: typing.Optional[str] = _PydanticField(
        alias="sourceRepositoryName", default=None
    )
    source_repository_owner: typing.Optional[str] = _PydanticField(
        alias="sourceRepositoryOwner", default=None
    )
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)
    web_url: typing.Optional[str] = _PydanticField(alias="webUrl", default=None)


class ScmPullRequestRelationshipsRepositoryData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["scmRepositories"] = _PydanticField(alias="type")


class ScmPullRequestRelationshipsRepositoryLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class DocumentLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    self: str = _PydanticField(alias="self")


class CiBuildRunAttributesDestinationCommit(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    author: typing.Optional[CiGitUser] = _PydanticField(alias="author", default=None)
    commit_sha: typing.Optional[str] = _PydanticField(alias="commitSha", default=None)
    committer: typing.Optional[CiGitUser] = _PydanticField(
        alias="committer", default=None
    )
    message: typing.Optional[str] = _PydanticField(alias="message", default=None)
    web_url: typing.Optional[str] = _PydanticField(alias="webUrl", default=None)


class PagingInformation(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    paging: PagingInformationPaging = _PydanticField(alias="paging")


class CiBuildRunRelationshipsDestinationBranch(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[CiBuildRunRelationshipsDestinationBranchData] = (
        _PydanticField(alias="data", default=None)
    )
    links: typing.Optional[CiBuildRunRelationshipsDestinationBranchLinks] = (
        _PydanticField(alias="links", default=None)
    )


class CiBuildRunRelationshipsProduct(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[CiBuildRunRelationshipsProductData] = _PydanticField(
        alias="data", default=None
    )
    links: typing.Optional[CiBuildRunRelationshipsProductLinks] = _PydanticField(
        alias="links", default=None
    )


class CiBuildRunRelationshipsPullRequest(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[CiBuildRunRelationshipsPullRequestData] = _PydanticField(
        alias="data", default=None
    )
    links: typing.Optional[CiBuildRunRelationshipsPullRequestLinks] = _PydanticField(
        alias="links", default=None
    )


class CiBuildRunRelationshipsSourceBranchOrTag(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[CiBuildRunRelationshipsSourceBranchOrTagData] = (
        _PydanticField(alias="data", default=None)
    )
    links: typing.Optional[CiBuildRunRelationshipsSourceBranchOrTagLinks] = (
        _PydanticField(alias="links", default=None)
    )


class CiBuildRunRelationshipsWorkflow(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[CiBuildRunRelationshipsWorkflowData] = _PydanticField(
        alias="data", default=None
    )
    links: typing.Optional[CiBuildRunRelationshipsWorkflowLinks] = _PydanticField(
        alias="links", default=None
    )


class BuildAttributes(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    build_audience_type: typing.Optional[
        typing_extensions.Literal["INTERNAL_ONLY", "APP_STORE_ELIGIBLE"]
    ] = _PydanticField(alias="buildAudienceType", default=None)
    computed_min_mac_os_version: typing.Optional[str] = _PydanticField(
        alias="computedMinMacOsVersion", default=None
    )
    expiration_date: typing.Optional[str] = _PydanticField(
        alias="expirationDate", default=None
    )
    expired: typing.Optional[bool] = _PydanticField(alias="expired", default=None)
    icon_asset_token: typing.Optional[ImageAsset] = _PydanticField(
        alias="iconAssetToken", default=None
    )
    ls_minimum_system_version: typing.Optional[str] = _PydanticField(
        alias="lsMinimumSystemVersion", default=None
    )
    min_os_version: typing.Optional[str] = _PydanticField(
        alias="minOsVersion", default=None
    )
    processing_state: typing.Optional[
        typing_extensions.Literal["PROCESSING", "FAILED", "INVALID", "VALID"]
    ] = _PydanticField(alias="processingState", default=None)
    uploaded_date: typing.Optional[str] = _PydanticField(
        alias="uploadedDate", default=None
    )
    uses_non_exempt_encryption: typing.Optional[bool] = _PydanticField(
        alias="usesNonExemptEncryption", default=None
    )
    version: typing.Optional[str] = _PydanticField(alias="version", default=None)


class BuildRelationshipsApp(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[BuildRelationshipsAppData] = _PydanticField(
        alias="data", default=None
    )
    links: typing.Optional[BuildRelationshipsAppLinks] = _PydanticField(
        alias="links", default=None
    )


class BuildRelationshipsAppEncryptionDeclaration(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[BuildRelationshipsAppEncryptionDeclarationData] = (
        _PydanticField(alias="data", default=None)
    )
    links: typing.Optional[BuildRelationshipsAppEncryptionDeclarationLinks] = (
        _PydanticField(alias="links", default=None)
    )


class BuildRelationshipsAppStoreVersion(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[BuildRelationshipsAppStoreVersionData] = _PydanticField(
        alias="data", default=None
    )
    links: typing.Optional[BuildRelationshipsAppStoreVersionLinks] = _PydanticField(
        alias="links", default=None
    )


class BuildRelationshipsBetaAppReviewSubmission(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[BuildRelationshipsBetaAppReviewSubmissionData] = (
        _PydanticField(alias="data", default=None)
    )
    links: typing.Optional[BuildRelationshipsBetaAppReviewSubmissionLinks] = (
        _PydanticField(alias="links", default=None)
    )


class BuildRelationshipsBetaBuildLocalizations(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[
        typing.List[BuildRelationshipsBetaBuildLocalizationsDataItem]
    ] = _PydanticField(alias="data", default=None)
    links: typing.Optional[BuildRelationshipsBetaBuildLocalizationsLinks] = (
        _PydanticField(alias="links", default=None)
    )
    meta: typing.Optional[PagingInformation] = _PydanticField(
        alias="meta", default=None
    )


class BuildRelationshipsBetaGroups(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[typing.List[BuildRelationshipsBetaGroupsDataItem]] = (
        _PydanticField(alias="data", default=None)
    )
    links: typing.Optional[BuildRelationshipsBetaGroupsLinks] = _PydanticField(
        alias="links", default=None
    )
    meta: typing.Optional[PagingInformation] = _PydanticField(
        alias="meta", default=None
    )


class BuildRelationshipsBuildBetaDetail(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[BuildRelationshipsBuildBetaDetailData] = _PydanticField(
        alias="data", default=None
    )
    links: typing.Optional[BuildRelationshipsBuildBetaDetailLinks] = _PydanticField(
        alias="links", default=None
    )


class BuildRelationshipsBuildBundles(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[typing.List[BuildRelationshipsBuildBundlesDataItem]] = (
        _PydanticField(alias="data", default=None)
    )
    links: typing.Optional[BuildRelationshipsBuildBundlesLinks] = _PydanticField(
        alias="links", default=None
    )
    meta: typing.Optional[PagingInformation] = _PydanticField(
        alias="meta", default=None
    )


class BuildRelationshipsIcons(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[typing.List[BuildRelationshipsIconsDataItem]] = (
        _PydanticField(alias="data", default=None)
    )
    links: typing.Optional[BuildRelationshipsIconsLinks] = _PydanticField(
        alias="links", default=None
    )
    meta: typing.Optional[PagingInformation] = _PydanticField(
        alias="meta", default=None
    )


class BuildRelationshipsIndividualTesters(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[typing.List[BuildRelationshipsIndividualTestersDataItem]] = (
        _PydanticField(alias="data", default=None)
    )
    links: typing.Optional[BuildRelationshipsIndividualTestersLinks] = _PydanticField(
        alias="links", default=None
    )
    meta: typing.Optional[PagingInformation] = _PydanticField(
        alias="meta", default=None
    )


class BuildRelationshipsPreReleaseVersion(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[BuildRelationshipsPreReleaseVersionData] = _PydanticField(
        alias="data", default=None
    )
    links: typing.Optional[BuildRelationshipsPreReleaseVersionLinks] = _PydanticField(
        alias="links", default=None
    )


class CiActionTestConfiguration(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    kind: typing.Optional[
        typing_extensions.Literal["USE_SCHEME_SETTINGS", "SPECIFIC_TEST_PLANS"]
    ] = _PydanticField(alias="kind", default=None)
    test_destinations: typing.Optional[typing.List[CiTestDestination]] = _PydanticField(
        alias="testDestinations", default=None
    )
    test_plan_name: typing.Optional[str] = _PydanticField(
        alias="testPlanName", default=None
    )


class CiFilesAndFoldersRule(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    matchers: typing.Optional[typing.List[CiStartConditionFileMatcher]] = (
        _PydanticField(alias="matchers", default=None)
    )
    mode: typing.Optional[
        typing_extensions.Literal[
            "START_IF_ANY_FILE_MATCHES", "DO_NOT_START_IF_ALL_FILES_MATCH"
        ]
    ] = _PydanticField(alias="mode", default=None)


class CiBranchPatterns(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    is_all_match: typing.Optional[bool] = _PydanticField(
        alias="isAllMatch", default=None
    )
    patterns: typing.Optional[typing.List[CiBranchPatternsPatternsItem]] = (
        _PydanticField(alias="patterns", default=None)
    )


class CiManualBranchStartCondition(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    source: typing.Optional[CiBranchPatterns] = _PydanticField(
        alias="source", default=None
    )


class CiManualPullRequestStartCondition(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    destination: typing.Optional[CiBranchPatterns] = _PydanticField(
        alias="destination", default=None
    )
    source: typing.Optional[CiBranchPatterns] = _PydanticField(
        alias="source", default=None
    )


class CiTagPatterns(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    is_all_match: typing.Optional[bool] = _PydanticField(
        alias="isAllMatch", default=None
    )
    patterns: typing.Optional[typing.List[CiTagPatternsPatternsItem]] = _PydanticField(
        alias="patterns", default=None
    )


class CiPullRequestStartCondition(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    auto_cancel: typing.Optional[bool] = _PydanticField(
        alias="autoCancel", default=None
    )
    destination: typing.Optional[CiBranchPatterns] = _PydanticField(
        alias="destination", default=None
    )
    files_and_folders_rule: typing.Optional[CiFilesAndFoldersRule] = _PydanticField(
        alias="filesAndFoldersRule", default=None
    )
    source: typing.Optional[CiBranchPatterns] = _PydanticField(
        alias="source", default=None
    )


class CiScheduledStartCondition(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    schedule: typing.Optional[CiScheduledStartConditionSchedule] = _PydanticField(
        alias="schedule", default=None
    )
    source: typing.Optional[CiBranchPatterns] = _PydanticField(
        alias="source", default=None
    )


class CiTagStartCondition(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    auto_cancel: typing.Optional[bool] = _PydanticField(
        alias="autoCancel", default=None
    )
    files_and_folders_rule: typing.Optional[CiFilesAndFoldersRule] = _PydanticField(
        alias="filesAndFoldersRule", default=None
    )
    source: typing.Optional[CiTagPatterns] = _PydanticField(
        alias="source", default=None
    )


class CiWorkflowRelationshipsMacOsVersion(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[CiWorkflowRelationshipsMacOsVersionData] = _PydanticField(
        alias="data", default=None
    )
    links: typing.Optional[CiWorkflowRelationshipsMacOsVersionLinks] = _PydanticField(
        alias="links", default=None
    )


class CiWorkflowRelationshipsProduct(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[CiWorkflowRelationshipsProductData] = _PydanticField(
        alias="data", default=None
    )
    links: typing.Optional[CiWorkflowRelationshipsProductLinks] = _PydanticField(
        alias="links", default=None
    )


class CiWorkflowRelationshipsRepository(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[CiWorkflowRelationshipsRepositoryData] = _PydanticField(
        alias="data", default=None
    )
    links: typing.Optional[CiWorkflowRelationshipsRepositoryLinks] = _PydanticField(
        alias="links", default=None
    )


class CiWorkflowRelationshipsXcodeVersion(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[CiWorkflowRelationshipsXcodeVersionData] = _PydanticField(
        alias="data", default=None
    )
    links: typing.Optional[CiWorkflowRelationshipsXcodeVersionLinks] = _PydanticField(
        alias="links", default=None
    )


class CiProductRelationshipsApp(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[CiProductRelationshipsAppData] = _PydanticField(
        alias="data", default=None
    )
    links: typing.Optional[CiProductRelationshipsAppLinks] = _PydanticField(
        alias="links", default=None
    )


class CiProductRelationshipsBundleId(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[CiProductRelationshipsBundleIdData] = _PydanticField(
        alias="data", default=None
    )
    links: typing.Optional[CiProductRelationshipsBundleIdLinks] = _PydanticField(
        alias="links", default=None
    )


class CiProductRelationshipsPrimaryRepositories(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[
        typing.List[CiProductRelationshipsPrimaryRepositoriesDataItem]
    ] = _PydanticField(alias="data", default=None)
    links: typing.Optional[CiProductRelationshipsPrimaryRepositoriesLinks] = (
        _PydanticField(alias="links", default=None)
    )
    meta: typing.Optional[PagingInformation] = _PydanticField(
        alias="meta", default=None
    )


class ScmGitReferenceRelationshipsRepository(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[ScmGitReferenceRelationshipsRepositoryData] = _PydanticField(
        alias="data", default=None
    )
    links: typing.Optional[ScmGitReferenceRelationshipsRepositoryLinks] = (
        _PydanticField(alias="links", default=None)
    )


class ScmPullRequestRelationshipsRepository(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[ScmPullRequestRelationshipsRepositoryData] = _PydanticField(
        alias="data", default=None
    )
    links: typing.Optional[ScmPullRequestRelationshipsRepositoryLinks] = _PydanticField(
        alias="links", default=None
    )


class CiBuildRunAttributes(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    cancel_reason: typing.Optional[
        typing_extensions.Literal["AUTOMATICALLY_BY_NEWER_BUILD", "MANUALLY_BY_USER"]
    ] = _PydanticField(alias="cancelReason", default=None)
    completion_status: typing.Optional[
        typing_extensions.Literal[
            "SUCCEEDED", "FAILED", "ERRORED", "CANCELED", "SKIPPED"
        ]
    ] = _PydanticField(alias="completionStatus", default=None)
    created_date: typing.Optional[str] = _PydanticField(
        alias="createdDate", default=None
    )
    destination_commit: typing.Optional[CiBuildRunAttributesDestinationCommit] = (
        _PydanticField(alias="destinationCommit", default=None)
    )
    execution_progress: typing.Optional[
        typing_extensions.Literal["PENDING", "RUNNING", "COMPLETE"]
    ] = _PydanticField(alias="executionProgress", default=None)
    finished_date: typing.Optional[str] = _PydanticField(
        alias="finishedDate", default=None
    )
    is_pull_request_build: typing.Optional[bool] = _PydanticField(
        alias="isPullRequestBuild", default=None
    )
    issue_counts: typing.Optional[CiIssueCounts] = _PydanticField(
        alias="issueCounts", default=None
    )
    number: typing.Optional[int] = _PydanticField(alias="number", default=None)
    source_commit: typing.Optional[CiBuildRunAttributesSourceCommit] = _PydanticField(
        alias="sourceCommit", default=None
    )
    start_reason: typing.Optional[
        typing_extensions.Literal[
            "GIT_REF_CHANGE",
            "MANUAL",
            "MANUAL_REBUILD",
            "PULL_REQUEST_OPEN",
            "PULL_REQUEST_UPDATE",
            "SCHEDULE",
        ]
    ] = _PydanticField(alias="startReason", default=None)
    started_date: typing.Optional[str] = _PydanticField(
        alias="startedDate", default=None
    )


class CiBuildRunRelationshipsBuilds(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[typing.List[CiBuildRunRelationshipsBuildsDataItem]] = (
        _PydanticField(alias="data", default=None)
    )
    links: typing.Optional[CiBuildRunRelationshipsBuildsLinks] = _PydanticField(
        alias="links", default=None
    )
    meta: typing.Optional[PagingInformation] = _PydanticField(
        alias="meta", default=None
    )


class BuildRelationships(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    app: typing.Optional[BuildRelationshipsApp] = _PydanticField(
        alias="app", default=None
    )
    app_encryption_declaration: typing.Optional[
        BuildRelationshipsAppEncryptionDeclaration
    ] = _PydanticField(alias="appEncryptionDeclaration", default=None)
    app_store_version: typing.Optional[BuildRelationshipsAppStoreVersion] = (
        _PydanticField(alias="appStoreVersion", default=None)
    )
    beta_app_review_submission: typing.Optional[
        BuildRelationshipsBetaAppReviewSubmission
    ] = _PydanticField(alias="betaAppReviewSubmission", default=None)
    beta_build_localizations: typing.Optional[
        BuildRelationshipsBetaBuildLocalizations
    ] = _PydanticField(alias="betaBuildLocalizations", default=None)
    beta_groups: typing.Optional[BuildRelationshipsBetaGroups] = _PydanticField(
        alias="betaGroups", default=None
    )
    build_beta_detail: typing.Optional[BuildRelationshipsBuildBetaDetail] = (
        _PydanticField(alias="buildBetaDetail", default=None)
    )
    build_bundles: typing.Optional[BuildRelationshipsBuildBundles] = _PydanticField(
        alias="buildBundles", default=None
    )
    icons: typing.Optional[BuildRelationshipsIcons] = _PydanticField(
        alias="icons", default=None
    )
    individual_testers: typing.Optional[BuildRelationshipsIndividualTesters] = (
        _PydanticField(alias="individualTesters", default=None)
    )
    pre_release_version: typing.Optional[BuildRelationshipsPreReleaseVersion] = (
        _PydanticField(alias="preReleaseVersion", default=None)
    )


class CiAction(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    action_type: typing.Optional[
        typing_extensions.Literal["BUILD", "ANALYZE", "TEST", "ARCHIVE"]
    ] = _PydanticField(alias="actionType", default=None)
    build_distribution_audience: typing.Optional[
        typing_extensions.Literal["INTERNAL_ONLY", "APP_STORE_ELIGIBLE"]
    ] = _PydanticField(alias="buildDistributionAudience", default=None)
    destination: typing.Optional[
        typing_extensions.Literal[
            "ANY_IOS_DEVICE",
            "ANY_IOS_SIMULATOR",
            "ANY_TVOS_DEVICE",
            "ANY_TVOS_SIMULATOR",
            "ANY_WATCHOS_DEVICE",
            "ANY_WATCHOS_SIMULATOR",
            "ANY_MAC",
            "ANY_MAC_CATALYST",
            "ANY_VISIONOS_DEVICE",
            "ANY_VISIONOS_SIMULATOR",
        ]
    ] = _PydanticField(alias="destination", default=None)
    is_required_to_pass: typing.Optional[bool] = _PydanticField(
        alias="isRequiredToPass", default=None
    )
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)
    platform_field: typing.Optional[
        typing_extensions.Literal["MACOS", "IOS", "TVOS", "WATCHOS", "VISIONOS"]
    ] = _PydanticField(alias="platform", default=None)
    scheme: typing.Optional[str] = _PydanticField(alias="scheme", default=None)
    test_configuration: typing.Optional[CiActionTestConfiguration] = _PydanticField(
        alias="testConfiguration", default=None
    )


class CiBranchStartCondition(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    auto_cancel: typing.Optional[bool] = _PydanticField(
        alias="autoCancel", default=None
    )
    files_and_folders_rule: typing.Optional[CiFilesAndFoldersRule] = _PydanticField(
        alias="filesAndFoldersRule", default=None
    )
    source: typing.Optional[CiBranchPatterns] = _PydanticField(
        alias="source", default=None
    )


class CiManualTagStartCondition(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    source: typing.Optional[CiTagPatterns] = _PydanticField(
        alias="source", default=None
    )


class CiWorkflowRelationships(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    mac_os_version: typing.Optional[CiWorkflowRelationshipsMacOsVersion] = (
        _PydanticField(alias="macOsVersion", default=None)
    )
    product: typing.Optional[CiWorkflowRelationshipsProduct] = _PydanticField(
        alias="product", default=None
    )
    repository: typing.Optional[CiWorkflowRelationshipsRepository] = _PydanticField(
        alias="repository", default=None
    )
    xcode_version: typing.Optional[CiWorkflowRelationshipsXcodeVersion] = (
        _PydanticField(alias="xcodeVersion", default=None)
    )


class CiProductRelationships(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    app: typing.Optional[CiProductRelationshipsApp] = _PydanticField(
        alias="app", default=None
    )
    bundle_id: typing.Optional[CiProductRelationshipsBundleId] = _PydanticField(
        alias="bundleId", default=None
    )
    primary_repositories: typing.Optional[CiProductRelationshipsPrimaryRepositories] = (
        _PydanticField(alias="primaryRepositories", default=None)
    )


class ScmGitReferenceRelationships(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    repository: typing.Optional[ScmGitReferenceRelationshipsRepository] = (
        _PydanticField(alias="repository", default=None)
    )


class ScmPullRequestRelationships(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    repository: typing.Optional[ScmPullRequestRelationshipsRepository] = _PydanticField(
        alias="repository", default=None
    )


class CiBuildRunRelationships(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    builds: typing.Optional[CiBuildRunRelationshipsBuilds] = _PydanticField(
        alias="builds", default=None
    )
    destination_branch: typing.Optional[CiBuildRunRelationshipsDestinationBranch] = (
        _PydanticField(alias="destinationBranch", default=None)
    )
    product: typing.Optional[CiBuildRunRelationshipsProduct] = _PydanticField(
        alias="product", default=None
    )
    pull_request: typing.Optional[CiBuildRunRelationshipsPullRequest] = _PydanticField(
        alias="pullRequest", default=None
    )
    source_branch_or_tag: typing.Optional[CiBuildRunRelationshipsSourceBranchOrTag] = (
        _PydanticField(alias="sourceBranchOrTag", default=None)
    )
    workflow: typing.Optional[CiBuildRunRelationshipsWorkflow] = _PydanticField(
        alias="workflow", default=None
    )


class Build(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    attributes: typing.Optional[BuildAttributes] = _PydanticField(
        alias="attributes", default=None
    )
    id: str = _PydanticField(alias="id")
    links: typing.Optional[ResourceLinks] = _PydanticField(alias="links", default=None)
    relationships: typing.Optional[BuildRelationships] = _PydanticField(
        alias="relationships", default=None
    )
    type: typing_extensions.Literal["builds"] = _PydanticField(alias="type")


class CiWorkflowAttributes(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    actions: typing.Optional[typing.List[CiAction]] = _PydanticField(
        alias="actions", default=None
    )
    branch_start_condition: typing.Optional[CiBranchStartCondition] = _PydanticField(
        alias="branchStartCondition", default=None
    )
    clean: typing.Optional[bool] = _PydanticField(alias="clean", default=None)
    container_file_path: typing.Optional[str] = _PydanticField(
        alias="containerFilePath", default=None
    )
    description: typing.Optional[str] = _PydanticField(
        alias="description", default=None
    )
    is_enabled: typing.Optional[bool] = _PydanticField(alias="isEnabled", default=None)
    is_locked_for_editing: typing.Optional[bool] = _PydanticField(
        alias="isLockedForEditing", default=None
    )
    last_modified_date: typing.Optional[str] = _PydanticField(
        alias="lastModifiedDate", default=None
    )
    manual_branch_start_condition: typing.Optional[CiManualBranchStartCondition] = (
        _PydanticField(alias="manualBranchStartCondition", default=None)
    )
    manual_pull_request_start_condition: typing.Optional[
        CiManualPullRequestStartCondition
    ] = _PydanticField(alias="manualPullRequestStartCondition", default=None)
    manual_tag_start_condition: typing.Optional[CiManualTagStartCondition] = (
        _PydanticField(alias="manualTagStartCondition", default=None)
    )
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)
    pull_request_start_condition: typing.Optional[CiPullRequestStartCondition] = (
        _PydanticField(alias="pullRequestStartCondition", default=None)
    )
    scheduled_start_condition: typing.Optional[CiScheduledStartCondition] = (
        _PydanticField(alias="scheduledStartCondition", default=None)
    )
    tag_start_condition: typing.Optional[CiTagStartCondition] = _PydanticField(
        alias="tagStartCondition", default=None
    )


class CiProduct(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    attributes: typing.Optional[CiProductAttributes] = _PydanticField(
        alias="attributes", default=None
    )
    id: str = _PydanticField(alias="id")
    links: typing.Optional[ResourceLinks] = _PydanticField(alias="links", default=None)
    relationships: typing.Optional[CiProductRelationships] = _PydanticField(
        alias="relationships", default=None
    )
    type: typing_extensions.Literal["ciProducts"] = _PydanticField(alias="type")


class ScmGitReference(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    attributes: typing.Optional[ScmGitReferenceAttributes] = _PydanticField(
        alias="attributes", default=None
    )
    id: str = _PydanticField(alias="id")
    links: typing.Optional[ResourceLinks] = _PydanticField(alias="links", default=None)
    relationships: typing.Optional[ScmGitReferenceRelationships] = _PydanticField(
        alias="relationships", default=None
    )
    type: typing_extensions.Literal["scmGitReferences"] = _PydanticField(alias="type")


class ScmPullRequest(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    attributes: typing.Optional[ScmPullRequestAttributes] = _PydanticField(
        alias="attributes", default=None
    )
    id: str = _PydanticField(alias="id")
    links: typing.Optional[ResourceLinks] = _PydanticField(alias="links", default=None)
    relationships: typing.Optional[ScmPullRequestRelationships] = _PydanticField(
        alias="relationships", default=None
    )
    type: typing_extensions.Literal["scmPullRequests"] = _PydanticField(alias="type")


class CiBuildRun(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    attributes: typing.Optional[CiBuildRunAttributes] = _PydanticField(
        alias="attributes", default=None
    )
    id: str = _PydanticField(alias="id")
    links: typing.Optional[ResourceLinks] = _PydanticField(alias="links", default=None)
    relationships: typing.Optional[CiBuildRunRelationships] = _PydanticField(
        alias="relationships", default=None
    )
    type: typing_extensions.Literal["ciBuildRuns"] = _PydanticField(alias="type")


class CiWorkflow(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    attributes: typing.Optional[CiWorkflowAttributes] = _PydanticField(
        alias="attributes", default=None
    )
    id: str = _PydanticField(alias="id")
    links: typing.Optional[ResourceLinks] = _PydanticField(alias="links", default=None)
    relationships: typing.Optional[CiWorkflowRelationships] = _PydanticField(
        alias="relationships", default=None
    )
    type: typing_extensions.Literal["ciWorkflows"] = _PydanticField(alias="type")


class CiBuildRunResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: CiBuildRun = _PydanticField(alias="data")
    included: typing.Optional[
        typing.List[
            typing.Union[Build, CiWorkflow, CiProduct, ScmGitReference, ScmPullRequest]
        ]
    ] = _PydanticField(alias="included", default=None)
    links: DocumentLinks = _PydanticField(alias="links")
