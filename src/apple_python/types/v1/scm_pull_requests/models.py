"""File Generated by Sideko (sideko.dev)"""

import io
import typing
import typing_extensions
from pydantic import (
    BaseModel as _PydanticBaseModel,
    Field as _PydanticField,
    ConfigDict as _PydanticConfigDict,
)

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class ScmPullRequestAttributes(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    destination_branch_name: typing.Optional[str] = _PydanticField(
        alias="destinationBranchName", default=None
    )
    destination_repository_name: typing.Optional[str] = _PydanticField(
        alias="destinationRepositoryName", default=None
    )
    destination_repository_owner: typing.Optional[str] = _PydanticField(
        alias="destinationRepositoryOwner", default=None
    )
    is_closed: typing.Optional[bool] = _PydanticField(alias="isClosed", default=None)
    is_cross_repository: typing.Optional[bool] = _PydanticField(
        alias="isCrossRepository", default=None
    )
    number: typing.Optional[int] = _PydanticField(alias="number", default=None)
    source_branch_name: typing.Optional[str] = _PydanticField(
        alias="sourceBranchName", default=None
    )
    source_repository_name: typing.Optional[str] = _PydanticField(
        alias="sourceRepositoryName", default=None
    )
    source_repository_owner: typing.Optional[str] = _PydanticField(
        alias="sourceRepositoryOwner", default=None
    )
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)
    web_url: typing.Optional[str] = _PydanticField(alias="webUrl", default=None)


class ResourceLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class ScmPullRequestRelationshipsRepositoryData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["scmRepositories"] = _PydanticField(alias="type")


class ScmPullRequestRelationshipsRepositoryLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class ScmRepositoryAttributes(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    http_clone_url: typing.Optional[str] = _PydanticField(
        alias="httpCloneUrl", default=None
    )
    last_accessed_date: typing.Optional[str] = _PydanticField(
        alias="lastAccessedDate", default=None
    )
    owner_name: typing.Optional[str] = _PydanticField(alias="ownerName", default=None)
    repository_name: typing.Optional[str] = _PydanticField(
        alias="repositoryName", default=None
    )
    ssh_clone_url: typing.Optional[str] = _PydanticField(
        alias="sshCloneUrl", default=None
    )


class ScmRepositoryRelationshipsDefaultBranchData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["scmGitReferences"] = _PydanticField(alias="type")


class ScmRepositoryRelationshipsDefaultBranchLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class ScmRepositoryRelationshipsScmProviderData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["scmProviders"] = _PydanticField(alias="type")


class ScmRepositoryRelationshipsScmProviderLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class DocumentLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    self: str = _PydanticField(alias="self")


class ScmPullRequestRelationshipsRepository(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[ScmPullRequestRelationshipsRepositoryData] = _PydanticField(
        alias="data", default=None
    )
    links: typing.Optional[ScmPullRequestRelationshipsRepositoryLinks] = _PydanticField(
        alias="links", default=None
    )


class ScmRepositoryRelationshipsDefaultBranch(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[ScmRepositoryRelationshipsDefaultBranchData] = _PydanticField(
        alias="data", default=None
    )
    links: typing.Optional[ScmRepositoryRelationshipsDefaultBranchLinks] = (
        _PydanticField(alias="links", default=None)
    )


class ScmRepositoryRelationshipsScmProvider(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[ScmRepositoryRelationshipsScmProviderData] = _PydanticField(
        alias="data", default=None
    )
    links: typing.Optional[ScmRepositoryRelationshipsScmProviderLinks] = _PydanticField(
        alias="links", default=None
    )


class ScmPullRequestRelationships(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    repository: typing.Optional[ScmPullRequestRelationshipsRepository] = _PydanticField(
        alias="repository", default=None
    )


class ScmRepositoryRelationships(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    default_branch: typing.Optional[ScmRepositoryRelationshipsDefaultBranch] = (
        _PydanticField(alias="defaultBranch", default=None)
    )
    scm_provider: typing.Optional[ScmRepositoryRelationshipsScmProvider] = (
        _PydanticField(alias="scmProvider", default=None)
    )


class ScmPullRequest(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    attributes: typing.Optional[ScmPullRequestAttributes] = _PydanticField(
        alias="attributes", default=None
    )
    id: str = _PydanticField(alias="id")
    links: typing.Optional[ResourceLinks] = _PydanticField(alias="links", default=None)
    relationships: typing.Optional[ScmPullRequestRelationships] = _PydanticField(
        alias="relationships", default=None
    )
    type: typing_extensions.Literal["scmPullRequests"] = _PydanticField(alias="type")


class ScmRepository(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    attributes: typing.Optional[ScmRepositoryAttributes] = _PydanticField(
        alias="attributes", default=None
    )
    id: str = _PydanticField(alias="id")
    links: typing.Optional[ResourceLinks] = _PydanticField(alias="links", default=None)
    relationships: typing.Optional[ScmRepositoryRelationships] = _PydanticField(
        alias="relationships", default=None
    )
    type: typing_extensions.Literal["scmRepositories"] = _PydanticField(alias="type")


class ScmPullRequestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: ScmPullRequest = _PydanticField(alias="data")
    included: typing.Optional[typing.List[ScmRepository]] = _PydanticField(
        alias="included", default=None
    )
    links: DocumentLinks = _PydanticField(alias="links")
