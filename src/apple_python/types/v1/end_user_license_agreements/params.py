"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class EndUserLicenseAgreementUpdateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    agreement_text: typing_extensions.NotRequired[str]


class _SerializerEndUserLicenseAgreementUpdateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for EndUserLicenseAgreementUpdateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    agreement_text: typing.Optional[str] = pydantic.Field(
        alias="agreementText", default=None
    )


class EndUserLicenseAgreementUpdateRequestDataRelationshipsTerritoriesDataItem(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["territories"]]


class _SerializerEndUserLicenseAgreementUpdateRequestDataRelationshipsTerritoriesDataItem(
    pydantic.BaseModel
):
    """
    Serializer for EndUserLicenseAgreementUpdateRequestDataRelationshipsTerritoriesDataItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["territories"] = pydantic.Field(alias="type")


class EndUserLicenseAgreementCreateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    agreement_text: typing_extensions.Required[str]


class _SerializerEndUserLicenseAgreementCreateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for EndUserLicenseAgreementCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    agreement_text: str = pydantic.Field(alias="agreementText")


class EndUserLicenseAgreementCreateRequestDataRelationshipsAppData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["apps"]]


class _SerializerEndUserLicenseAgreementCreateRequestDataRelationshipsAppData(
    pydantic.BaseModel
):
    """
    Serializer for EndUserLicenseAgreementCreateRequestDataRelationshipsAppData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["apps"] = pydantic.Field(alias="type")


class EndUserLicenseAgreementCreateRequestDataRelationshipsTerritoriesDataItem(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["territories"]]


class _SerializerEndUserLicenseAgreementCreateRequestDataRelationshipsTerritoriesDataItem(
    pydantic.BaseModel
):
    """
    Serializer for EndUserLicenseAgreementCreateRequestDataRelationshipsTerritoriesDataItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["territories"] = pydantic.Field(alias="type")


class EndUserLicenseAgreementUpdateRequestDataRelationshipsTerritories(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        typing.List[
            EndUserLicenseAgreementUpdateRequestDataRelationshipsTerritoriesDataItem
        ]
    ]


class _SerializerEndUserLicenseAgreementUpdateRequestDataRelationshipsTerritories(
    pydantic.BaseModel
):
    """
    Serializer for EndUserLicenseAgreementUpdateRequestDataRelationshipsTerritories handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        typing.List[
            _SerializerEndUserLicenseAgreementUpdateRequestDataRelationshipsTerritoriesDataItem
        ]
    ] = pydantic.Field(alias="data", default=None)


class EndUserLicenseAgreementCreateRequestDataRelationshipsApp(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        EndUserLicenseAgreementCreateRequestDataRelationshipsAppData
    ]


class _SerializerEndUserLicenseAgreementCreateRequestDataRelationshipsApp(
    pydantic.BaseModel
):
    """
    Serializer for EndUserLicenseAgreementCreateRequestDataRelationshipsApp handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerEndUserLicenseAgreementCreateRequestDataRelationshipsAppData = (
        pydantic.Field(alias="data")
    )


class EndUserLicenseAgreementCreateRequestDataRelationshipsTerritories(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        typing.List[
            EndUserLicenseAgreementCreateRequestDataRelationshipsTerritoriesDataItem
        ]
    ]


class _SerializerEndUserLicenseAgreementCreateRequestDataRelationshipsTerritories(
    pydantic.BaseModel
):
    """
    Serializer for EndUserLicenseAgreementCreateRequestDataRelationshipsTerritories handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.List[
        _SerializerEndUserLicenseAgreementCreateRequestDataRelationshipsTerritoriesDataItem
    ] = pydantic.Field(alias="data")


class EndUserLicenseAgreementUpdateRequestDataRelationships(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    territories: typing_extensions.NotRequired[
        EndUserLicenseAgreementUpdateRequestDataRelationshipsTerritories
    ]


class _SerializerEndUserLicenseAgreementUpdateRequestDataRelationships(
    pydantic.BaseModel
):
    """
    Serializer for EndUserLicenseAgreementUpdateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    territories: typing.Optional[
        _SerializerEndUserLicenseAgreementUpdateRequestDataRelationshipsTerritories
    ] = pydantic.Field(alias="territories", default=None)


class EndUserLicenseAgreementCreateRequestDataRelationships(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    app: typing_extensions.Required[
        EndUserLicenseAgreementCreateRequestDataRelationshipsApp
    ]
    territories: typing_extensions.Required[
        EndUserLicenseAgreementCreateRequestDataRelationshipsTerritories
    ]


class _SerializerEndUserLicenseAgreementCreateRequestDataRelationships(
    pydantic.BaseModel
):
    """
    Serializer for EndUserLicenseAgreementCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    app: _SerializerEndUserLicenseAgreementCreateRequestDataRelationshipsApp = (
        pydantic.Field(alias="app")
    )
    territories: _SerializerEndUserLicenseAgreementCreateRequestDataRelationshipsTerritories = pydantic.Field(
        alias="territories"
    )


class EndUserLicenseAgreementUpdateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[
        EndUserLicenseAgreementUpdateRequestDataAttributes
    ]
    id: typing_extensions.Required[str]
    relationships: typing_extensions.NotRequired[
        EndUserLicenseAgreementUpdateRequestDataRelationships
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["endUserLicenseAgreements"]
    ]


class _SerializerEndUserLicenseAgreementUpdateRequestData(pydantic.BaseModel):
    """
    Serializer for EndUserLicenseAgreementUpdateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[
        _SerializerEndUserLicenseAgreementUpdateRequestDataAttributes
    ] = pydantic.Field(alias="attributes", default=None)
    id: str = pydantic.Field(alias="id")
    relationships: typing.Optional[
        _SerializerEndUserLicenseAgreementUpdateRequestDataRelationships
    ] = pydantic.Field(alias="relationships", default=None)
    type: typing_extensions.Literal["endUserLicenseAgreements"] = pydantic.Field(
        alias="type"
    )


class EndUserLicenseAgreementCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[
        EndUserLicenseAgreementCreateRequestDataAttributes
    ]
    relationships: typing_extensions.Required[
        EndUserLicenseAgreementCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["endUserLicenseAgreements"]
    ]


class _SerializerEndUserLicenseAgreementCreateRequestData(pydantic.BaseModel):
    """
    Serializer for EndUserLicenseAgreementCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerEndUserLicenseAgreementCreateRequestDataAttributes = (
        pydantic.Field(alias="attributes")
    )
    relationships: _SerializerEndUserLicenseAgreementCreateRequestDataRelationships = (
        pydantic.Field(alias="relationships")
    )
    type: typing_extensions.Literal["endUserLicenseAgreements"] = pydantic.Field(
        alias="type"
    )


class EndUserLicenseAgreementUpdateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[EndUserLicenseAgreementUpdateRequestData]


class _SerializerEndUserLicenseAgreementUpdateRequest(pydantic.BaseModel):
    """
    Serializer for EndUserLicenseAgreementUpdateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerEndUserLicenseAgreementUpdateRequestData = pydantic.Field(
        alias="data"
    )


class EndUserLicenseAgreementCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[EndUserLicenseAgreementCreateRequestData]


class _SerializerEndUserLicenseAgreementCreateRequest(pydantic.BaseModel):
    """
    Serializer for EndUserLicenseAgreementCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerEndUserLicenseAgreementCreateRequestData = pydantic.Field(
        alias="data"
    )
