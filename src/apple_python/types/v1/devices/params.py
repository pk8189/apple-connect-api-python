"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class DeviceUpdateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    name: typing_extensions.NotRequired[str]
    status: typing_extensions.NotRequired[
        typing_extensions.Literal["ENABLED", "DISABLED"]
    ]


class _SerializerDeviceUpdateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for DeviceUpdateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    status: typing.Optional[typing_extensions.Literal["ENABLED", "DISABLED"]] = (
        pydantic.Field(alias="status", default=None)
    )


class DeviceCreateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    name: typing_extensions.Required[str]
    platform_field: typing_extensions.Required[
        typing_extensions.Literal["IOS", "MAC_OS"]
    ]
    udid: typing_extensions.Required[str]


class _SerializerDeviceCreateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for DeviceCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    name: str = pydantic.Field(alias="name")
    platform_field: typing_extensions.Literal["IOS", "MAC_OS"] = pydantic.Field(
        alias="platform"
    )
    udid: str = pydantic.Field(alias="udid")


class DeviceUpdateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[DeviceUpdateRequestDataAttributes]
    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["devices"]]


class _SerializerDeviceUpdateRequestData(pydantic.BaseModel):
    """
    Serializer for DeviceUpdateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[_SerializerDeviceUpdateRequestDataAttributes] = (
        pydantic.Field(alias="attributes", default=None)
    )
    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["devices"] = pydantic.Field(alias="type")


class DeviceCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[DeviceCreateRequestDataAttributes]
    type: typing_extensions.Required[typing_extensions.Literal["devices"]]


class _SerializerDeviceCreateRequestData(pydantic.BaseModel):
    """
    Serializer for DeviceCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerDeviceCreateRequestDataAttributes = pydantic.Field(
        alias="attributes"
    )
    type: typing_extensions.Literal["devices"] = pydantic.Field(alias="type")


class DeviceUpdateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[DeviceUpdateRequestData]


class _SerializerDeviceUpdateRequest(pydantic.BaseModel):
    """
    Serializer for DeviceUpdateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerDeviceUpdateRequestData = pydantic.Field(alias="data")


class DeviceCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[DeviceCreateRequestData]


class _SerializerDeviceCreateRequest(pydantic.BaseModel):
    """
    Serializer for DeviceCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerDeviceCreateRequestData = pydantic.Field(alias="data")
