"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class GameCenterLeaderboardReleaseCreateRequestDataRelationshipsGameCenterDetailData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["gameCenterDetails"]]


class _SerializerGameCenterLeaderboardReleaseCreateRequestDataRelationshipsGameCenterDetailData(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterLeaderboardReleaseCreateRequestDataRelationshipsGameCenterDetailData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["gameCenterDetails"] = pydantic.Field(alias="type")


class GameCenterLeaderboardReleaseCreateRequestDataRelationshipsGameCenterLeaderboardData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["gameCenterLeaderboards"]
    ]


class _SerializerGameCenterLeaderboardReleaseCreateRequestDataRelationshipsGameCenterLeaderboardData(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterLeaderboardReleaseCreateRequestDataRelationshipsGameCenterLeaderboardData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["gameCenterLeaderboards"] = pydantic.Field(
        alias="type"
    )


class GameCenterLeaderboardReleaseCreateRequestDataRelationshipsGameCenterDetail(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        GameCenterLeaderboardReleaseCreateRequestDataRelationshipsGameCenterDetailData
    ]


class _SerializerGameCenterLeaderboardReleaseCreateRequestDataRelationshipsGameCenterDetail(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterLeaderboardReleaseCreateRequestDataRelationshipsGameCenterDetail handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerGameCenterLeaderboardReleaseCreateRequestDataRelationshipsGameCenterDetailData = pydantic.Field(
        alias="data"
    )


class GameCenterLeaderboardReleaseCreateRequestDataRelationshipsGameCenterLeaderboard(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        GameCenterLeaderboardReleaseCreateRequestDataRelationshipsGameCenterLeaderboardData
    ]


class _SerializerGameCenterLeaderboardReleaseCreateRequestDataRelationshipsGameCenterLeaderboard(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterLeaderboardReleaseCreateRequestDataRelationshipsGameCenterLeaderboard handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerGameCenterLeaderboardReleaseCreateRequestDataRelationshipsGameCenterLeaderboardData = pydantic.Field(
        alias="data"
    )


class GameCenterLeaderboardReleaseCreateRequestDataRelationships(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    game_center_detail: typing_extensions.Required[
        GameCenterLeaderboardReleaseCreateRequestDataRelationshipsGameCenterDetail
    ]
    game_center_leaderboard: typing_extensions.Required[
        GameCenterLeaderboardReleaseCreateRequestDataRelationshipsGameCenterLeaderboard
    ]


class _SerializerGameCenterLeaderboardReleaseCreateRequestDataRelationships(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterLeaderboardReleaseCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    game_center_detail: _SerializerGameCenterLeaderboardReleaseCreateRequestDataRelationshipsGameCenterDetail = pydantic.Field(
        alias="gameCenterDetail"
    )
    game_center_leaderboard: _SerializerGameCenterLeaderboardReleaseCreateRequestDataRelationshipsGameCenterLeaderboard = pydantic.Field(
        alias="gameCenterLeaderboard"
    )


class GameCenterLeaderboardReleaseCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    relationships: typing_extensions.Required[
        GameCenterLeaderboardReleaseCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["gameCenterLeaderboardReleases"]
    ]


class _SerializerGameCenterLeaderboardReleaseCreateRequestData(pydantic.BaseModel):
    """
    Serializer for GameCenterLeaderboardReleaseCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    relationships: _SerializerGameCenterLeaderboardReleaseCreateRequestDataRelationships = pydantic.Field(
        alias="relationships"
    )
    type: typing_extensions.Literal["gameCenterLeaderboardReleases"] = pydantic.Field(
        alias="type"
    )


class GameCenterLeaderboardReleaseCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[GameCenterLeaderboardReleaseCreateRequestData]


class _SerializerGameCenterLeaderboardReleaseCreateRequest(pydantic.BaseModel):
    """
    Serializer for GameCenterLeaderboardReleaseCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerGameCenterLeaderboardReleaseCreateRequestData = pydantic.Field(
        alias="data"
    )
