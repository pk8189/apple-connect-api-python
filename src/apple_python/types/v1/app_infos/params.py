"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class AppInfoUpdateRequestDataRelationshipsPrimaryCategoryData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["appCategories"]]


class _SerializerAppInfoUpdateRequestDataRelationshipsPrimaryCategoryData(
    pydantic.BaseModel
):
    """
    Serializer for AppInfoUpdateRequestDataRelationshipsPrimaryCategoryData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["appCategories"] = pydantic.Field(alias="type")


class AppInfoUpdateRequestDataRelationshipsPrimarySubcategoryOneData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["appCategories"]]


class _SerializerAppInfoUpdateRequestDataRelationshipsPrimarySubcategoryOneData(
    pydantic.BaseModel
):
    """
    Serializer for AppInfoUpdateRequestDataRelationshipsPrimarySubcategoryOneData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["appCategories"] = pydantic.Field(alias="type")


class AppInfoUpdateRequestDataRelationshipsPrimarySubcategoryTwoData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["appCategories"]]


class _SerializerAppInfoUpdateRequestDataRelationshipsPrimarySubcategoryTwoData(
    pydantic.BaseModel
):
    """
    Serializer for AppInfoUpdateRequestDataRelationshipsPrimarySubcategoryTwoData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["appCategories"] = pydantic.Field(alias="type")


class AppInfoUpdateRequestDataRelationshipsSecondaryCategoryData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["appCategories"]]


class _SerializerAppInfoUpdateRequestDataRelationshipsSecondaryCategoryData(
    pydantic.BaseModel
):
    """
    Serializer for AppInfoUpdateRequestDataRelationshipsSecondaryCategoryData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["appCategories"] = pydantic.Field(alias="type")


class AppInfoUpdateRequestDataRelationshipsSecondarySubcategoryOneData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["appCategories"]]


class _SerializerAppInfoUpdateRequestDataRelationshipsSecondarySubcategoryOneData(
    pydantic.BaseModel
):
    """
    Serializer for AppInfoUpdateRequestDataRelationshipsSecondarySubcategoryOneData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["appCategories"] = pydantic.Field(alias="type")


class AppInfoUpdateRequestDataRelationshipsSecondarySubcategoryTwoData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["appCategories"]]


class _SerializerAppInfoUpdateRequestDataRelationshipsSecondarySubcategoryTwoData(
    pydantic.BaseModel
):
    """
    Serializer for AppInfoUpdateRequestDataRelationshipsSecondarySubcategoryTwoData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["appCategories"] = pydantic.Field(alias="type")


class AppInfoUpdateRequestDataRelationshipsPrimaryCategory(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        AppInfoUpdateRequestDataRelationshipsPrimaryCategoryData
    ]


class _SerializerAppInfoUpdateRequestDataRelationshipsPrimaryCategory(
    pydantic.BaseModel
):
    """
    Serializer for AppInfoUpdateRequestDataRelationshipsPrimaryCategory handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        _SerializerAppInfoUpdateRequestDataRelationshipsPrimaryCategoryData
    ] = pydantic.Field(alias="data", default=None)


class AppInfoUpdateRequestDataRelationshipsPrimarySubcategoryOne(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        AppInfoUpdateRequestDataRelationshipsPrimarySubcategoryOneData
    ]


class _SerializerAppInfoUpdateRequestDataRelationshipsPrimarySubcategoryOne(
    pydantic.BaseModel
):
    """
    Serializer for AppInfoUpdateRequestDataRelationshipsPrimarySubcategoryOne handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        _SerializerAppInfoUpdateRequestDataRelationshipsPrimarySubcategoryOneData
    ] = pydantic.Field(alias="data", default=None)


class AppInfoUpdateRequestDataRelationshipsPrimarySubcategoryTwo(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        AppInfoUpdateRequestDataRelationshipsPrimarySubcategoryTwoData
    ]


class _SerializerAppInfoUpdateRequestDataRelationshipsPrimarySubcategoryTwo(
    pydantic.BaseModel
):
    """
    Serializer for AppInfoUpdateRequestDataRelationshipsPrimarySubcategoryTwo handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        _SerializerAppInfoUpdateRequestDataRelationshipsPrimarySubcategoryTwoData
    ] = pydantic.Field(alias="data", default=None)


class AppInfoUpdateRequestDataRelationshipsSecondaryCategory(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        AppInfoUpdateRequestDataRelationshipsSecondaryCategoryData
    ]


class _SerializerAppInfoUpdateRequestDataRelationshipsSecondaryCategory(
    pydantic.BaseModel
):
    """
    Serializer for AppInfoUpdateRequestDataRelationshipsSecondaryCategory handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        _SerializerAppInfoUpdateRequestDataRelationshipsSecondaryCategoryData
    ] = pydantic.Field(alias="data", default=None)


class AppInfoUpdateRequestDataRelationshipsSecondarySubcategoryOne(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        AppInfoUpdateRequestDataRelationshipsSecondarySubcategoryOneData
    ]


class _SerializerAppInfoUpdateRequestDataRelationshipsSecondarySubcategoryOne(
    pydantic.BaseModel
):
    """
    Serializer for AppInfoUpdateRequestDataRelationshipsSecondarySubcategoryOne handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        _SerializerAppInfoUpdateRequestDataRelationshipsSecondarySubcategoryOneData
    ] = pydantic.Field(alias="data", default=None)


class AppInfoUpdateRequestDataRelationshipsSecondarySubcategoryTwo(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        AppInfoUpdateRequestDataRelationshipsSecondarySubcategoryTwoData
    ]


class _SerializerAppInfoUpdateRequestDataRelationshipsSecondarySubcategoryTwo(
    pydantic.BaseModel
):
    """
    Serializer for AppInfoUpdateRequestDataRelationshipsSecondarySubcategoryTwo handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        _SerializerAppInfoUpdateRequestDataRelationshipsSecondarySubcategoryTwoData
    ] = pydantic.Field(alias="data", default=None)


class AppInfoUpdateRequestDataRelationships(typing_extensions.TypedDict):
    """
    No description specified
    """

    primary_category: typing_extensions.NotRequired[
        AppInfoUpdateRequestDataRelationshipsPrimaryCategory
    ]
    primary_subcategory_one: typing_extensions.NotRequired[
        AppInfoUpdateRequestDataRelationshipsPrimarySubcategoryOne
    ]
    primary_subcategory_two: typing_extensions.NotRequired[
        AppInfoUpdateRequestDataRelationshipsPrimarySubcategoryTwo
    ]
    secondary_category: typing_extensions.NotRequired[
        AppInfoUpdateRequestDataRelationshipsSecondaryCategory
    ]
    secondary_subcategory_one: typing_extensions.NotRequired[
        AppInfoUpdateRequestDataRelationshipsSecondarySubcategoryOne
    ]
    secondary_subcategory_two: typing_extensions.NotRequired[
        AppInfoUpdateRequestDataRelationshipsSecondarySubcategoryTwo
    ]


class _SerializerAppInfoUpdateRequestDataRelationships(pydantic.BaseModel):
    """
    Serializer for AppInfoUpdateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    primary_category: typing.Optional[
        _SerializerAppInfoUpdateRequestDataRelationshipsPrimaryCategory
    ] = pydantic.Field(alias="primaryCategory", default=None)
    primary_subcategory_one: typing.Optional[
        _SerializerAppInfoUpdateRequestDataRelationshipsPrimarySubcategoryOne
    ] = pydantic.Field(alias="primarySubcategoryOne", default=None)
    primary_subcategory_two: typing.Optional[
        _SerializerAppInfoUpdateRequestDataRelationshipsPrimarySubcategoryTwo
    ] = pydantic.Field(alias="primarySubcategoryTwo", default=None)
    secondary_category: typing.Optional[
        _SerializerAppInfoUpdateRequestDataRelationshipsSecondaryCategory
    ] = pydantic.Field(alias="secondaryCategory", default=None)
    secondary_subcategory_one: typing.Optional[
        _SerializerAppInfoUpdateRequestDataRelationshipsSecondarySubcategoryOne
    ] = pydantic.Field(alias="secondarySubcategoryOne", default=None)
    secondary_subcategory_two: typing.Optional[
        _SerializerAppInfoUpdateRequestDataRelationshipsSecondarySubcategoryTwo
    ] = pydantic.Field(alias="secondarySubcategoryTwo", default=None)


class AppInfoUpdateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    relationships: typing_extensions.NotRequired[AppInfoUpdateRequestDataRelationships]
    type: typing_extensions.Required[typing_extensions.Literal["appInfos"]]


class _SerializerAppInfoUpdateRequestData(pydantic.BaseModel):
    """
    Serializer for AppInfoUpdateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    relationships: typing.Optional[_SerializerAppInfoUpdateRequestDataRelationships] = (
        pydantic.Field(alias="relationships", default=None)
    )
    type: typing_extensions.Literal["appInfos"] = pydantic.Field(alias="type")


class AppInfoUpdateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[AppInfoUpdateRequestData]


class _SerializerAppInfoUpdateRequest(pydantic.BaseModel):
    """
    Serializer for AppInfoUpdateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAppInfoUpdateRequestData = pydantic.Field(alias="data")
