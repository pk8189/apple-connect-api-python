"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class AppEventVideoClipUpdateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    preview_frame_time_code: typing_extensions.NotRequired[str]
    uploaded: typing_extensions.NotRequired[bool]


class _SerializerAppEventVideoClipUpdateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for AppEventVideoClipUpdateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    preview_frame_time_code: typing.Optional[str] = pydantic.Field(
        alias="previewFrameTimeCode", default=None
    )
    uploaded: typing.Optional[bool] = pydantic.Field(alias="uploaded", default=None)


class AppEventVideoClipCreateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    app_event_asset_type: typing_extensions.Required[
        typing_extensions.Literal["EVENT_CARD", "EVENT_DETAILS_PAGE"]
    ]
    file_name: typing_extensions.Required[str]
    file_size: typing_extensions.Required[int]
    preview_frame_time_code: typing_extensions.NotRequired[str]


class _SerializerAppEventVideoClipCreateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for AppEventVideoClipCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    app_event_asset_type: typing_extensions.Literal[
        "EVENT_CARD", "EVENT_DETAILS_PAGE"
    ] = pydantic.Field(alias="appEventAssetType")
    file_name: str = pydantic.Field(alias="fileName")
    file_size: int = pydantic.Field(alias="fileSize")
    preview_frame_time_code: typing.Optional[str] = pydantic.Field(
        alias="previewFrameTimeCode", default=None
    )


class AppEventVideoClipCreateRequestDataRelationshipsAppEventLocalizationData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["appEventLocalizations"]]


class _SerializerAppEventVideoClipCreateRequestDataRelationshipsAppEventLocalizationData(
    pydantic.BaseModel
):
    """
    Serializer for AppEventVideoClipCreateRequestDataRelationshipsAppEventLocalizationData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["appEventLocalizations"] = pydantic.Field(
        alias="type"
    )


class AppEventVideoClipUpdateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[
        AppEventVideoClipUpdateRequestDataAttributes
    ]
    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["appEventVideoClips"]]


class _SerializerAppEventVideoClipUpdateRequestData(pydantic.BaseModel):
    """
    Serializer for AppEventVideoClipUpdateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[
        _SerializerAppEventVideoClipUpdateRequestDataAttributes
    ] = pydantic.Field(alias="attributes", default=None)
    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["appEventVideoClips"] = pydantic.Field(alias="type")


class AppEventVideoClipCreateRequestDataRelationshipsAppEventLocalization(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        AppEventVideoClipCreateRequestDataRelationshipsAppEventLocalizationData
    ]


class _SerializerAppEventVideoClipCreateRequestDataRelationshipsAppEventLocalization(
    pydantic.BaseModel
):
    """
    Serializer for AppEventVideoClipCreateRequestDataRelationshipsAppEventLocalization handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAppEventVideoClipCreateRequestDataRelationshipsAppEventLocalizationData = pydantic.Field(
        alias="data"
    )


class AppEventVideoClipUpdateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[AppEventVideoClipUpdateRequestData]


class _SerializerAppEventVideoClipUpdateRequest(pydantic.BaseModel):
    """
    Serializer for AppEventVideoClipUpdateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAppEventVideoClipUpdateRequestData = pydantic.Field(alias="data")


class AppEventVideoClipCreateRequestDataRelationships(typing_extensions.TypedDict):
    """
    No description specified
    """

    app_event_localization: typing_extensions.Required[
        AppEventVideoClipCreateRequestDataRelationshipsAppEventLocalization
    ]


class _SerializerAppEventVideoClipCreateRequestDataRelationships(pydantic.BaseModel):
    """
    Serializer for AppEventVideoClipCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    app_event_localization: _SerializerAppEventVideoClipCreateRequestDataRelationshipsAppEventLocalization = pydantic.Field(
        alias="appEventLocalization"
    )


class AppEventVideoClipCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[AppEventVideoClipCreateRequestDataAttributes]
    relationships: typing_extensions.Required[
        AppEventVideoClipCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[typing_extensions.Literal["appEventVideoClips"]]


class _SerializerAppEventVideoClipCreateRequestData(pydantic.BaseModel):
    """
    Serializer for AppEventVideoClipCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerAppEventVideoClipCreateRequestDataAttributes = (
        pydantic.Field(alias="attributes")
    )
    relationships: _SerializerAppEventVideoClipCreateRequestDataRelationships = (
        pydantic.Field(alias="relationships")
    )
    type: typing_extensions.Literal["appEventVideoClips"] = pydantic.Field(alias="type")


class AppEventVideoClipCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[AppEventVideoClipCreateRequestData]


class _SerializerAppEventVideoClipCreateRequest(pydantic.BaseModel):
    """
    Serializer for AppEventVideoClipCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAppEventVideoClipCreateRequestData = pydantic.Field(alias="data")
