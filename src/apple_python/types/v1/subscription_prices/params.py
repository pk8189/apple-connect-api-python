"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class SubscriptionPriceCreateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    preserve_current_price: typing_extensions.NotRequired[bool]
    start_date: typing_extensions.NotRequired[str]


class _SerializerSubscriptionPriceCreateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for SubscriptionPriceCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    preserve_current_price: typing.Optional[bool] = pydantic.Field(
        alias="preserveCurrentPrice", default=None
    )
    start_date: typing.Optional[str] = pydantic.Field(alias="startDate", default=None)


class SubscriptionPriceCreateRequestDataRelationshipsSubscriptionData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["subscriptions"]]


class _SerializerSubscriptionPriceCreateRequestDataRelationshipsSubscriptionData(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionPriceCreateRequestDataRelationshipsSubscriptionData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["subscriptions"] = pydantic.Field(alias="type")


class SubscriptionPriceCreateRequestDataRelationshipsSubscriptionPricePointData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["subscriptionPricePoints"]
    ]


class _SerializerSubscriptionPriceCreateRequestDataRelationshipsSubscriptionPricePointData(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionPriceCreateRequestDataRelationshipsSubscriptionPricePointData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["subscriptionPricePoints"] = pydantic.Field(
        alias="type"
    )


class SubscriptionPriceCreateRequestDataRelationshipsTerritoryData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["territories"]]


class _SerializerSubscriptionPriceCreateRequestDataRelationshipsTerritoryData(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionPriceCreateRequestDataRelationshipsTerritoryData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["territories"] = pydantic.Field(alias="type")


class SubscriptionPriceCreateRequestDataRelationshipsSubscription(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        SubscriptionPriceCreateRequestDataRelationshipsSubscriptionData
    ]


class _SerializerSubscriptionPriceCreateRequestDataRelationshipsSubscription(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionPriceCreateRequestDataRelationshipsSubscription handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerSubscriptionPriceCreateRequestDataRelationshipsSubscriptionData = (
        pydantic.Field(alias="data")
    )


class SubscriptionPriceCreateRequestDataRelationshipsSubscriptionPricePoint(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        SubscriptionPriceCreateRequestDataRelationshipsSubscriptionPricePointData
    ]


class _SerializerSubscriptionPriceCreateRequestDataRelationshipsSubscriptionPricePoint(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionPriceCreateRequestDataRelationshipsSubscriptionPricePoint handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerSubscriptionPriceCreateRequestDataRelationshipsSubscriptionPricePointData = pydantic.Field(
        alias="data"
    )


class SubscriptionPriceCreateRequestDataRelationshipsTerritory(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        SubscriptionPriceCreateRequestDataRelationshipsTerritoryData
    ]


class _SerializerSubscriptionPriceCreateRequestDataRelationshipsTerritory(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionPriceCreateRequestDataRelationshipsTerritory handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        _SerializerSubscriptionPriceCreateRequestDataRelationshipsTerritoryData
    ] = pydantic.Field(alias="data", default=None)


class SubscriptionPriceCreateRequestDataRelationships(typing_extensions.TypedDict):
    """
    No description specified
    """

    subscription: typing_extensions.Required[
        SubscriptionPriceCreateRequestDataRelationshipsSubscription
    ]
    subscription_price_point: typing_extensions.Required[
        SubscriptionPriceCreateRequestDataRelationshipsSubscriptionPricePoint
    ]
    territory: typing_extensions.NotRequired[
        SubscriptionPriceCreateRequestDataRelationshipsTerritory
    ]


class _SerializerSubscriptionPriceCreateRequestDataRelationships(pydantic.BaseModel):
    """
    Serializer for SubscriptionPriceCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    subscription: _SerializerSubscriptionPriceCreateRequestDataRelationshipsSubscription = pydantic.Field(
        alias="subscription"
    )
    subscription_price_point: _SerializerSubscriptionPriceCreateRequestDataRelationshipsSubscriptionPricePoint = pydantic.Field(
        alias="subscriptionPricePoint"
    )
    territory: typing.Optional[
        _SerializerSubscriptionPriceCreateRequestDataRelationshipsTerritory
    ] = pydantic.Field(alias="territory", default=None)


class SubscriptionPriceCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[
        SubscriptionPriceCreateRequestDataAttributes
    ]
    relationships: typing_extensions.Required[
        SubscriptionPriceCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[typing_extensions.Literal["subscriptionPrices"]]


class _SerializerSubscriptionPriceCreateRequestData(pydantic.BaseModel):
    """
    Serializer for SubscriptionPriceCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[
        _SerializerSubscriptionPriceCreateRequestDataAttributes
    ] = pydantic.Field(alias="attributes", default=None)
    relationships: _SerializerSubscriptionPriceCreateRequestDataRelationships = (
        pydantic.Field(alias="relationships")
    )
    type: typing_extensions.Literal["subscriptionPrices"] = pydantic.Field(alias="type")


class SubscriptionPriceCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[SubscriptionPriceCreateRequestData]


class _SerializerSubscriptionPriceCreateRequest(pydantic.BaseModel):
    """
    Serializer for SubscriptionPriceCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerSubscriptionPriceCreateRequestData = pydantic.Field(alias="data")
