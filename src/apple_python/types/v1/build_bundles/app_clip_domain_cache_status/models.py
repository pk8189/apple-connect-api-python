"""File Generated by Sideko (sideko.dev)"""

import io
import typing
import typing_extensions
from pydantic import (
    BaseModel as _PydanticBaseModel,
    Field as _PydanticField,
    ConfigDict as _PydanticConfigDict,
)

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class AppClipDomainStatusAttributesDomainsItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    domain: typing.Optional[str] = _PydanticField(alias="domain", default=None)
    error_code: typing.Optional[
        typing_extensions.Literal[
            "BAD_HTTP_RESPONSE",
            "BAD_JSON_CONTENT",
            "BAD_PKCS7_SIGNATURE",
            "CANNOT_REACH_AASA_FILE",
            "DNS_ERROR",
            "INSECURE_REDIRECTS_FORBIDDEN",
            "INVALID_ENTITLEMENT_MISSING_SECTION",
            "INVALID_ENTITLEMENT_SYNTAX_ERROR",
            "INVALID_ENTITLEMENT_UNHANDLED_SECTION",
            "INVALID_ENTITLEMENT_UNKNOWN_ID",
            "NETWORK_ERROR",
            "NETWORK_ERROR_TEMPORARY",
            "OTHER_ERROR",
            "TIMEOUT",
            "TLS_ERROR",
            "UNEXPECTED_ERROR",
        ]
    ] = _PydanticField(alias="errorCode", default=None)
    is_valid: typing.Optional[bool] = _PydanticField(alias="isValid", default=None)
    last_updated_date: typing.Optional[str] = _PydanticField(
        alias="lastUpdatedDate", default=None
    )


class ResourceLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class DocumentLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    self: str = _PydanticField(alias="self")


class AppClipDomainStatusAttributes(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    domains: typing.Optional[typing.List[AppClipDomainStatusAttributesDomainsItem]] = (
        _PydanticField(alias="domains", default=None)
    )
    last_updated_date: typing.Optional[str] = _PydanticField(
        alias="lastUpdatedDate", default=None
    )


class AppClipDomainStatus(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    attributes: typing.Optional[AppClipDomainStatusAttributes] = _PydanticField(
        alias="attributes", default=None
    )
    id: str = _PydanticField(alias="id")
    links: typing.Optional[ResourceLinks] = _PydanticField(alias="links", default=None)
    type: typing_extensions.Literal["appClipDomainStatuses"] = _PydanticField(
        alias="type"
    )


class AppClipDomainStatusResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: AppClipDomainStatus = _PydanticField(alias="data")
    links: DocumentLinks = _PydanticField(alias="links")
