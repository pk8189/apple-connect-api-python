"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class SubscriptionLocalizationUpdateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    description: typing_extensions.NotRequired[str]
    name: typing_extensions.NotRequired[str]


class _SerializerSubscriptionLocalizationUpdateRequestDataAttributes(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionLocalizationUpdateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    description: typing.Optional[str] = pydantic.Field(
        alias="description", default=None
    )
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)


class SubscriptionLocalizationCreateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    description: typing_extensions.NotRequired[str]
    locale_field: typing_extensions.Required[str]
    name: typing_extensions.Required[str]


class _SerializerSubscriptionLocalizationCreateRequestDataAttributes(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionLocalizationCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    description: typing.Optional[str] = pydantic.Field(
        alias="description", default=None
    )
    locale_field: str = pydantic.Field(alias="locale")
    name: str = pydantic.Field(alias="name")


class SubscriptionLocalizationCreateRequestDataRelationshipsSubscriptionData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["subscriptions"]]


class _SerializerSubscriptionLocalizationCreateRequestDataRelationshipsSubscriptionData(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionLocalizationCreateRequestDataRelationshipsSubscriptionData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["subscriptions"] = pydantic.Field(alias="type")


class SubscriptionLocalizationUpdateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[
        SubscriptionLocalizationUpdateRequestDataAttributes
    ]
    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["subscriptionLocalizations"]
    ]


class _SerializerSubscriptionLocalizationUpdateRequestData(pydantic.BaseModel):
    """
    Serializer for SubscriptionLocalizationUpdateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[
        _SerializerSubscriptionLocalizationUpdateRequestDataAttributes
    ] = pydantic.Field(alias="attributes", default=None)
    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["subscriptionLocalizations"] = pydantic.Field(
        alias="type"
    )


class SubscriptionLocalizationCreateRequestDataRelationshipsSubscription(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        SubscriptionLocalizationCreateRequestDataRelationshipsSubscriptionData
    ]


class _SerializerSubscriptionLocalizationCreateRequestDataRelationshipsSubscription(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionLocalizationCreateRequestDataRelationshipsSubscription handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerSubscriptionLocalizationCreateRequestDataRelationshipsSubscriptionData = pydantic.Field(
        alias="data"
    )


class SubscriptionLocalizationUpdateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[SubscriptionLocalizationUpdateRequestData]


class _SerializerSubscriptionLocalizationUpdateRequest(pydantic.BaseModel):
    """
    Serializer for SubscriptionLocalizationUpdateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerSubscriptionLocalizationUpdateRequestData = pydantic.Field(
        alias="data"
    )


class SubscriptionLocalizationCreateRequestDataRelationships(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    subscription: typing_extensions.Required[
        SubscriptionLocalizationCreateRequestDataRelationshipsSubscription
    ]


class _SerializerSubscriptionLocalizationCreateRequestDataRelationships(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionLocalizationCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    subscription: _SerializerSubscriptionLocalizationCreateRequestDataRelationshipsSubscription = pydantic.Field(
        alias="subscription"
    )


class SubscriptionLocalizationCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[
        SubscriptionLocalizationCreateRequestDataAttributes
    ]
    relationships: typing_extensions.Required[
        SubscriptionLocalizationCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["subscriptionLocalizations"]
    ]


class _SerializerSubscriptionLocalizationCreateRequestData(pydantic.BaseModel):
    """
    Serializer for SubscriptionLocalizationCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerSubscriptionLocalizationCreateRequestDataAttributes = (
        pydantic.Field(alias="attributes")
    )
    relationships: _SerializerSubscriptionLocalizationCreateRequestDataRelationships = (
        pydantic.Field(alias="relationships")
    )
    type: typing_extensions.Literal["subscriptionLocalizations"] = pydantic.Field(
        alias="type"
    )


class SubscriptionLocalizationCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[SubscriptionLocalizationCreateRequestData]


class _SerializerSubscriptionLocalizationCreateRequest(pydantic.BaseModel):
    """
    Serializer for SubscriptionLocalizationCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerSubscriptionLocalizationCreateRequestData = pydantic.Field(
        alias="data"
    )
