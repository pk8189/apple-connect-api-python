"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class AppEventUpdateRequestDataAttributesTerritorySchedulesItem(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    event_end: typing_extensions.NotRequired[str]
    event_start: typing_extensions.NotRequired[str]
    publish_start: typing_extensions.NotRequired[str]
    territories: typing_extensions.NotRequired[typing.List[str]]


class _SerializerAppEventUpdateRequestDataAttributesTerritorySchedulesItem(
    pydantic.BaseModel
):
    """
    Serializer for AppEventUpdateRequestDataAttributesTerritorySchedulesItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    event_end: typing.Optional[str] = pydantic.Field(alias="eventEnd", default=None)
    event_start: typing.Optional[str] = pydantic.Field(alias="eventStart", default=None)
    publish_start: typing.Optional[str] = pydantic.Field(
        alias="publishStart", default=None
    )
    territories: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="territories", default=None
    )


class AppEventCreateRequestDataAttributesTerritorySchedulesItem(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    event_end: typing_extensions.NotRequired[str]
    event_start: typing_extensions.NotRequired[str]
    publish_start: typing_extensions.NotRequired[str]
    territories: typing_extensions.NotRequired[typing.List[str]]


class _SerializerAppEventCreateRequestDataAttributesTerritorySchedulesItem(
    pydantic.BaseModel
):
    """
    Serializer for AppEventCreateRequestDataAttributesTerritorySchedulesItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    event_end: typing.Optional[str] = pydantic.Field(alias="eventEnd", default=None)
    event_start: typing.Optional[str] = pydantic.Field(alias="eventStart", default=None)
    publish_start: typing.Optional[str] = pydantic.Field(
        alias="publishStart", default=None
    )
    territories: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="territories", default=None
    )


class AppEventCreateRequestDataRelationshipsAppData(typing_extensions.TypedDict):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["apps"]]


class _SerializerAppEventCreateRequestDataRelationshipsAppData(pydantic.BaseModel):
    """
    Serializer for AppEventCreateRequestDataRelationshipsAppData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["apps"] = pydantic.Field(alias="type")


class AppEventUpdateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    badge: typing_extensions.NotRequired[
        typing_extensions.Literal[
            "LIVE_EVENT",
            "PREMIERE",
            "CHALLENGE",
            "COMPETITION",
            "NEW_SEASON",
            "MAJOR_UPDATE",
            "SPECIAL_EVENT",
        ]
    ]
    deep_link: typing_extensions.NotRequired[str]
    primary_locale: typing_extensions.NotRequired[str]
    priority: typing_extensions.NotRequired[typing_extensions.Literal["HIGH", "NORMAL"]]
    purchase_requirement: typing_extensions.NotRequired[
        typing_extensions.Literal[
            "NO_COST_ASSOCIATED",
            "IN_APP_PURCHASE",
            "SUBSCRIPTION",
            "IN_APP_PURCHASE_AND_SUBSCRIPTION",
            "IN_APP_PURCHASE_OR_SUBSCRIPTION",
        ]
    ]
    purpose: typing_extensions.NotRequired[
        typing_extensions.Literal[
            "APPROPRIATE_FOR_ALL_USERS",
            "ATTRACT_NEW_USERS",
            "KEEP_ACTIVE_USERS_INFORMED",
            "BRING_BACK_LAPSED_USERS",
        ]
    ]
    reference_name: typing_extensions.NotRequired[str]
    territory_schedules: typing_extensions.NotRequired[
        typing.List[AppEventUpdateRequestDataAttributesTerritorySchedulesItem]
    ]


class _SerializerAppEventUpdateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for AppEventUpdateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    badge: typing.Optional[
        typing_extensions.Literal[
            "LIVE_EVENT",
            "PREMIERE",
            "CHALLENGE",
            "COMPETITION",
            "NEW_SEASON",
            "MAJOR_UPDATE",
            "SPECIAL_EVENT",
        ]
    ] = pydantic.Field(alias="badge", default=None)
    deep_link: typing.Optional[str] = pydantic.Field(alias="deepLink", default=None)
    primary_locale: typing.Optional[str] = pydantic.Field(
        alias="primaryLocale", default=None
    )
    priority: typing.Optional[typing_extensions.Literal["HIGH", "NORMAL"]] = (
        pydantic.Field(alias="priority", default=None)
    )
    purchase_requirement: typing.Optional[
        typing_extensions.Literal[
            "NO_COST_ASSOCIATED",
            "IN_APP_PURCHASE",
            "SUBSCRIPTION",
            "IN_APP_PURCHASE_AND_SUBSCRIPTION",
            "IN_APP_PURCHASE_OR_SUBSCRIPTION",
        ]
    ] = pydantic.Field(alias="purchaseRequirement", default=None)
    purpose: typing.Optional[
        typing_extensions.Literal[
            "APPROPRIATE_FOR_ALL_USERS",
            "ATTRACT_NEW_USERS",
            "KEEP_ACTIVE_USERS_INFORMED",
            "BRING_BACK_LAPSED_USERS",
        ]
    ] = pydantic.Field(alias="purpose", default=None)
    reference_name: typing.Optional[str] = pydantic.Field(
        alias="referenceName", default=None
    )
    territory_schedules: typing.Optional[
        typing.List[
            _SerializerAppEventUpdateRequestDataAttributesTerritorySchedulesItem
        ]
    ] = pydantic.Field(alias="territorySchedules", default=None)


class AppEventCreateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    badge: typing_extensions.NotRequired[
        typing_extensions.Literal[
            "LIVE_EVENT",
            "PREMIERE",
            "CHALLENGE",
            "COMPETITION",
            "NEW_SEASON",
            "MAJOR_UPDATE",
            "SPECIAL_EVENT",
        ]
    ]
    deep_link: typing_extensions.NotRequired[str]
    primary_locale: typing_extensions.NotRequired[str]
    priority: typing_extensions.NotRequired[typing_extensions.Literal["HIGH", "NORMAL"]]
    purchase_requirement: typing_extensions.NotRequired[
        typing_extensions.Literal[
            "NO_COST_ASSOCIATED",
            "IN_APP_PURCHASE",
            "SUBSCRIPTION",
            "IN_APP_PURCHASE_AND_SUBSCRIPTION",
            "IN_APP_PURCHASE_OR_SUBSCRIPTION",
        ]
    ]
    purpose: typing_extensions.NotRequired[
        typing_extensions.Literal[
            "APPROPRIATE_FOR_ALL_USERS",
            "ATTRACT_NEW_USERS",
            "KEEP_ACTIVE_USERS_INFORMED",
            "BRING_BACK_LAPSED_USERS",
        ]
    ]
    reference_name: typing_extensions.Required[str]
    territory_schedules: typing_extensions.NotRequired[
        typing.List[AppEventCreateRequestDataAttributesTerritorySchedulesItem]
    ]


class _SerializerAppEventCreateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for AppEventCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    badge: typing.Optional[
        typing_extensions.Literal[
            "LIVE_EVENT",
            "PREMIERE",
            "CHALLENGE",
            "COMPETITION",
            "NEW_SEASON",
            "MAJOR_UPDATE",
            "SPECIAL_EVENT",
        ]
    ] = pydantic.Field(alias="badge", default=None)
    deep_link: typing.Optional[str] = pydantic.Field(alias="deepLink", default=None)
    primary_locale: typing.Optional[str] = pydantic.Field(
        alias="primaryLocale", default=None
    )
    priority: typing.Optional[typing_extensions.Literal["HIGH", "NORMAL"]] = (
        pydantic.Field(alias="priority", default=None)
    )
    purchase_requirement: typing.Optional[
        typing_extensions.Literal[
            "NO_COST_ASSOCIATED",
            "IN_APP_PURCHASE",
            "SUBSCRIPTION",
            "IN_APP_PURCHASE_AND_SUBSCRIPTION",
            "IN_APP_PURCHASE_OR_SUBSCRIPTION",
        ]
    ] = pydantic.Field(alias="purchaseRequirement", default=None)
    purpose: typing.Optional[
        typing_extensions.Literal[
            "APPROPRIATE_FOR_ALL_USERS",
            "ATTRACT_NEW_USERS",
            "KEEP_ACTIVE_USERS_INFORMED",
            "BRING_BACK_LAPSED_USERS",
        ]
    ] = pydantic.Field(alias="purpose", default=None)
    reference_name: str = pydantic.Field(alias="referenceName")
    territory_schedules: typing.Optional[
        typing.List[
            _SerializerAppEventCreateRequestDataAttributesTerritorySchedulesItem
        ]
    ] = pydantic.Field(alias="territorySchedules", default=None)


class AppEventCreateRequestDataRelationshipsApp(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[AppEventCreateRequestDataRelationshipsAppData]


class _SerializerAppEventCreateRequestDataRelationshipsApp(pydantic.BaseModel):
    """
    Serializer for AppEventCreateRequestDataRelationshipsApp handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAppEventCreateRequestDataRelationshipsAppData = pydantic.Field(
        alias="data"
    )


class AppEventUpdateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[AppEventUpdateRequestDataAttributes]
    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["appEvents"]]


class _SerializerAppEventUpdateRequestData(pydantic.BaseModel):
    """
    Serializer for AppEventUpdateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[_SerializerAppEventUpdateRequestDataAttributes] = (
        pydantic.Field(alias="attributes", default=None)
    )
    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["appEvents"] = pydantic.Field(alias="type")


class AppEventCreateRequestDataRelationships(typing_extensions.TypedDict):
    """
    No description specified
    """

    app: typing_extensions.Required[AppEventCreateRequestDataRelationshipsApp]


class _SerializerAppEventCreateRequestDataRelationships(pydantic.BaseModel):
    """
    Serializer for AppEventCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    app: _SerializerAppEventCreateRequestDataRelationshipsApp = pydantic.Field(
        alias="app"
    )


class AppEventUpdateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[AppEventUpdateRequestData]


class _SerializerAppEventUpdateRequest(pydantic.BaseModel):
    """
    Serializer for AppEventUpdateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAppEventUpdateRequestData = pydantic.Field(alias="data")


class AppEventCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[AppEventCreateRequestDataAttributes]
    relationships: typing_extensions.Required[AppEventCreateRequestDataRelationships]
    type: typing_extensions.Required[typing_extensions.Literal["appEvents"]]


class _SerializerAppEventCreateRequestData(pydantic.BaseModel):
    """
    Serializer for AppEventCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerAppEventCreateRequestDataAttributes = pydantic.Field(
        alias="attributes"
    )
    relationships: _SerializerAppEventCreateRequestDataRelationships = pydantic.Field(
        alias="relationships"
    )
    type: typing_extensions.Literal["appEvents"] = pydantic.Field(alias="type")


class AppEventCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[AppEventCreateRequestData]


class _SerializerAppEventCreateRequest(pydantic.BaseModel):
    """
    Serializer for AppEventCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAppEventCreateRequestData = pydantic.Field(alias="data")
