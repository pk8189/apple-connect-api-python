"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class MarketplaceDomainCreateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    domain: typing_extensions.Required[str]
    reference_name: typing_extensions.Required[str]


class _SerializerMarketplaceDomainCreateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for MarketplaceDomainCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    domain: str = pydantic.Field(alias="domain")
    reference_name: str = pydantic.Field(alias="referenceName")


class MarketplaceDomainCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[MarketplaceDomainCreateRequestDataAttributes]
    type: typing_extensions.Required[typing_extensions.Literal["marketplaceDomains"]]


class _SerializerMarketplaceDomainCreateRequestData(pydantic.BaseModel):
    """
    Serializer for MarketplaceDomainCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerMarketplaceDomainCreateRequestDataAttributes = (
        pydantic.Field(alias="attributes")
    )
    type: typing_extensions.Literal["marketplaceDomains"] = pydantic.Field(alias="type")


class MarketplaceDomainCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[MarketplaceDomainCreateRequestData]


class _SerializerMarketplaceDomainCreateRequest(pydantic.BaseModel):
    """
    Serializer for MarketplaceDomainCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerMarketplaceDomainCreateRequestData = pydantic.Field(alias="data")
