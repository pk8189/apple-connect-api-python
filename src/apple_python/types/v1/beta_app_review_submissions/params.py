"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class BetaAppReviewSubmissionCreateRequestDataRelationshipsBuildData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["builds"]]


class _SerializerBetaAppReviewSubmissionCreateRequestDataRelationshipsBuildData(
    pydantic.BaseModel
):
    """
    Serializer for BetaAppReviewSubmissionCreateRequestDataRelationshipsBuildData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["builds"] = pydantic.Field(alias="type")


class BetaAppReviewSubmissionCreateRequestDataRelationshipsBuild(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        BetaAppReviewSubmissionCreateRequestDataRelationshipsBuildData
    ]


class _SerializerBetaAppReviewSubmissionCreateRequestDataRelationshipsBuild(
    pydantic.BaseModel
):
    """
    Serializer for BetaAppReviewSubmissionCreateRequestDataRelationshipsBuild handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerBetaAppReviewSubmissionCreateRequestDataRelationshipsBuildData = (
        pydantic.Field(alias="data")
    )


class BetaAppReviewSubmissionCreateRequestDataRelationships(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    build: typing_extensions.Required[
        BetaAppReviewSubmissionCreateRequestDataRelationshipsBuild
    ]


class _SerializerBetaAppReviewSubmissionCreateRequestDataRelationships(
    pydantic.BaseModel
):
    """
    Serializer for BetaAppReviewSubmissionCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    build: _SerializerBetaAppReviewSubmissionCreateRequestDataRelationshipsBuild = (
        pydantic.Field(alias="build")
    )


class BetaAppReviewSubmissionCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    relationships: typing_extensions.Required[
        BetaAppReviewSubmissionCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["betaAppReviewSubmissions"]
    ]


class _SerializerBetaAppReviewSubmissionCreateRequestData(pydantic.BaseModel):
    """
    Serializer for BetaAppReviewSubmissionCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    relationships: _SerializerBetaAppReviewSubmissionCreateRequestDataRelationships = (
        pydantic.Field(alias="relationships")
    )
    type: typing_extensions.Literal["betaAppReviewSubmissions"] = pydantic.Field(
        alias="type"
    )


class BetaAppReviewSubmissionCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[BetaAppReviewSubmissionCreateRequestData]


class _SerializerBetaAppReviewSubmissionCreateRequest(pydantic.BaseModel):
    """
    Serializer for BetaAppReviewSubmissionCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerBetaAppReviewSubmissionCreateRequestData = pydantic.Field(
        alias="data"
    )
