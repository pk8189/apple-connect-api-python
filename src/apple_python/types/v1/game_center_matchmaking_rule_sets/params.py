"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class GameCenterMatchmakingRuleSetUpdateRequestDataAttributes(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    max_players: typing_extensions.NotRequired[int]
    min_players: typing_extensions.NotRequired[int]


class _SerializerGameCenterMatchmakingRuleSetUpdateRequestDataAttributes(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterMatchmakingRuleSetUpdateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    max_players: typing.Optional[int] = pydantic.Field(alias="maxPlayers", default=None)
    min_players: typing.Optional[int] = pydantic.Field(alias="minPlayers", default=None)


class GameCenterMatchmakingRuleSetCreateRequestDataAttributes(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    max_players: typing_extensions.Required[int]
    min_players: typing_extensions.Required[int]
    reference_name: typing_extensions.Required[str]
    rule_language_version: typing_extensions.Required[int]


class _SerializerGameCenterMatchmakingRuleSetCreateRequestDataAttributes(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterMatchmakingRuleSetCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    max_players: int = pydantic.Field(alias="maxPlayers")
    min_players: int = pydantic.Field(alias="minPlayers")
    reference_name: str = pydantic.Field(alias="referenceName")
    rule_language_version: int = pydantic.Field(alias="ruleLanguageVersion")


class GameCenterMatchmakingRuleSetUpdateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[
        GameCenterMatchmakingRuleSetUpdateRequestDataAttributes
    ]
    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["gameCenterMatchmakingRuleSets"]
    ]


class _SerializerGameCenterMatchmakingRuleSetUpdateRequestData(pydantic.BaseModel):
    """
    Serializer for GameCenterMatchmakingRuleSetUpdateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[
        _SerializerGameCenterMatchmakingRuleSetUpdateRequestDataAttributes
    ] = pydantic.Field(alias="attributes", default=None)
    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["gameCenterMatchmakingRuleSets"] = pydantic.Field(
        alias="type"
    )


class GameCenterMatchmakingRuleSetCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[
        GameCenterMatchmakingRuleSetCreateRequestDataAttributes
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["gameCenterMatchmakingRuleSets"]
    ]


class _SerializerGameCenterMatchmakingRuleSetCreateRequestData(pydantic.BaseModel):
    """
    Serializer for GameCenterMatchmakingRuleSetCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerGameCenterMatchmakingRuleSetCreateRequestDataAttributes = (
        pydantic.Field(alias="attributes")
    )
    type: typing_extensions.Literal["gameCenterMatchmakingRuleSets"] = pydantic.Field(
        alias="type"
    )


class GameCenterMatchmakingRuleSetUpdateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[GameCenterMatchmakingRuleSetUpdateRequestData]


class _SerializerGameCenterMatchmakingRuleSetUpdateRequest(pydantic.BaseModel):
    """
    Serializer for GameCenterMatchmakingRuleSetUpdateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerGameCenterMatchmakingRuleSetUpdateRequestData = pydantic.Field(
        alias="data"
    )


class GameCenterMatchmakingRuleSetCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[GameCenterMatchmakingRuleSetCreateRequestData]


class _SerializerGameCenterMatchmakingRuleSetCreateRequest(pydantic.BaseModel):
    """
    Serializer for GameCenterMatchmakingRuleSetCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerGameCenterMatchmakingRuleSetCreateRequestData = pydantic.Field(
        alias="data"
    )
