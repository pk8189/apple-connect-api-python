"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class SubscriptionAppStoreReviewScreenshotUpdateRequestDataAttributes(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    source_file_checksum: typing_extensions.NotRequired[str]
    uploaded: typing_extensions.NotRequired[bool]


class _SerializerSubscriptionAppStoreReviewScreenshotUpdateRequestDataAttributes(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionAppStoreReviewScreenshotUpdateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    source_file_checksum: typing.Optional[str] = pydantic.Field(
        alias="sourceFileChecksum", default=None
    )
    uploaded: typing.Optional[bool] = pydantic.Field(alias="uploaded", default=None)


class SubscriptionAppStoreReviewScreenshotCreateRequestDataAttributes(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    file_name: typing_extensions.Required[str]
    file_size: typing_extensions.Required[int]


class _SerializerSubscriptionAppStoreReviewScreenshotCreateRequestDataAttributes(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionAppStoreReviewScreenshotCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    file_name: str = pydantic.Field(alias="fileName")
    file_size: int = pydantic.Field(alias="fileSize")


class SubscriptionAppStoreReviewScreenshotCreateRequestDataRelationshipsSubscriptionData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["subscriptions"]]


class _SerializerSubscriptionAppStoreReviewScreenshotCreateRequestDataRelationshipsSubscriptionData(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionAppStoreReviewScreenshotCreateRequestDataRelationshipsSubscriptionData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["subscriptions"] = pydantic.Field(alias="type")


class SubscriptionAppStoreReviewScreenshotUpdateRequestData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[
        SubscriptionAppStoreReviewScreenshotUpdateRequestDataAttributes
    ]
    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["subscriptionAppStoreReviewScreenshots"]
    ]


class _SerializerSubscriptionAppStoreReviewScreenshotUpdateRequestData(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionAppStoreReviewScreenshotUpdateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[
        _SerializerSubscriptionAppStoreReviewScreenshotUpdateRequestDataAttributes
    ] = pydantic.Field(alias="attributes", default=None)
    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["subscriptionAppStoreReviewScreenshots"] = (
        pydantic.Field(alias="type")
    )


class SubscriptionAppStoreReviewScreenshotCreateRequestDataRelationshipsSubscription(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        SubscriptionAppStoreReviewScreenshotCreateRequestDataRelationshipsSubscriptionData
    ]


class _SerializerSubscriptionAppStoreReviewScreenshotCreateRequestDataRelationshipsSubscription(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionAppStoreReviewScreenshotCreateRequestDataRelationshipsSubscription handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerSubscriptionAppStoreReviewScreenshotCreateRequestDataRelationshipsSubscriptionData = pydantic.Field(
        alias="data"
    )


class SubscriptionAppStoreReviewScreenshotUpdateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[
        SubscriptionAppStoreReviewScreenshotUpdateRequestData
    ]


class _SerializerSubscriptionAppStoreReviewScreenshotUpdateRequest(pydantic.BaseModel):
    """
    Serializer for SubscriptionAppStoreReviewScreenshotUpdateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerSubscriptionAppStoreReviewScreenshotUpdateRequestData = (
        pydantic.Field(alias="data")
    )


class SubscriptionAppStoreReviewScreenshotCreateRequestDataRelationships(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    subscription: typing_extensions.Required[
        SubscriptionAppStoreReviewScreenshotCreateRequestDataRelationshipsSubscription
    ]


class _SerializerSubscriptionAppStoreReviewScreenshotCreateRequestDataRelationships(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionAppStoreReviewScreenshotCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    subscription: _SerializerSubscriptionAppStoreReviewScreenshotCreateRequestDataRelationshipsSubscription = pydantic.Field(
        alias="subscription"
    )


class SubscriptionAppStoreReviewScreenshotCreateRequestData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    attributes: typing_extensions.Required[
        SubscriptionAppStoreReviewScreenshotCreateRequestDataAttributes
    ]
    relationships: typing_extensions.Required[
        SubscriptionAppStoreReviewScreenshotCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["subscriptionAppStoreReviewScreenshots"]
    ]


class _SerializerSubscriptionAppStoreReviewScreenshotCreateRequestData(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionAppStoreReviewScreenshotCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerSubscriptionAppStoreReviewScreenshotCreateRequestDataAttributes = pydantic.Field(
        alias="attributes"
    )
    relationships: _SerializerSubscriptionAppStoreReviewScreenshotCreateRequestDataRelationships = pydantic.Field(
        alias="relationships"
    )
    type: typing_extensions.Literal["subscriptionAppStoreReviewScreenshots"] = (
        pydantic.Field(alias="type")
    )


class SubscriptionAppStoreReviewScreenshotCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[
        SubscriptionAppStoreReviewScreenshotCreateRequestData
    ]


class _SerializerSubscriptionAppStoreReviewScreenshotCreateRequest(pydantic.BaseModel):
    """
    Serializer for SubscriptionAppStoreReviewScreenshotCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerSubscriptionAppStoreReviewScreenshotCreateRequestData = (
        pydantic.Field(alias="data")
    )
