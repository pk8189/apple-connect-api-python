"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class GameCenterDetailUpdateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    challenge_enabled: typing_extensions.NotRequired[bool]


class _SerializerGameCenterDetailUpdateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for GameCenterDetailUpdateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    challenge_enabled: typing.Optional[bool] = pydantic.Field(
        alias="challengeEnabled", default=None
    )


class GameCenterDetailUpdateRequestDataRelationshipsDefaultGroupLeaderboardData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["gameCenterLeaderboards"]
    ]


class _SerializerGameCenterDetailUpdateRequestDataRelationshipsDefaultGroupLeaderboardData(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterDetailUpdateRequestDataRelationshipsDefaultGroupLeaderboardData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["gameCenterLeaderboards"] = pydantic.Field(
        alias="type"
    )


class GameCenterDetailUpdateRequestDataRelationshipsDefaultLeaderboardData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["gameCenterLeaderboards"]
    ]


class _SerializerGameCenterDetailUpdateRequestDataRelationshipsDefaultLeaderboardData(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterDetailUpdateRequestDataRelationshipsDefaultLeaderboardData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["gameCenterLeaderboards"] = pydantic.Field(
        alias="type"
    )


class GameCenterDetailUpdateRequestDataRelationshipsGameCenterGroupData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["gameCenterGroups"]]


class _SerializerGameCenterDetailUpdateRequestDataRelationshipsGameCenterGroupData(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterDetailUpdateRequestDataRelationshipsGameCenterGroupData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["gameCenterGroups"] = pydantic.Field(alias="type")


class GameCenterDetailCreateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    challenge_enabled: typing_extensions.NotRequired[bool]


class _SerializerGameCenterDetailCreateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for GameCenterDetailCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    challenge_enabled: typing.Optional[bool] = pydantic.Field(
        alias="challengeEnabled", default=None
    )


class GameCenterDetailCreateRequestDataRelationshipsAppData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["apps"]]


class _SerializerGameCenterDetailCreateRequestDataRelationshipsAppData(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterDetailCreateRequestDataRelationshipsAppData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["apps"] = pydantic.Field(alias="type")


class GameCenterDetailUpdateRequestDataRelationshipsDefaultGroupLeaderboard(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        GameCenterDetailUpdateRequestDataRelationshipsDefaultGroupLeaderboardData
    ]


class _SerializerGameCenterDetailUpdateRequestDataRelationshipsDefaultGroupLeaderboard(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterDetailUpdateRequestDataRelationshipsDefaultGroupLeaderboard handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        _SerializerGameCenterDetailUpdateRequestDataRelationshipsDefaultGroupLeaderboardData
    ] = pydantic.Field(alias="data", default=None)


class GameCenterDetailUpdateRequestDataRelationshipsDefaultLeaderboard(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        GameCenterDetailUpdateRequestDataRelationshipsDefaultLeaderboardData
    ]


class _SerializerGameCenterDetailUpdateRequestDataRelationshipsDefaultLeaderboard(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterDetailUpdateRequestDataRelationshipsDefaultLeaderboard handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        _SerializerGameCenterDetailUpdateRequestDataRelationshipsDefaultLeaderboardData
    ] = pydantic.Field(alias="data", default=None)


class GameCenterDetailUpdateRequestDataRelationshipsGameCenterGroup(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        GameCenterDetailUpdateRequestDataRelationshipsGameCenterGroupData
    ]


class _SerializerGameCenterDetailUpdateRequestDataRelationshipsGameCenterGroup(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterDetailUpdateRequestDataRelationshipsGameCenterGroup handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        _SerializerGameCenterDetailUpdateRequestDataRelationshipsGameCenterGroupData
    ] = pydantic.Field(alias="data", default=None)


class GameCenterDetailCreateRequestDataRelationshipsApp(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[
        GameCenterDetailCreateRequestDataRelationshipsAppData
    ]


class _SerializerGameCenterDetailCreateRequestDataRelationshipsApp(pydantic.BaseModel):
    """
    Serializer for GameCenterDetailCreateRequestDataRelationshipsApp handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerGameCenterDetailCreateRequestDataRelationshipsAppData = (
        pydantic.Field(alias="data")
    )


class GameCenterDetailUpdateRequestDataRelationships(typing_extensions.TypedDict):
    """
    No description specified
    """

    default_group_leaderboard: typing_extensions.NotRequired[
        GameCenterDetailUpdateRequestDataRelationshipsDefaultGroupLeaderboard
    ]
    default_leaderboard: typing_extensions.NotRequired[
        GameCenterDetailUpdateRequestDataRelationshipsDefaultLeaderboard
    ]
    game_center_group: typing_extensions.NotRequired[
        GameCenterDetailUpdateRequestDataRelationshipsGameCenterGroup
    ]


class _SerializerGameCenterDetailUpdateRequestDataRelationships(pydantic.BaseModel):
    """
    Serializer for GameCenterDetailUpdateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    default_group_leaderboard: typing.Optional[
        _SerializerGameCenterDetailUpdateRequestDataRelationshipsDefaultGroupLeaderboard
    ] = pydantic.Field(alias="defaultGroupLeaderboard", default=None)
    default_leaderboard: typing.Optional[
        _SerializerGameCenterDetailUpdateRequestDataRelationshipsDefaultLeaderboard
    ] = pydantic.Field(alias="defaultLeaderboard", default=None)
    game_center_group: typing.Optional[
        _SerializerGameCenterDetailUpdateRequestDataRelationshipsGameCenterGroup
    ] = pydantic.Field(alias="gameCenterGroup", default=None)


class GameCenterDetailCreateRequestDataRelationships(typing_extensions.TypedDict):
    """
    No description specified
    """

    app: typing_extensions.Required[GameCenterDetailCreateRequestDataRelationshipsApp]


class _SerializerGameCenterDetailCreateRequestDataRelationships(pydantic.BaseModel):
    """
    Serializer for GameCenterDetailCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    app: _SerializerGameCenterDetailCreateRequestDataRelationshipsApp = pydantic.Field(
        alias="app"
    )


class GameCenterDetailUpdateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[
        GameCenterDetailUpdateRequestDataAttributes
    ]
    id: typing_extensions.Required[str]
    relationships: typing_extensions.NotRequired[
        GameCenterDetailUpdateRequestDataRelationships
    ]
    type: typing_extensions.Required[typing_extensions.Literal["gameCenterDetails"]]


class _SerializerGameCenterDetailUpdateRequestData(pydantic.BaseModel):
    """
    Serializer for GameCenterDetailUpdateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[
        _SerializerGameCenterDetailUpdateRequestDataAttributes
    ] = pydantic.Field(alias="attributes", default=None)
    id: str = pydantic.Field(alias="id")
    relationships: typing.Optional[
        _SerializerGameCenterDetailUpdateRequestDataRelationships
    ] = pydantic.Field(alias="relationships", default=None)
    type: typing_extensions.Literal["gameCenterDetails"] = pydantic.Field(alias="type")


class GameCenterDetailCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[
        GameCenterDetailCreateRequestDataAttributes
    ]
    relationships: typing_extensions.Required[
        GameCenterDetailCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[typing_extensions.Literal["gameCenterDetails"]]


class _SerializerGameCenterDetailCreateRequestData(pydantic.BaseModel):
    """
    Serializer for GameCenterDetailCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[
        _SerializerGameCenterDetailCreateRequestDataAttributes
    ] = pydantic.Field(alias="attributes", default=None)
    relationships: _SerializerGameCenterDetailCreateRequestDataRelationships = (
        pydantic.Field(alias="relationships")
    )
    type: typing_extensions.Literal["gameCenterDetails"] = pydantic.Field(alias="type")


class GameCenterDetailUpdateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[GameCenterDetailUpdateRequestData]


class _SerializerGameCenterDetailUpdateRequest(pydantic.BaseModel):
    """
    Serializer for GameCenterDetailUpdateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerGameCenterDetailUpdateRequestData = pydantic.Field(alias="data")


class GameCenterDetailCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[GameCenterDetailCreateRequestData]


class _SerializerGameCenterDetailCreateRequest(pydantic.BaseModel):
    """
    Serializer for GameCenterDetailCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerGameCenterDetailCreateRequestData = pydantic.Field(alias="data")
