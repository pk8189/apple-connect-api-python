"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class AgeRatingDeclarationUpdateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    age_rating_override: typing_extensions.NotRequired[
        typing_extensions.Literal["NONE", "SEVENTEEN_PLUS", "UNRATED"]
    ]
    alcohol_tobacco_or_drug_use_or_references: typing_extensions.NotRequired[
        typing_extensions.Literal["NONE", "INFREQUENT_OR_MILD", "FREQUENT_OR_INTENSE"]
    ]
    contests: typing_extensions.NotRequired[
        typing_extensions.Literal["NONE", "INFREQUENT_OR_MILD", "FREQUENT_OR_INTENSE"]
    ]
    gambling: typing_extensions.NotRequired[bool]
    gambling_and_contests: typing_extensions.NotRequired[bool]
    gambling_simulated: typing_extensions.NotRequired[
        typing_extensions.Literal["NONE", "INFREQUENT_OR_MILD", "FREQUENT_OR_INTENSE"]
    ]
    horror_or_fear_themes: typing_extensions.NotRequired[
        typing_extensions.Literal["NONE", "INFREQUENT_OR_MILD", "FREQUENT_OR_INTENSE"]
    ]
    kids_age_band: typing_extensions.NotRequired[
        typing_extensions.Literal["FIVE_AND_UNDER", "SIX_TO_EIGHT", "NINE_TO_ELEVEN"]
    ]
    mature_or_suggestive_themes: typing_extensions.NotRequired[
        typing_extensions.Literal["NONE", "INFREQUENT_OR_MILD", "FREQUENT_OR_INTENSE"]
    ]
    medical_or_treatment_information: typing_extensions.NotRequired[
        typing_extensions.Literal["NONE", "INFREQUENT_OR_MILD", "FREQUENT_OR_INTENSE"]
    ]
    profanity_or_crude_humor: typing_extensions.NotRequired[
        typing_extensions.Literal["NONE", "INFREQUENT_OR_MILD", "FREQUENT_OR_INTENSE"]
    ]
    seventeen_plus: typing_extensions.NotRequired[bool]
    sexual_content_graphic_and_nudity: typing_extensions.NotRequired[
        typing_extensions.Literal["NONE", "INFREQUENT_OR_MILD", "FREQUENT_OR_INTENSE"]
    ]
    sexual_content_or_nudity: typing_extensions.NotRequired[
        typing_extensions.Literal["NONE", "INFREQUENT_OR_MILD", "FREQUENT_OR_INTENSE"]
    ]
    unrestricted_web_access: typing_extensions.NotRequired[bool]
    violence_cartoon_or_fantasy: typing_extensions.NotRequired[
        typing_extensions.Literal["NONE", "INFREQUENT_OR_MILD", "FREQUENT_OR_INTENSE"]
    ]
    violence_realistic: typing_extensions.NotRequired[
        typing_extensions.Literal["NONE", "INFREQUENT_OR_MILD", "FREQUENT_OR_INTENSE"]
    ]
    violence_realistic_prolonged_graphic_or_sadistic: typing_extensions.NotRequired[
        typing_extensions.Literal["NONE", "INFREQUENT_OR_MILD", "FREQUENT_OR_INTENSE"]
    ]


class _SerializerAgeRatingDeclarationUpdateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for AgeRatingDeclarationUpdateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    age_rating_override: typing.Optional[
        typing_extensions.Literal["NONE", "SEVENTEEN_PLUS", "UNRATED"]
    ] = pydantic.Field(alias="ageRatingOverride", default=None)
    alcohol_tobacco_or_drug_use_or_references: typing.Optional[
        typing_extensions.Literal["NONE", "INFREQUENT_OR_MILD", "FREQUENT_OR_INTENSE"]
    ] = pydantic.Field(alias="alcoholTobaccoOrDrugUseOrReferences", default=None)
    contests: typing.Optional[
        typing_extensions.Literal["NONE", "INFREQUENT_OR_MILD", "FREQUENT_OR_INTENSE"]
    ] = pydantic.Field(alias="contests", default=None)
    gambling: typing.Optional[bool] = pydantic.Field(alias="gambling", default=None)
    gambling_and_contests: typing.Optional[bool] = pydantic.Field(
        alias="gamblingAndContests", default=None
    )
    gambling_simulated: typing.Optional[
        typing_extensions.Literal["NONE", "INFREQUENT_OR_MILD", "FREQUENT_OR_INTENSE"]
    ] = pydantic.Field(alias="gamblingSimulated", default=None)
    horror_or_fear_themes: typing.Optional[
        typing_extensions.Literal["NONE", "INFREQUENT_OR_MILD", "FREQUENT_OR_INTENSE"]
    ] = pydantic.Field(alias="horrorOrFearThemes", default=None)
    kids_age_band: typing.Optional[
        typing_extensions.Literal["FIVE_AND_UNDER", "SIX_TO_EIGHT", "NINE_TO_ELEVEN"]
    ] = pydantic.Field(alias="kidsAgeBand", default=None)
    mature_or_suggestive_themes: typing.Optional[
        typing_extensions.Literal["NONE", "INFREQUENT_OR_MILD", "FREQUENT_OR_INTENSE"]
    ] = pydantic.Field(alias="matureOrSuggestiveThemes", default=None)
    medical_or_treatment_information: typing.Optional[
        typing_extensions.Literal["NONE", "INFREQUENT_OR_MILD", "FREQUENT_OR_INTENSE"]
    ] = pydantic.Field(alias="medicalOrTreatmentInformation", default=None)
    profanity_or_crude_humor: typing.Optional[
        typing_extensions.Literal["NONE", "INFREQUENT_OR_MILD", "FREQUENT_OR_INTENSE"]
    ] = pydantic.Field(alias="profanityOrCrudeHumor", default=None)
    seventeen_plus: typing.Optional[bool] = pydantic.Field(
        alias="seventeenPlus", default=None
    )
    sexual_content_graphic_and_nudity: typing.Optional[
        typing_extensions.Literal["NONE", "INFREQUENT_OR_MILD", "FREQUENT_OR_INTENSE"]
    ] = pydantic.Field(alias="sexualContentGraphicAndNudity", default=None)
    sexual_content_or_nudity: typing.Optional[
        typing_extensions.Literal["NONE", "INFREQUENT_OR_MILD", "FREQUENT_OR_INTENSE"]
    ] = pydantic.Field(alias="sexualContentOrNudity", default=None)
    unrestricted_web_access: typing.Optional[bool] = pydantic.Field(
        alias="unrestrictedWebAccess", default=None
    )
    violence_cartoon_or_fantasy: typing.Optional[
        typing_extensions.Literal["NONE", "INFREQUENT_OR_MILD", "FREQUENT_OR_INTENSE"]
    ] = pydantic.Field(alias="violenceCartoonOrFantasy", default=None)
    violence_realistic: typing.Optional[
        typing_extensions.Literal["NONE", "INFREQUENT_OR_MILD", "FREQUENT_OR_INTENSE"]
    ] = pydantic.Field(alias="violenceRealistic", default=None)
    violence_realistic_prolonged_graphic_or_sadistic: typing.Optional[
        typing_extensions.Literal["NONE", "INFREQUENT_OR_MILD", "FREQUENT_OR_INTENSE"]
    ] = pydantic.Field(
        alias="violenceRealisticProlongedGraphicOrSadistic", default=None
    )


class AgeRatingDeclarationUpdateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[
        AgeRatingDeclarationUpdateRequestDataAttributes
    ]
    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["ageRatingDeclarations"]]


class _SerializerAgeRatingDeclarationUpdateRequestData(pydantic.BaseModel):
    """
    Serializer for AgeRatingDeclarationUpdateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[
        _SerializerAgeRatingDeclarationUpdateRequestDataAttributes
    ] = pydantic.Field(alias="attributes", default=None)
    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["ageRatingDeclarations"] = pydantic.Field(
        alias="type"
    )


class AgeRatingDeclarationUpdateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[AgeRatingDeclarationUpdateRequestData]


class _SerializerAgeRatingDeclarationUpdateRequest(pydantic.BaseModel):
    """
    Serializer for AgeRatingDeclarationUpdateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAgeRatingDeclarationUpdateRequestData = pydantic.Field(
        alias="data"
    )
