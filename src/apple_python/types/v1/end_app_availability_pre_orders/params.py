"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class EndAppAvailabilityPreOrderCreateRequestDataRelationshipsTerritoryAvailabilitiesDataItem(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["territoryAvailabilities"]
    ]


class _SerializerEndAppAvailabilityPreOrderCreateRequestDataRelationshipsTerritoryAvailabilitiesDataItem(
    pydantic.BaseModel
):
    """
    Serializer for EndAppAvailabilityPreOrderCreateRequestDataRelationshipsTerritoryAvailabilitiesDataItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["territoryAvailabilities"] = pydantic.Field(
        alias="type"
    )


class EndAppAvailabilityPreOrderCreateRequestDataRelationshipsTerritoryAvailabilities(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        typing.List[
            EndAppAvailabilityPreOrderCreateRequestDataRelationshipsTerritoryAvailabilitiesDataItem
        ]
    ]


class _SerializerEndAppAvailabilityPreOrderCreateRequestDataRelationshipsTerritoryAvailabilities(
    pydantic.BaseModel
):
    """
    Serializer for EndAppAvailabilityPreOrderCreateRequestDataRelationshipsTerritoryAvailabilities handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.List[
        _SerializerEndAppAvailabilityPreOrderCreateRequestDataRelationshipsTerritoryAvailabilitiesDataItem
    ] = pydantic.Field(alias="data")


class EndAppAvailabilityPreOrderCreateRequestDataRelationships(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    territory_availabilities: typing_extensions.Required[
        EndAppAvailabilityPreOrderCreateRequestDataRelationshipsTerritoryAvailabilities
    ]


class _SerializerEndAppAvailabilityPreOrderCreateRequestDataRelationships(
    pydantic.BaseModel
):
    """
    Serializer for EndAppAvailabilityPreOrderCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    territory_availabilities: _SerializerEndAppAvailabilityPreOrderCreateRequestDataRelationshipsTerritoryAvailabilities = pydantic.Field(
        alias="territoryAvailabilities"
    )


class EndAppAvailabilityPreOrderCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    relationships: typing_extensions.Required[
        EndAppAvailabilityPreOrderCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["endAppAvailabilityPreOrders"]
    ]


class _SerializerEndAppAvailabilityPreOrderCreateRequestData(pydantic.BaseModel):
    """
    Serializer for EndAppAvailabilityPreOrderCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    relationships: _SerializerEndAppAvailabilityPreOrderCreateRequestDataRelationships = pydantic.Field(
        alias="relationships"
    )
    type: typing_extensions.Literal["endAppAvailabilityPreOrders"] = pydantic.Field(
        alias="type"
    )


class EndAppAvailabilityPreOrderCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[EndAppAvailabilityPreOrderCreateRequestData]


class _SerializerEndAppAvailabilityPreOrderCreateRequest(pydantic.BaseModel):
    """
    Serializer for EndAppAvailabilityPreOrderCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerEndAppAvailabilityPreOrderCreateRequestData = pydantic.Field(
        alias="data"
    )
