"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class SubscriptionAvailabilityCreateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    available_in_new_territories: typing_extensions.Required[bool]


class _SerializerSubscriptionAvailabilityCreateRequestDataAttributes(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionAvailabilityCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    available_in_new_territories: bool = pydantic.Field(
        alias="availableInNewTerritories"
    )


class SubscriptionAvailabilityCreateRequestDataRelationshipsAvailableTerritoriesDataItem(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["territories"]]


class _SerializerSubscriptionAvailabilityCreateRequestDataRelationshipsAvailableTerritoriesDataItem(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionAvailabilityCreateRequestDataRelationshipsAvailableTerritoriesDataItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["territories"] = pydantic.Field(alias="type")


class SubscriptionAvailabilityCreateRequestDataRelationshipsSubscriptionData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["subscriptions"]]


class _SerializerSubscriptionAvailabilityCreateRequestDataRelationshipsSubscriptionData(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionAvailabilityCreateRequestDataRelationshipsSubscriptionData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["subscriptions"] = pydantic.Field(alias="type")


class SubscriptionAvailabilityCreateRequestDataRelationshipsAvailableTerritories(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        typing.List[
            SubscriptionAvailabilityCreateRequestDataRelationshipsAvailableTerritoriesDataItem
        ]
    ]


class _SerializerSubscriptionAvailabilityCreateRequestDataRelationshipsAvailableTerritories(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionAvailabilityCreateRequestDataRelationshipsAvailableTerritories handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.List[
        _SerializerSubscriptionAvailabilityCreateRequestDataRelationshipsAvailableTerritoriesDataItem
    ] = pydantic.Field(alias="data")


class SubscriptionAvailabilityCreateRequestDataRelationshipsSubscription(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        SubscriptionAvailabilityCreateRequestDataRelationshipsSubscriptionData
    ]


class _SerializerSubscriptionAvailabilityCreateRequestDataRelationshipsSubscription(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionAvailabilityCreateRequestDataRelationshipsSubscription handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerSubscriptionAvailabilityCreateRequestDataRelationshipsSubscriptionData = pydantic.Field(
        alias="data"
    )


class SubscriptionAvailabilityCreateRequestDataRelationships(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    available_territories: typing_extensions.Required[
        SubscriptionAvailabilityCreateRequestDataRelationshipsAvailableTerritories
    ]
    subscription: typing_extensions.Required[
        SubscriptionAvailabilityCreateRequestDataRelationshipsSubscription
    ]


class _SerializerSubscriptionAvailabilityCreateRequestDataRelationships(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionAvailabilityCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    available_territories: _SerializerSubscriptionAvailabilityCreateRequestDataRelationshipsAvailableTerritories = pydantic.Field(
        alias="availableTerritories"
    )
    subscription: _SerializerSubscriptionAvailabilityCreateRequestDataRelationshipsSubscription = pydantic.Field(
        alias="subscription"
    )


class SubscriptionAvailabilityCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[
        SubscriptionAvailabilityCreateRequestDataAttributes
    ]
    relationships: typing_extensions.Required[
        SubscriptionAvailabilityCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["subscriptionAvailabilities"]
    ]


class _SerializerSubscriptionAvailabilityCreateRequestData(pydantic.BaseModel):
    """
    Serializer for SubscriptionAvailabilityCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerSubscriptionAvailabilityCreateRequestDataAttributes = (
        pydantic.Field(alias="attributes")
    )
    relationships: _SerializerSubscriptionAvailabilityCreateRequestDataRelationships = (
        pydantic.Field(alias="relationships")
    )
    type: typing_extensions.Literal["subscriptionAvailabilities"] = pydantic.Field(
        alias="type"
    )


class SubscriptionAvailabilityCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[SubscriptionAvailabilityCreateRequestData]


class _SerializerSubscriptionAvailabilityCreateRequest(pydantic.BaseModel):
    """
    Serializer for SubscriptionAvailabilityCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerSubscriptionAvailabilityCreateRequestData = pydantic.Field(
        alias="data"
    )
