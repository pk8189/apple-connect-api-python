"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class AnalyticsReportRequestCreateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    access_type: typing_extensions.Required[
        typing_extensions.Literal["ONE_TIME_SNAPSHOT", "ONGOING"]
    ]


class _SerializerAnalyticsReportRequestCreateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for AnalyticsReportRequestCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    access_type: typing_extensions.Literal["ONE_TIME_SNAPSHOT", "ONGOING"] = (
        pydantic.Field(alias="accessType")
    )


class AnalyticsReportRequestCreateRequestDataRelationshipsAppData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["apps"]]


class _SerializerAnalyticsReportRequestCreateRequestDataRelationshipsAppData(
    pydantic.BaseModel
):
    """
    Serializer for AnalyticsReportRequestCreateRequestDataRelationshipsAppData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["apps"] = pydantic.Field(alias="type")


class AnalyticsReportRequestCreateRequestDataRelationshipsApp(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        AnalyticsReportRequestCreateRequestDataRelationshipsAppData
    ]


class _SerializerAnalyticsReportRequestCreateRequestDataRelationshipsApp(
    pydantic.BaseModel
):
    """
    Serializer for AnalyticsReportRequestCreateRequestDataRelationshipsApp handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAnalyticsReportRequestCreateRequestDataRelationshipsAppData = (
        pydantic.Field(alias="data")
    )


class AnalyticsReportRequestCreateRequestDataRelationships(typing_extensions.TypedDict):
    """
    No description specified
    """

    app: typing_extensions.Required[
        AnalyticsReportRequestCreateRequestDataRelationshipsApp
    ]


class _SerializerAnalyticsReportRequestCreateRequestDataRelationships(
    pydantic.BaseModel
):
    """
    Serializer for AnalyticsReportRequestCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    app: _SerializerAnalyticsReportRequestCreateRequestDataRelationshipsApp = (
        pydantic.Field(alias="app")
    )


class AnalyticsReportRequestCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[
        AnalyticsReportRequestCreateRequestDataAttributes
    ]
    relationships: typing_extensions.Required[
        AnalyticsReportRequestCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["analyticsReportRequests"]
    ]


class _SerializerAnalyticsReportRequestCreateRequestData(pydantic.BaseModel):
    """
    Serializer for AnalyticsReportRequestCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerAnalyticsReportRequestCreateRequestDataAttributes = (
        pydantic.Field(alias="attributes")
    )
    relationships: _SerializerAnalyticsReportRequestCreateRequestDataRelationships = (
        pydantic.Field(alias="relationships")
    )
    type: typing_extensions.Literal["analyticsReportRequests"] = pydantic.Field(
        alias="type"
    )


class AnalyticsReportRequestCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[AnalyticsReportRequestCreateRequestData]


class _SerializerAnalyticsReportRequestCreateRequest(pydantic.BaseModel):
    """
    Serializer for AnalyticsReportRequestCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAnalyticsReportRequestCreateRequestData = pydantic.Field(
        alias="data"
    )
