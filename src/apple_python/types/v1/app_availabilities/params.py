"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class AppAvailabilityCreateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    available_in_new_territories: typing_extensions.Required[bool]


class _SerializerAppAvailabilityCreateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for AppAvailabilityCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    available_in_new_territories: bool = pydantic.Field(
        alias="availableInNewTerritories"
    )


class AppAvailabilityCreateRequestDataRelationshipsAppData(typing_extensions.TypedDict):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["apps"]]


class _SerializerAppAvailabilityCreateRequestDataRelationshipsAppData(
    pydantic.BaseModel
):
    """
    Serializer for AppAvailabilityCreateRequestDataRelationshipsAppData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["apps"] = pydantic.Field(alias="type")


class AppAvailabilityCreateRequestDataRelationshipsAvailableTerritoriesDataItem(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["territories"]]


class _SerializerAppAvailabilityCreateRequestDataRelationshipsAvailableTerritoriesDataItem(
    pydantic.BaseModel
):
    """
    Serializer for AppAvailabilityCreateRequestDataRelationshipsAvailableTerritoriesDataItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["territories"] = pydantic.Field(alias="type")


class AppAvailabilityCreateRequestDataRelationshipsApp(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[
        AppAvailabilityCreateRequestDataRelationshipsAppData
    ]


class _SerializerAppAvailabilityCreateRequestDataRelationshipsApp(pydantic.BaseModel):
    """
    Serializer for AppAvailabilityCreateRequestDataRelationshipsApp handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAppAvailabilityCreateRequestDataRelationshipsAppData = (
        pydantic.Field(alias="data")
    )


class AppAvailabilityCreateRequestDataRelationshipsAvailableTerritories(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        typing.List[
            AppAvailabilityCreateRequestDataRelationshipsAvailableTerritoriesDataItem
        ]
    ]


class _SerializerAppAvailabilityCreateRequestDataRelationshipsAvailableTerritories(
    pydantic.BaseModel
):
    """
    Serializer for AppAvailabilityCreateRequestDataRelationshipsAvailableTerritories handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.List[
        _SerializerAppAvailabilityCreateRequestDataRelationshipsAvailableTerritoriesDataItem
    ] = pydantic.Field(alias="data")


class AppAvailabilityCreateRequestDataRelationships(typing_extensions.TypedDict):
    """
    No description specified
    """

    app: typing_extensions.Required[AppAvailabilityCreateRequestDataRelationshipsApp]
    available_territories: typing_extensions.Required[
        AppAvailabilityCreateRequestDataRelationshipsAvailableTerritories
    ]


class _SerializerAppAvailabilityCreateRequestDataRelationships(pydantic.BaseModel):
    """
    Serializer for AppAvailabilityCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    app: _SerializerAppAvailabilityCreateRequestDataRelationshipsApp = pydantic.Field(
        alias="app"
    )
    available_territories: _SerializerAppAvailabilityCreateRequestDataRelationshipsAvailableTerritories = pydantic.Field(
        alias="availableTerritories"
    )


class AppAvailabilityCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[AppAvailabilityCreateRequestDataAttributes]
    relationships: typing_extensions.Required[
        AppAvailabilityCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[typing_extensions.Literal["appAvailabilities"]]


class _SerializerAppAvailabilityCreateRequestData(pydantic.BaseModel):
    """
    Serializer for AppAvailabilityCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerAppAvailabilityCreateRequestDataAttributes = pydantic.Field(
        alias="attributes"
    )
    relationships: _SerializerAppAvailabilityCreateRequestDataRelationships = (
        pydantic.Field(alias="relationships")
    )
    type: typing_extensions.Literal["appAvailabilities"] = pydantic.Field(alias="type")


class AppAvailabilityCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[AppAvailabilityCreateRequestData]


class _SerializerAppAvailabilityCreateRequest(pydantic.BaseModel):
    """
    Serializer for AppAvailabilityCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAppAvailabilityCreateRequestData = pydantic.Field(alias="data")
