"""File Generated by Sideko (sideko.dev)"""

import io
import typing
import typing_extensions
from pydantic import (
    BaseModel as _PydanticBaseModel,
    Field as _PydanticField,
    ConfigDict as _PydanticConfigDict,
)

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class ResourceLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class AlternativeDistributionPackageRelationshipsVersionsDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["alternativeDistributionPackageVersions"] = (
        _PydanticField(alias="type")
    )


class AlternativeDistributionPackageRelationshipsVersionsLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class PagingInformationPaging(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    limit: int = _PydanticField(alias="limit")
    total: typing.Optional[int] = _PydanticField(alias="total", default=None)


class AlternativeDistributionPackageVersionAttributes(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    file_checksum: typing.Optional[str] = _PydanticField(
        alias="fileChecksum", default=None
    )
    state: typing.Optional[typing_extensions.Literal["COMPLETED", "REPLACED"]] = (
        _PydanticField(alias="state", default=None)
    )
    url: typing.Optional[str] = _PydanticField(alias="url", default=None)
    url_expiration_date: typing.Optional[str] = _PydanticField(
        alias="urlExpirationDate", default=None
    )
    version: typing.Optional[str] = _PydanticField(alias="version", default=None)


class AlternativeDistributionPackageVersionRelationshipsAlternativeDistributionPackageData(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["alternativeDistributionPackages"] = _PydanticField(
        alias="type"
    )


class AlternativeDistributionPackageVersionRelationshipsAlternativeDistributionPackageLinks(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class AlternativeDistributionPackageVersionRelationshipsDeltasDataItem(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["alternativeDistributionPackageDeltas"] = (
        _PydanticField(alias="type")
    )


class AlternativeDistributionPackageVersionRelationshipsDeltasLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class AlternativeDistributionPackageVersionRelationshipsVariantsDataItem(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["alternativeDistributionPackageVariants"] = (
        _PydanticField(alias="type")
    )


class AlternativeDistributionPackageVersionRelationshipsVariantsLinks(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class DocumentLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    self: str = _PydanticField(alias="self")


class PagingInformation(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    paging: PagingInformationPaging = _PydanticField(alias="paging")


class AlternativeDistributionPackageVersionRelationshipsAlternativeDistributionPackage(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[
        AlternativeDistributionPackageVersionRelationshipsAlternativeDistributionPackageData
    ] = _PydanticField(alias="data", default=None)
    links: typing.Optional[
        AlternativeDistributionPackageVersionRelationshipsAlternativeDistributionPackageLinks
    ] = _PydanticField(alias="links", default=None)


class AlternativeDistributionPackageVersionRelationshipsDeltas(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[
        typing.List[AlternativeDistributionPackageVersionRelationshipsDeltasDataItem]
    ] = _PydanticField(alias="data", default=None)
    links: typing.Optional[
        AlternativeDistributionPackageVersionRelationshipsDeltasLinks
    ] = _PydanticField(alias="links", default=None)
    meta: typing.Optional[PagingInformation] = _PydanticField(
        alias="meta", default=None
    )


class AlternativeDistributionPackageVersionRelationshipsVariants(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[
        typing.List[AlternativeDistributionPackageVersionRelationshipsVariantsDataItem]
    ] = _PydanticField(alias="data", default=None)
    links: typing.Optional[
        AlternativeDistributionPackageVersionRelationshipsVariantsLinks
    ] = _PydanticField(alias="links", default=None)
    meta: typing.Optional[PagingInformation] = _PydanticField(
        alias="meta", default=None
    )


class AlternativeDistributionPackageRelationshipsVersions(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[
        typing.List[AlternativeDistributionPackageRelationshipsVersionsDataItem]
    ] = _PydanticField(alias="data", default=None)
    links: typing.Optional[AlternativeDistributionPackageRelationshipsVersionsLinks] = (
        _PydanticField(alias="links", default=None)
    )
    meta: typing.Optional[PagingInformation] = _PydanticField(
        alias="meta", default=None
    )


class AlternativeDistributionPackageVersionRelationships(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    alternative_distribution_package: typing.Optional[
        AlternativeDistributionPackageVersionRelationshipsAlternativeDistributionPackage
    ] = _PydanticField(alias="alternativeDistributionPackage", default=None)
    deltas: typing.Optional[
        AlternativeDistributionPackageVersionRelationshipsDeltas
    ] = _PydanticField(alias="deltas", default=None)
    variants: typing.Optional[
        AlternativeDistributionPackageVersionRelationshipsVariants
    ] = _PydanticField(alias="variants", default=None)


class AlternativeDistributionPackageRelationships(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    versions: typing.Optional[AlternativeDistributionPackageRelationshipsVersions] = (
        _PydanticField(alias="versions", default=None)
    )


class AlternativeDistributionPackageVersion(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    attributes: typing.Optional[AlternativeDistributionPackageVersionAttributes] = (
        _PydanticField(alias="attributes", default=None)
    )
    id: str = _PydanticField(alias="id")
    links: typing.Optional[ResourceLinks] = _PydanticField(alias="links", default=None)
    relationships: typing.Optional[
        AlternativeDistributionPackageVersionRelationships
    ] = _PydanticField(alias="relationships", default=None)
    type: typing_extensions.Literal["alternativeDistributionPackageVersions"] = (
        _PydanticField(alias="type")
    )


class AlternativeDistributionPackage(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    links: typing.Optional[ResourceLinks] = _PydanticField(alias="links", default=None)
    relationships: typing.Optional[AlternativeDistributionPackageRelationships] = (
        _PydanticField(alias="relationships", default=None)
    )
    type: typing_extensions.Literal["alternativeDistributionPackages"] = _PydanticField(
        alias="type"
    )


class AlternativeDistributionPackageResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: AlternativeDistributionPackage = _PydanticField(alias="data")
    included: typing.Optional[typing.List[AlternativeDistributionPackageVersion]] = (
        _PydanticField(alias="included", default=None)
    )
    links: DocumentLinks = _PydanticField(alias="links")
