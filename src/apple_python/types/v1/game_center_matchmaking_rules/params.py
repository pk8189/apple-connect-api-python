"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class GameCenterMatchmakingRuleUpdateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    description: typing_extensions.NotRequired[str]
    expression: typing_extensions.NotRequired[str]
    weight: typing_extensions.NotRequired[float]


class _SerializerGameCenterMatchmakingRuleUpdateRequestDataAttributes(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterMatchmakingRuleUpdateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    description: typing.Optional[str] = pydantic.Field(
        alias="description", default=None
    )
    expression: typing.Optional[str] = pydantic.Field(alias="expression", default=None)
    weight: typing.Optional[float] = pydantic.Field(alias="weight", default=None)


class GameCenterMatchmakingRuleCreateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    description: typing_extensions.Required[str]
    expression: typing_extensions.Required[str]
    reference_name: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["COMPATIBLE", "DISTANCE", "MATCH", "TEAM"]
    ]
    weight: typing_extensions.NotRequired[float]


class _SerializerGameCenterMatchmakingRuleCreateRequestDataAttributes(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterMatchmakingRuleCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    description: str = pydantic.Field(alias="description")
    expression: str = pydantic.Field(alias="expression")
    reference_name: str = pydantic.Field(alias="referenceName")
    type: typing_extensions.Literal["COMPATIBLE", "DISTANCE", "MATCH", "TEAM"] = (
        pydantic.Field(alias="type")
    )
    weight: typing.Optional[float] = pydantic.Field(alias="weight", default=None)


class GameCenterMatchmakingRuleCreateRequestDataRelationshipsRuleSetData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["gameCenterMatchmakingRuleSets"]
    ]


class _SerializerGameCenterMatchmakingRuleCreateRequestDataRelationshipsRuleSetData(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterMatchmakingRuleCreateRequestDataRelationshipsRuleSetData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["gameCenterMatchmakingRuleSets"] = pydantic.Field(
        alias="type"
    )


class GameCenterMatchmakingRuleUpdateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[
        GameCenterMatchmakingRuleUpdateRequestDataAttributes
    ]
    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["gameCenterMatchmakingRules"]
    ]


class _SerializerGameCenterMatchmakingRuleUpdateRequestData(pydantic.BaseModel):
    """
    Serializer for GameCenterMatchmakingRuleUpdateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[
        _SerializerGameCenterMatchmakingRuleUpdateRequestDataAttributes
    ] = pydantic.Field(alias="attributes", default=None)
    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["gameCenterMatchmakingRules"] = pydantic.Field(
        alias="type"
    )


class GameCenterMatchmakingRuleCreateRequestDataRelationshipsRuleSet(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        GameCenterMatchmakingRuleCreateRequestDataRelationshipsRuleSetData
    ]


class _SerializerGameCenterMatchmakingRuleCreateRequestDataRelationshipsRuleSet(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterMatchmakingRuleCreateRequestDataRelationshipsRuleSet handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerGameCenterMatchmakingRuleCreateRequestDataRelationshipsRuleSetData = pydantic.Field(
        alias="data"
    )


class GameCenterMatchmakingRuleUpdateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[GameCenterMatchmakingRuleUpdateRequestData]


class _SerializerGameCenterMatchmakingRuleUpdateRequest(pydantic.BaseModel):
    """
    Serializer for GameCenterMatchmakingRuleUpdateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerGameCenterMatchmakingRuleUpdateRequestData = pydantic.Field(
        alias="data"
    )


class GameCenterMatchmakingRuleCreateRequestDataRelationships(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    rule_set: typing_extensions.Required[
        GameCenterMatchmakingRuleCreateRequestDataRelationshipsRuleSet
    ]


class _SerializerGameCenterMatchmakingRuleCreateRequestDataRelationships(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterMatchmakingRuleCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    rule_set: _SerializerGameCenterMatchmakingRuleCreateRequestDataRelationshipsRuleSet = pydantic.Field(
        alias="ruleSet"
    )


class GameCenterMatchmakingRuleCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[
        GameCenterMatchmakingRuleCreateRequestDataAttributes
    ]
    relationships: typing_extensions.Required[
        GameCenterMatchmakingRuleCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["gameCenterMatchmakingRules"]
    ]


class _SerializerGameCenterMatchmakingRuleCreateRequestData(pydantic.BaseModel):
    """
    Serializer for GameCenterMatchmakingRuleCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerGameCenterMatchmakingRuleCreateRequestDataAttributes = (
        pydantic.Field(alias="attributes")
    )
    relationships: _SerializerGameCenterMatchmakingRuleCreateRequestDataRelationships = pydantic.Field(
        alias="relationships"
    )
    type: typing_extensions.Literal["gameCenterMatchmakingRules"] = pydantic.Field(
        alias="type"
    )


class GameCenterMatchmakingRuleCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[GameCenterMatchmakingRuleCreateRequestData]


class _SerializerGameCenterMatchmakingRuleCreateRequest(pydantic.BaseModel):
    """
    Serializer for GameCenterMatchmakingRuleCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerGameCenterMatchmakingRuleCreateRequestData = pydantic.Field(
        alias="data"
    )
