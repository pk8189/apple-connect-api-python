"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class AppEventScreenshotUpdateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    uploaded: typing_extensions.NotRequired[bool]


class _SerializerAppEventScreenshotUpdateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for AppEventScreenshotUpdateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    uploaded: typing.Optional[bool] = pydantic.Field(alias="uploaded", default=None)


class AppEventScreenshotCreateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    app_event_asset_type: typing_extensions.Required[
        typing_extensions.Literal["EVENT_CARD", "EVENT_DETAILS_PAGE"]
    ]
    file_name: typing_extensions.Required[str]
    file_size: typing_extensions.Required[int]


class _SerializerAppEventScreenshotCreateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for AppEventScreenshotCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    app_event_asset_type: typing_extensions.Literal[
        "EVENT_CARD", "EVENT_DETAILS_PAGE"
    ] = pydantic.Field(alias="appEventAssetType")
    file_name: str = pydantic.Field(alias="fileName")
    file_size: int = pydantic.Field(alias="fileSize")


class AppEventScreenshotCreateRequestDataRelationshipsAppEventLocalizationData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["appEventLocalizations"]]


class _SerializerAppEventScreenshotCreateRequestDataRelationshipsAppEventLocalizationData(
    pydantic.BaseModel
):
    """
    Serializer for AppEventScreenshotCreateRequestDataRelationshipsAppEventLocalizationData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["appEventLocalizations"] = pydantic.Field(
        alias="type"
    )


class AppEventScreenshotUpdateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[
        AppEventScreenshotUpdateRequestDataAttributes
    ]
    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["appEventScreenshots"]]


class _SerializerAppEventScreenshotUpdateRequestData(pydantic.BaseModel):
    """
    Serializer for AppEventScreenshotUpdateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[
        _SerializerAppEventScreenshotUpdateRequestDataAttributes
    ] = pydantic.Field(alias="attributes", default=None)
    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["appEventScreenshots"] = pydantic.Field(
        alias="type"
    )


class AppEventScreenshotCreateRequestDataRelationshipsAppEventLocalization(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        AppEventScreenshotCreateRequestDataRelationshipsAppEventLocalizationData
    ]


class _SerializerAppEventScreenshotCreateRequestDataRelationshipsAppEventLocalization(
    pydantic.BaseModel
):
    """
    Serializer for AppEventScreenshotCreateRequestDataRelationshipsAppEventLocalization handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAppEventScreenshotCreateRequestDataRelationshipsAppEventLocalizationData = pydantic.Field(
        alias="data"
    )


class AppEventScreenshotUpdateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[AppEventScreenshotUpdateRequestData]


class _SerializerAppEventScreenshotUpdateRequest(pydantic.BaseModel):
    """
    Serializer for AppEventScreenshotUpdateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAppEventScreenshotUpdateRequestData = pydantic.Field(alias="data")


class AppEventScreenshotCreateRequestDataRelationships(typing_extensions.TypedDict):
    """
    No description specified
    """

    app_event_localization: typing_extensions.Required[
        AppEventScreenshotCreateRequestDataRelationshipsAppEventLocalization
    ]


class _SerializerAppEventScreenshotCreateRequestDataRelationships(pydantic.BaseModel):
    """
    Serializer for AppEventScreenshotCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    app_event_localization: _SerializerAppEventScreenshotCreateRequestDataRelationshipsAppEventLocalization = pydantic.Field(
        alias="appEventLocalization"
    )


class AppEventScreenshotCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[
        AppEventScreenshotCreateRequestDataAttributes
    ]
    relationships: typing_extensions.Required[
        AppEventScreenshotCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[typing_extensions.Literal["appEventScreenshots"]]


class _SerializerAppEventScreenshotCreateRequestData(pydantic.BaseModel):
    """
    Serializer for AppEventScreenshotCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerAppEventScreenshotCreateRequestDataAttributes = (
        pydantic.Field(alias="attributes")
    )
    relationships: _SerializerAppEventScreenshotCreateRequestDataRelationships = (
        pydantic.Field(alias="relationships")
    )
    type: typing_extensions.Literal["appEventScreenshots"] = pydantic.Field(
        alias="type"
    )


class AppEventScreenshotCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[AppEventScreenshotCreateRequestData]


class _SerializerAppEventScreenshotCreateRequest(pydantic.BaseModel):
    """
    Serializer for AppEventScreenshotCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAppEventScreenshotCreateRequestData = pydantic.Field(alias="data")
