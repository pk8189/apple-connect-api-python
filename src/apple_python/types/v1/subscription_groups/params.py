"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class SubscriptionGroupUpdateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    reference_name: typing_extensions.NotRequired[str]


class _SerializerSubscriptionGroupUpdateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for SubscriptionGroupUpdateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    reference_name: typing.Optional[str] = pydantic.Field(
        alias="referenceName", default=None
    )


class SubscriptionGroupCreateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    reference_name: typing_extensions.Required[str]


class _SerializerSubscriptionGroupCreateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for SubscriptionGroupCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    reference_name: str = pydantic.Field(alias="referenceName")


class SubscriptionGroupCreateRequestDataRelationshipsAppData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["apps"]]


class _SerializerSubscriptionGroupCreateRequestDataRelationshipsAppData(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionGroupCreateRequestDataRelationshipsAppData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["apps"] = pydantic.Field(alias="type")


class SubscriptionGroupUpdateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[
        SubscriptionGroupUpdateRequestDataAttributes
    ]
    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["subscriptionGroups"]]


class _SerializerSubscriptionGroupUpdateRequestData(pydantic.BaseModel):
    """
    Serializer for SubscriptionGroupUpdateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[
        _SerializerSubscriptionGroupUpdateRequestDataAttributes
    ] = pydantic.Field(alias="attributes", default=None)
    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["subscriptionGroups"] = pydantic.Field(alias="type")


class SubscriptionGroupCreateRequestDataRelationshipsApp(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[
        SubscriptionGroupCreateRequestDataRelationshipsAppData
    ]


class _SerializerSubscriptionGroupCreateRequestDataRelationshipsApp(pydantic.BaseModel):
    """
    Serializer for SubscriptionGroupCreateRequestDataRelationshipsApp handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerSubscriptionGroupCreateRequestDataRelationshipsAppData = (
        pydantic.Field(alias="data")
    )


class SubscriptionGroupUpdateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[SubscriptionGroupUpdateRequestData]


class _SerializerSubscriptionGroupUpdateRequest(pydantic.BaseModel):
    """
    Serializer for SubscriptionGroupUpdateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerSubscriptionGroupUpdateRequestData = pydantic.Field(alias="data")


class SubscriptionGroupCreateRequestDataRelationships(typing_extensions.TypedDict):
    """
    No description specified
    """

    app: typing_extensions.Required[SubscriptionGroupCreateRequestDataRelationshipsApp]


class _SerializerSubscriptionGroupCreateRequestDataRelationships(pydantic.BaseModel):
    """
    Serializer for SubscriptionGroupCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    app: _SerializerSubscriptionGroupCreateRequestDataRelationshipsApp = pydantic.Field(
        alias="app"
    )


class SubscriptionGroupCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[SubscriptionGroupCreateRequestDataAttributes]
    relationships: typing_extensions.Required[
        SubscriptionGroupCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[typing_extensions.Literal["subscriptionGroups"]]


class _SerializerSubscriptionGroupCreateRequestData(pydantic.BaseModel):
    """
    Serializer for SubscriptionGroupCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerSubscriptionGroupCreateRequestDataAttributes = (
        pydantic.Field(alias="attributes")
    )
    relationships: _SerializerSubscriptionGroupCreateRequestDataRelationships = (
        pydantic.Field(alias="relationships")
    )
    type: typing_extensions.Literal["subscriptionGroups"] = pydantic.Field(alias="type")


class SubscriptionGroupCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[SubscriptionGroupCreateRequestData]


class _SerializerSubscriptionGroupCreateRequest(pydantic.BaseModel):
    """
    Serializer for SubscriptionGroupCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerSubscriptionGroupCreateRequestData = pydantic.Field(alias="data")
