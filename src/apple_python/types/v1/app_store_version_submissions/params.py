"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class AppStoreVersionSubmissionCreateRequestDataRelationshipsAppStoreVersionData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["appStoreVersions"]]


class _SerializerAppStoreVersionSubmissionCreateRequestDataRelationshipsAppStoreVersionData(
    pydantic.BaseModel
):
    """
    Serializer for AppStoreVersionSubmissionCreateRequestDataRelationshipsAppStoreVersionData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["appStoreVersions"] = pydantic.Field(alias="type")


class AppStoreVersionSubmissionCreateRequestDataRelationshipsAppStoreVersion(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        AppStoreVersionSubmissionCreateRequestDataRelationshipsAppStoreVersionData
    ]


class _SerializerAppStoreVersionSubmissionCreateRequestDataRelationshipsAppStoreVersion(
    pydantic.BaseModel
):
    """
    Serializer for AppStoreVersionSubmissionCreateRequestDataRelationshipsAppStoreVersion handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAppStoreVersionSubmissionCreateRequestDataRelationshipsAppStoreVersionData = pydantic.Field(
        alias="data"
    )


class AppStoreVersionSubmissionCreateRequestDataRelationships(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    app_store_version: typing_extensions.Required[
        AppStoreVersionSubmissionCreateRequestDataRelationshipsAppStoreVersion
    ]


class _SerializerAppStoreVersionSubmissionCreateRequestDataRelationships(
    pydantic.BaseModel
):
    """
    Serializer for AppStoreVersionSubmissionCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    app_store_version: _SerializerAppStoreVersionSubmissionCreateRequestDataRelationshipsAppStoreVersion = pydantic.Field(
        alias="appStoreVersion"
    )


class AppStoreVersionSubmissionCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    relationships: typing_extensions.Required[
        AppStoreVersionSubmissionCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["appStoreVersionSubmissions"]
    ]


class _SerializerAppStoreVersionSubmissionCreateRequestData(pydantic.BaseModel):
    """
    Serializer for AppStoreVersionSubmissionCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    relationships: _SerializerAppStoreVersionSubmissionCreateRequestDataRelationships = pydantic.Field(
        alias="relationships"
    )
    type: typing_extensions.Literal["appStoreVersionSubmissions"] = pydantic.Field(
        alias="type"
    )


class AppStoreVersionSubmissionCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[AppStoreVersionSubmissionCreateRequestData]


class _SerializerAppStoreVersionSubmissionCreateRequest(pydantic.BaseModel):
    """
    Serializer for AppStoreVersionSubmissionCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAppStoreVersionSubmissionCreateRequestData = pydantic.Field(
        alias="data"
    )
