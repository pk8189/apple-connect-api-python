"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class CapabilityOption(typing_extensions.TypedDict):
    """
    No description specified
    """

    description: typing_extensions.NotRequired[str]
    enabled: typing_extensions.NotRequired[bool]
    enabled_by_default: typing_extensions.NotRequired[bool]
    key: typing_extensions.NotRequired[
        typing_extensions.Literal[
            "XCODE_5",
            "XCODE_6",
            "COMPLETE_PROTECTION",
            "PROTECTED_UNLESS_OPEN",
            "PROTECTED_UNTIL_FIRST_USER_AUTH",
            "PRIMARY_APP_CONSENT",
        ]
    ]
    name: typing_extensions.NotRequired[str]
    supports_wildcard: typing_extensions.NotRequired[bool]


class _SerializerCapabilityOption(pydantic.BaseModel):
    """
    Serializer for CapabilityOption handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    description: typing.Optional[str] = pydantic.Field(
        alias="description", default=None
    )
    enabled: typing.Optional[bool] = pydantic.Field(alias="enabled", default=None)
    enabled_by_default: typing.Optional[bool] = pydantic.Field(
        alias="enabledByDefault", default=None
    )
    key: typing.Optional[
        typing_extensions.Literal[
            "XCODE_5",
            "XCODE_6",
            "COMPLETE_PROTECTION",
            "PROTECTED_UNLESS_OPEN",
            "PROTECTED_UNTIL_FIRST_USER_AUTH",
            "PRIMARY_APP_CONSENT",
        ]
    ] = pydantic.Field(alias="key", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    supports_wildcard: typing.Optional[bool] = pydantic.Field(
        alias="supportsWildcard", default=None
    )


class BundleIdCapabilityCreateRequestDataRelationshipsBundleIdData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["bundleIds"]]


class _SerializerBundleIdCapabilityCreateRequestDataRelationshipsBundleIdData(
    pydantic.BaseModel
):
    """
    Serializer for BundleIdCapabilityCreateRequestDataRelationshipsBundleIdData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["bundleIds"] = pydantic.Field(alias="type")


class CapabilitySetting(typing_extensions.TypedDict):
    """
    No description specified
    """

    allowed_instances: typing_extensions.NotRequired[
        typing_extensions.Literal["ENTRY", "SINGLE", "MULTIPLE"]
    ]
    description: typing_extensions.NotRequired[str]
    enabled_by_default: typing_extensions.NotRequired[bool]
    key: typing_extensions.NotRequired[
        typing_extensions.Literal[
            "ICLOUD_VERSION",
            "DATA_PROTECTION_PERMISSION_LEVEL",
            "APPLE_ID_AUTH_APP_CONSENT",
        ]
    ]
    min_instances: typing_extensions.NotRequired[int]
    name: typing_extensions.NotRequired[str]
    options: typing_extensions.NotRequired[typing.List[CapabilityOption]]
    visible: typing_extensions.NotRequired[bool]


class _SerializerCapabilitySetting(pydantic.BaseModel):
    """
    Serializer for CapabilitySetting handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    allowed_instances: typing.Optional[
        typing_extensions.Literal["ENTRY", "SINGLE", "MULTIPLE"]
    ] = pydantic.Field(alias="allowedInstances", default=None)
    description: typing.Optional[str] = pydantic.Field(
        alias="description", default=None
    )
    enabled_by_default: typing.Optional[bool] = pydantic.Field(
        alias="enabledByDefault", default=None
    )
    key: typing.Optional[
        typing_extensions.Literal[
            "ICLOUD_VERSION",
            "DATA_PROTECTION_PERMISSION_LEVEL",
            "APPLE_ID_AUTH_APP_CONSENT",
        ]
    ] = pydantic.Field(alias="key", default=None)
    min_instances: typing.Optional[int] = pydantic.Field(
        alias="minInstances", default=None
    )
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    options: typing.Optional[typing.List[_SerializerCapabilityOption]] = pydantic.Field(
        alias="options", default=None
    )
    visible: typing.Optional[bool] = pydantic.Field(alias="visible", default=None)


class BundleIdCapabilityCreateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    capability_type: typing_extensions.Required[
        typing_extensions.Literal[
            "ICLOUD",
            "IN_APP_PURCHASE",
            "GAME_CENTER",
            "PUSH_NOTIFICATIONS",
            "WALLET",
            "INTER_APP_AUDIO",
            "MAPS",
            "ASSOCIATED_DOMAINS",
            "PERSONAL_VPN",
            "APP_GROUPS",
            "HEALTHKIT",
            "HOMEKIT",
            "WIRELESS_ACCESSORY_CONFIGURATION",
            "APPLE_PAY",
            "DATA_PROTECTION",
            "SIRIKIT",
            "NETWORK_EXTENSIONS",
            "MULTIPATH",
            "HOT_SPOT",
            "NFC_TAG_READING",
            "CLASSKIT",
            "AUTOFILL_CREDENTIAL_PROVIDER",
            "ACCESS_WIFI_INFORMATION",
            "NETWORK_CUSTOM_PROTOCOL",
            "COREMEDIA_HLS_LOW_LATENCY",
            "SYSTEM_EXTENSION_INSTALL",
            "USER_MANAGEMENT",
            "APPLE_ID_AUTH",
        ]
    ]
    settings: typing_extensions.NotRequired[typing.List[CapabilitySetting]]


class _SerializerBundleIdCapabilityCreateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for BundleIdCapabilityCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    capability_type: typing_extensions.Literal[
        "ICLOUD",
        "IN_APP_PURCHASE",
        "GAME_CENTER",
        "PUSH_NOTIFICATIONS",
        "WALLET",
        "INTER_APP_AUDIO",
        "MAPS",
        "ASSOCIATED_DOMAINS",
        "PERSONAL_VPN",
        "APP_GROUPS",
        "HEALTHKIT",
        "HOMEKIT",
        "WIRELESS_ACCESSORY_CONFIGURATION",
        "APPLE_PAY",
        "DATA_PROTECTION",
        "SIRIKIT",
        "NETWORK_EXTENSIONS",
        "MULTIPATH",
        "HOT_SPOT",
        "NFC_TAG_READING",
        "CLASSKIT",
        "AUTOFILL_CREDENTIAL_PROVIDER",
        "ACCESS_WIFI_INFORMATION",
        "NETWORK_CUSTOM_PROTOCOL",
        "COREMEDIA_HLS_LOW_LATENCY",
        "SYSTEM_EXTENSION_INSTALL",
        "USER_MANAGEMENT",
        "APPLE_ID_AUTH",
    ] = pydantic.Field(alias="capabilityType")
    settings: typing.Optional[typing.List[_SerializerCapabilitySetting]] = (
        pydantic.Field(alias="settings", default=None)
    )


class BundleIdCapabilityCreateRequestDataRelationshipsBundleId(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        BundleIdCapabilityCreateRequestDataRelationshipsBundleIdData
    ]


class _SerializerBundleIdCapabilityCreateRequestDataRelationshipsBundleId(
    pydantic.BaseModel
):
    """
    Serializer for BundleIdCapabilityCreateRequestDataRelationshipsBundleId handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerBundleIdCapabilityCreateRequestDataRelationshipsBundleIdData = (
        pydantic.Field(alias="data")
    )


class BundleIdCapabilityUpdateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    capability_type: typing_extensions.NotRequired[
        typing_extensions.Literal[
            "ICLOUD",
            "IN_APP_PURCHASE",
            "GAME_CENTER",
            "PUSH_NOTIFICATIONS",
            "WALLET",
            "INTER_APP_AUDIO",
            "MAPS",
            "ASSOCIATED_DOMAINS",
            "PERSONAL_VPN",
            "APP_GROUPS",
            "HEALTHKIT",
            "HOMEKIT",
            "WIRELESS_ACCESSORY_CONFIGURATION",
            "APPLE_PAY",
            "DATA_PROTECTION",
            "SIRIKIT",
            "NETWORK_EXTENSIONS",
            "MULTIPATH",
            "HOT_SPOT",
            "NFC_TAG_READING",
            "CLASSKIT",
            "AUTOFILL_CREDENTIAL_PROVIDER",
            "ACCESS_WIFI_INFORMATION",
            "NETWORK_CUSTOM_PROTOCOL",
            "COREMEDIA_HLS_LOW_LATENCY",
            "SYSTEM_EXTENSION_INSTALL",
            "USER_MANAGEMENT",
            "APPLE_ID_AUTH",
        ]
    ]
    settings: typing_extensions.NotRequired[typing.List[CapabilitySetting]]


class _SerializerBundleIdCapabilityUpdateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for BundleIdCapabilityUpdateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    capability_type: typing.Optional[
        typing_extensions.Literal[
            "ICLOUD",
            "IN_APP_PURCHASE",
            "GAME_CENTER",
            "PUSH_NOTIFICATIONS",
            "WALLET",
            "INTER_APP_AUDIO",
            "MAPS",
            "ASSOCIATED_DOMAINS",
            "PERSONAL_VPN",
            "APP_GROUPS",
            "HEALTHKIT",
            "HOMEKIT",
            "WIRELESS_ACCESSORY_CONFIGURATION",
            "APPLE_PAY",
            "DATA_PROTECTION",
            "SIRIKIT",
            "NETWORK_EXTENSIONS",
            "MULTIPATH",
            "HOT_SPOT",
            "NFC_TAG_READING",
            "CLASSKIT",
            "AUTOFILL_CREDENTIAL_PROVIDER",
            "ACCESS_WIFI_INFORMATION",
            "NETWORK_CUSTOM_PROTOCOL",
            "COREMEDIA_HLS_LOW_LATENCY",
            "SYSTEM_EXTENSION_INSTALL",
            "USER_MANAGEMENT",
            "APPLE_ID_AUTH",
        ]
    ] = pydantic.Field(alias="capabilityType", default=None)
    settings: typing.Optional[typing.List[_SerializerCapabilitySetting]] = (
        pydantic.Field(alias="settings", default=None)
    )


class BundleIdCapabilityCreateRequestDataRelationships(typing_extensions.TypedDict):
    """
    No description specified
    """

    bundle_id: typing_extensions.Required[
        BundleIdCapabilityCreateRequestDataRelationshipsBundleId
    ]


class _SerializerBundleIdCapabilityCreateRequestDataRelationships(pydantic.BaseModel):
    """
    Serializer for BundleIdCapabilityCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    bundle_id: _SerializerBundleIdCapabilityCreateRequestDataRelationshipsBundleId = (
        pydantic.Field(alias="bundleId")
    )


class BundleIdCapabilityUpdateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[
        BundleIdCapabilityUpdateRequestDataAttributes
    ]
    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["bundleIdCapabilities"]]


class _SerializerBundleIdCapabilityUpdateRequestData(pydantic.BaseModel):
    """
    Serializer for BundleIdCapabilityUpdateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[
        _SerializerBundleIdCapabilityUpdateRequestDataAttributes
    ] = pydantic.Field(alias="attributes", default=None)
    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["bundleIdCapabilities"] = pydantic.Field(
        alias="type"
    )


class BundleIdCapabilityCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[
        BundleIdCapabilityCreateRequestDataAttributes
    ]
    relationships: typing_extensions.Required[
        BundleIdCapabilityCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[typing_extensions.Literal["bundleIdCapabilities"]]


class _SerializerBundleIdCapabilityCreateRequestData(pydantic.BaseModel):
    """
    Serializer for BundleIdCapabilityCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerBundleIdCapabilityCreateRequestDataAttributes = (
        pydantic.Field(alias="attributes")
    )
    relationships: _SerializerBundleIdCapabilityCreateRequestDataRelationships = (
        pydantic.Field(alias="relationships")
    )
    type: typing_extensions.Literal["bundleIdCapabilities"] = pydantic.Field(
        alias="type"
    )


class BundleIdCapabilityUpdateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[BundleIdCapabilityUpdateRequestData]


class _SerializerBundleIdCapabilityUpdateRequest(pydantic.BaseModel):
    """
    Serializer for BundleIdCapabilityUpdateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerBundleIdCapabilityUpdateRequestData = pydantic.Field(alias="data")


class BundleIdCapabilityCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[BundleIdCapabilityCreateRequestData]


class _SerializerBundleIdCapabilityCreateRequest(pydantic.BaseModel):
    """
    Serializer for BundleIdCapabilityCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerBundleIdCapabilityCreateRequestData = pydantic.Field(alias="data")
