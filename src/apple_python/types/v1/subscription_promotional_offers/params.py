"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class SubscriptionPromotionalOfferUpdateRequestDataRelationshipsPricesDataItem(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["subscriptionPromotionalOfferPrices"]
    ]


class _SerializerSubscriptionPromotionalOfferUpdateRequestDataRelationshipsPricesDataItem(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionPromotionalOfferUpdateRequestDataRelationshipsPricesDataItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["subscriptionPromotionalOfferPrices"] = (
        pydantic.Field(alias="type")
    )


class SubscriptionPromotionalOfferPriceInlineCreateRelationshipsSubscriptionPricePointData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["subscriptionPricePoints"]
    ]


class _SerializerSubscriptionPromotionalOfferPriceInlineCreateRelationshipsSubscriptionPricePointData(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionPromotionalOfferPriceInlineCreateRelationshipsSubscriptionPricePointData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["subscriptionPricePoints"] = pydantic.Field(
        alias="type"
    )


class SubscriptionPromotionalOfferPriceInlineCreateRelationshipsTerritoryData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["territories"]]


class _SerializerSubscriptionPromotionalOfferPriceInlineCreateRelationshipsTerritoryData(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionPromotionalOfferPriceInlineCreateRelationshipsTerritoryData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["territories"] = pydantic.Field(alias="type")


class SubscriptionPromotionalOfferCreateRequestDataAttributes(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    duration: typing_extensions.Required[
        typing_extensions.Literal[
            "ONE_DAY",
            "THREE_DAYS",
            "ONE_WEEK",
            "TWO_WEEKS",
            "ONE_MONTH",
            "TWO_MONTHS",
            "THREE_MONTHS",
            "SIX_MONTHS",
            "ONE_YEAR",
        ]
    ]
    name: typing_extensions.Required[str]
    number_of_periods: typing_extensions.Required[int]
    offer_code: typing_extensions.Required[str]
    offer_mode: typing_extensions.Required[
        typing_extensions.Literal["PAY_AS_YOU_GO", "PAY_UP_FRONT", "FREE_TRIAL"]
    ]


class _SerializerSubscriptionPromotionalOfferCreateRequestDataAttributes(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionPromotionalOfferCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    duration: typing_extensions.Literal[
        "ONE_DAY",
        "THREE_DAYS",
        "ONE_WEEK",
        "TWO_WEEKS",
        "ONE_MONTH",
        "TWO_MONTHS",
        "THREE_MONTHS",
        "SIX_MONTHS",
        "ONE_YEAR",
    ] = pydantic.Field(alias="duration")
    name: str = pydantic.Field(alias="name")
    number_of_periods: int = pydantic.Field(alias="numberOfPeriods")
    offer_code: str = pydantic.Field(alias="offerCode")
    offer_mode: typing_extensions.Literal[
        "PAY_AS_YOU_GO", "PAY_UP_FRONT", "FREE_TRIAL"
    ] = pydantic.Field(alias="offerMode")


class SubscriptionPromotionalOfferCreateRequestDataRelationshipsPricesDataItem(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["subscriptionPromotionalOfferPrices"]
    ]


class _SerializerSubscriptionPromotionalOfferCreateRequestDataRelationshipsPricesDataItem(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionPromotionalOfferCreateRequestDataRelationshipsPricesDataItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["subscriptionPromotionalOfferPrices"] = (
        pydantic.Field(alias="type")
    )


class SubscriptionPromotionalOfferCreateRequestDataRelationshipsSubscriptionData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["subscriptions"]]


class _SerializerSubscriptionPromotionalOfferCreateRequestDataRelationshipsSubscriptionData(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionPromotionalOfferCreateRequestDataRelationshipsSubscriptionData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["subscriptions"] = pydantic.Field(alias="type")


class SubscriptionPromotionalOfferUpdateRequestDataRelationshipsPrices(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        typing.List[
            SubscriptionPromotionalOfferUpdateRequestDataRelationshipsPricesDataItem
        ]
    ]


class _SerializerSubscriptionPromotionalOfferUpdateRequestDataRelationshipsPrices(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionPromotionalOfferUpdateRequestDataRelationshipsPrices handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        typing.List[
            _SerializerSubscriptionPromotionalOfferUpdateRequestDataRelationshipsPricesDataItem
        ]
    ] = pydantic.Field(alias="data", default=None)


class SubscriptionPromotionalOfferPriceInlineCreateRelationshipsSubscriptionPricePoint(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        SubscriptionPromotionalOfferPriceInlineCreateRelationshipsSubscriptionPricePointData
    ]


class _SerializerSubscriptionPromotionalOfferPriceInlineCreateRelationshipsSubscriptionPricePoint(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionPromotionalOfferPriceInlineCreateRelationshipsSubscriptionPricePoint handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        _SerializerSubscriptionPromotionalOfferPriceInlineCreateRelationshipsSubscriptionPricePointData
    ] = pydantic.Field(alias="data", default=None)


class SubscriptionPromotionalOfferPriceInlineCreateRelationshipsTerritory(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        SubscriptionPromotionalOfferPriceInlineCreateRelationshipsTerritoryData
    ]


class _SerializerSubscriptionPromotionalOfferPriceInlineCreateRelationshipsTerritory(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionPromotionalOfferPriceInlineCreateRelationshipsTerritory handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        _SerializerSubscriptionPromotionalOfferPriceInlineCreateRelationshipsTerritoryData
    ] = pydantic.Field(alias="data", default=None)


class SubscriptionPromotionalOfferCreateRequestDataRelationshipsPrices(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        typing.List[
            SubscriptionPromotionalOfferCreateRequestDataRelationshipsPricesDataItem
        ]
    ]


class _SerializerSubscriptionPromotionalOfferCreateRequestDataRelationshipsPrices(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionPromotionalOfferCreateRequestDataRelationshipsPrices handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.List[
        _SerializerSubscriptionPromotionalOfferCreateRequestDataRelationshipsPricesDataItem
    ] = pydantic.Field(alias="data")


class SubscriptionPromotionalOfferCreateRequestDataRelationshipsSubscription(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        SubscriptionPromotionalOfferCreateRequestDataRelationshipsSubscriptionData
    ]


class _SerializerSubscriptionPromotionalOfferCreateRequestDataRelationshipsSubscription(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionPromotionalOfferCreateRequestDataRelationshipsSubscription handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerSubscriptionPromotionalOfferCreateRequestDataRelationshipsSubscriptionData = pydantic.Field(
        alias="data"
    )


class SubscriptionPromotionalOfferUpdateRequestDataRelationships(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    prices: typing_extensions.NotRequired[
        SubscriptionPromotionalOfferUpdateRequestDataRelationshipsPrices
    ]


class _SerializerSubscriptionPromotionalOfferUpdateRequestDataRelationships(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionPromotionalOfferUpdateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    prices: typing.Optional[
        _SerializerSubscriptionPromotionalOfferUpdateRequestDataRelationshipsPrices
    ] = pydantic.Field(alias="prices", default=None)


class SubscriptionPromotionalOfferPriceInlineCreateRelationships(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    subscription_price_point: typing_extensions.NotRequired[
        SubscriptionPromotionalOfferPriceInlineCreateRelationshipsSubscriptionPricePoint
    ]
    territory: typing_extensions.NotRequired[
        SubscriptionPromotionalOfferPriceInlineCreateRelationshipsTerritory
    ]


class _SerializerSubscriptionPromotionalOfferPriceInlineCreateRelationships(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionPromotionalOfferPriceInlineCreateRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    subscription_price_point: typing.Optional[
        _SerializerSubscriptionPromotionalOfferPriceInlineCreateRelationshipsSubscriptionPricePoint
    ] = pydantic.Field(alias="subscriptionPricePoint", default=None)
    territory: typing.Optional[
        _SerializerSubscriptionPromotionalOfferPriceInlineCreateRelationshipsTerritory
    ] = pydantic.Field(alias="territory", default=None)


class SubscriptionPromotionalOfferCreateRequestDataRelationships(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    prices: typing_extensions.Required[
        SubscriptionPromotionalOfferCreateRequestDataRelationshipsPrices
    ]
    subscription: typing_extensions.Required[
        SubscriptionPromotionalOfferCreateRequestDataRelationshipsSubscription
    ]


class _SerializerSubscriptionPromotionalOfferCreateRequestDataRelationships(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionPromotionalOfferCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    prices: _SerializerSubscriptionPromotionalOfferCreateRequestDataRelationshipsPrices = pydantic.Field(
        alias="prices"
    )
    subscription: _SerializerSubscriptionPromotionalOfferCreateRequestDataRelationshipsSubscription = pydantic.Field(
        alias="subscription"
    )


class SubscriptionPromotionalOfferUpdateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    relationships: typing_extensions.NotRequired[
        SubscriptionPromotionalOfferUpdateRequestDataRelationships
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["subscriptionPromotionalOffers"]
    ]


class _SerializerSubscriptionPromotionalOfferUpdateRequestData(pydantic.BaseModel):
    """
    Serializer for SubscriptionPromotionalOfferUpdateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    relationships: typing.Optional[
        _SerializerSubscriptionPromotionalOfferUpdateRequestDataRelationships
    ] = pydantic.Field(alias="relationships", default=None)
    type: typing_extensions.Literal["subscriptionPromotionalOffers"] = pydantic.Field(
        alias="type"
    )


class SubscriptionPromotionalOfferPriceInlineCreate(typing_extensions.TypedDict):
    """
    No description specified
    """

    id: typing_extensions.NotRequired[str]
    relationships: typing_extensions.NotRequired[
        SubscriptionPromotionalOfferPriceInlineCreateRelationships
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["subscriptionPromotionalOfferPrices"]
    ]


class _SerializerSubscriptionPromotionalOfferPriceInlineCreate(pydantic.BaseModel):
    """
    Serializer for SubscriptionPromotionalOfferPriceInlineCreate handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    relationships: typing.Optional[
        _SerializerSubscriptionPromotionalOfferPriceInlineCreateRelationships
    ] = pydantic.Field(alias="relationships", default=None)
    type: typing_extensions.Literal["subscriptionPromotionalOfferPrices"] = (
        pydantic.Field(alias="type")
    )


class SubscriptionPromotionalOfferCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[
        SubscriptionPromotionalOfferCreateRequestDataAttributes
    ]
    relationships: typing_extensions.Required[
        SubscriptionPromotionalOfferCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["subscriptionPromotionalOffers"]
    ]


class _SerializerSubscriptionPromotionalOfferCreateRequestData(pydantic.BaseModel):
    """
    Serializer for SubscriptionPromotionalOfferCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerSubscriptionPromotionalOfferCreateRequestDataAttributes = (
        pydantic.Field(alias="attributes")
    )
    relationships: _SerializerSubscriptionPromotionalOfferCreateRequestDataRelationships = pydantic.Field(
        alias="relationships"
    )
    type: typing_extensions.Literal["subscriptionPromotionalOffers"] = pydantic.Field(
        alias="type"
    )


class SubscriptionPromotionalOfferUpdateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[SubscriptionPromotionalOfferUpdateRequestData]
    included: typing_extensions.NotRequired[
        typing.List[SubscriptionPromotionalOfferPriceInlineCreate]
    ]


class _SerializerSubscriptionPromotionalOfferUpdateRequest(pydantic.BaseModel):
    """
    Serializer for SubscriptionPromotionalOfferUpdateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerSubscriptionPromotionalOfferUpdateRequestData = pydantic.Field(
        alias="data"
    )
    included: typing.Optional[
        typing.List[_SerializerSubscriptionPromotionalOfferPriceInlineCreate]
    ] = pydantic.Field(alias="included", default=None)


class SubscriptionPromotionalOfferCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[SubscriptionPromotionalOfferCreateRequestData]
    included: typing_extensions.NotRequired[
        typing.List[SubscriptionPromotionalOfferPriceInlineCreate]
    ]


class _SerializerSubscriptionPromotionalOfferCreateRequest(pydantic.BaseModel):
    """
    Serializer for SubscriptionPromotionalOfferCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerSubscriptionPromotionalOfferCreateRequestData = pydantic.Field(
        alias="data"
    )
    included: typing.Optional[
        typing.List[_SerializerSubscriptionPromotionalOfferPriceInlineCreate]
    ] = pydantic.Field(alias="included", default=None)
