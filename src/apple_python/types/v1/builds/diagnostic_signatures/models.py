"""File Generated by Sideko (sideko.dev)"""

import io
import typing
import typing_extensions
from pydantic import (
    BaseModel as _PydanticBaseModel,
    Field as _PydanticField,
    ConfigDict as _PydanticConfigDict,
)

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class DiagnosticInsightReferenceVersionsItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    value: typing.Optional[float] = _PydanticField(alias="value", default=None)
    version: typing.Optional[str] = _PydanticField(alias="version", default=None)


class ResourceLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class PagedDocumentLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    first: typing.Optional[str] = _PydanticField(alias="first", default=None)
    next: typing.Optional[str] = _PydanticField(alias="next", default=None)
    self: str = _PydanticField(alias="self")


class PagingInformationPaging(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    limit: int = _PydanticField(alias="limit")
    total: typing.Optional[int] = _PydanticField(alias="total", default=None)


class DiagnosticInsight(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    direction: typing.Optional[typing_extensions.Literal["UP", "DOWN", "UNDEFINED"]] = (
        _PydanticField(alias="direction", default=None)
    )
    insight_type: typing.Optional[typing_extensions.Literal["TREND"]] = _PydanticField(
        alias="insightType", default=None
    )
    reference_versions: typing.Optional[
        typing.List[DiagnosticInsightReferenceVersionsItem]
    ] = _PydanticField(alias="referenceVersions", default=None)


class PagingInformation(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    paging: PagingInformationPaging = _PydanticField(alias="paging")


class DiagnosticSignatureAttributes(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    diagnostic_type: typing.Optional[
        typing_extensions.Literal["DISK_WRITES", "HANGS", "LAUNCHES"]
    ] = _PydanticField(alias="diagnosticType", default=None)
    insight: typing.Optional[DiagnosticInsight] = _PydanticField(
        alias="insight", default=None
    )
    signature: typing.Optional[str] = _PydanticField(alias="signature", default=None)
    weight: typing.Optional[float] = _PydanticField(alias="weight", default=None)


class DiagnosticSignature(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    attributes: typing.Optional[DiagnosticSignatureAttributes] = _PydanticField(
        alias="attributes", default=None
    )
    id: str = _PydanticField(alias="id")
    links: typing.Optional[ResourceLinks] = _PydanticField(alias="links", default=None)
    type: typing_extensions.Literal["diagnosticSignatures"] = _PydanticField(
        alias="type"
    )


class DiagnosticSignaturesResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.List[DiagnosticSignature] = _PydanticField(alias="data")
    links: PagedDocumentLinks = _PydanticField(alias="links")
    meta: typing.Optional[PagingInformation] = _PydanticField(
        alias="meta", default=None
    )
