"""File Generated by Sideko (sideko.dev)"""

import io
import typing
import typing_extensions
from pydantic import (
    BaseModel as _PydanticBaseModel,
    Field as _PydanticField,
    ConfigDict as _PydanticConfigDict,
)

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class BetaAppReviewSubmissionAttributes(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    beta_review_state: typing.Optional[
        typing_extensions.Literal[
            "WAITING_FOR_REVIEW", "IN_REVIEW", "REJECTED", "APPROVED"
        ]
    ] = _PydanticField(alias="betaReviewState", default=None)
    submitted_date: typing.Optional[str] = _PydanticField(
        alias="submittedDate", default=None
    )


class ResourceLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class BetaAppReviewSubmissionRelationshipsBuildData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["builds"] = _PydanticField(alias="type")


class BetaAppReviewSubmissionRelationshipsBuildLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class DocumentLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    self: str = _PydanticField(alias="self")


class BetaAppReviewSubmissionRelationshipsBuild(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[BetaAppReviewSubmissionRelationshipsBuildData] = (
        _PydanticField(alias="data", default=None)
    )
    links: typing.Optional[BetaAppReviewSubmissionRelationshipsBuildLinks] = (
        _PydanticField(alias="links", default=None)
    )


class BetaAppReviewSubmissionRelationships(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    build: typing.Optional[BetaAppReviewSubmissionRelationshipsBuild] = _PydanticField(
        alias="build", default=None
    )


class BetaAppReviewSubmission(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    attributes: typing.Optional[BetaAppReviewSubmissionAttributes] = _PydanticField(
        alias="attributes", default=None
    )
    id: str = _PydanticField(alias="id")
    links: typing.Optional[ResourceLinks] = _PydanticField(alias="links", default=None)
    relationships: typing.Optional[BetaAppReviewSubmissionRelationships] = (
        _PydanticField(alias="relationships", default=None)
    )
    type: typing_extensions.Literal["betaAppReviewSubmissions"] = _PydanticField(
        alias="type"
    )


class BetaAppReviewSubmissionWithoutIncludesResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: BetaAppReviewSubmission = _PydanticField(alias="data")
    links: DocumentLinks = _PydanticField(alias="links")
