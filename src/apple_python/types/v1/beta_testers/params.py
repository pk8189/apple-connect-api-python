"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class BetaTesterCreateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    email_field: typing_extensions.Required[str]
    first_name: typing_extensions.NotRequired[str]
    last_name: typing_extensions.NotRequired[str]


class _SerializerBetaTesterCreateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for BetaTesterCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    email_field: str = pydantic.Field(alias="email")
    first_name: typing.Optional[str] = pydantic.Field(alias="firstName", default=None)
    last_name: typing.Optional[str] = pydantic.Field(alias="lastName", default=None)


class BetaTesterCreateRequestDataRelationshipsBetaGroupsDataItem(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["betaGroups"]]


class _SerializerBetaTesterCreateRequestDataRelationshipsBetaGroupsDataItem(
    pydantic.BaseModel
):
    """
    Serializer for BetaTesterCreateRequestDataRelationshipsBetaGroupsDataItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["betaGroups"] = pydantic.Field(alias="type")


class BetaTesterCreateRequestDataRelationshipsBuildsDataItem(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["builds"]]


class _SerializerBetaTesterCreateRequestDataRelationshipsBuildsDataItem(
    pydantic.BaseModel
):
    """
    Serializer for BetaTesterCreateRequestDataRelationshipsBuildsDataItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["builds"] = pydantic.Field(alias="type")


class BetaTesterCreateRequestDataRelationshipsBetaGroups(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        typing.List[BetaTesterCreateRequestDataRelationshipsBetaGroupsDataItem]
    ]


class _SerializerBetaTesterCreateRequestDataRelationshipsBetaGroups(pydantic.BaseModel):
    """
    Serializer for BetaTesterCreateRequestDataRelationshipsBetaGroups handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        typing.List[
            _SerializerBetaTesterCreateRequestDataRelationshipsBetaGroupsDataItem
        ]
    ] = pydantic.Field(alias="data", default=None)


class BetaTesterCreateRequestDataRelationshipsBuilds(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        typing.List[BetaTesterCreateRequestDataRelationshipsBuildsDataItem]
    ]


class _SerializerBetaTesterCreateRequestDataRelationshipsBuilds(pydantic.BaseModel):
    """
    Serializer for BetaTesterCreateRequestDataRelationshipsBuilds handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        typing.List[_SerializerBetaTesterCreateRequestDataRelationshipsBuildsDataItem]
    ] = pydantic.Field(alias="data", default=None)


class BetaTesterCreateRequestDataRelationships(typing_extensions.TypedDict):
    """
    No description specified
    """

    beta_groups: typing_extensions.NotRequired[
        BetaTesterCreateRequestDataRelationshipsBetaGroups
    ]
    builds: typing_extensions.NotRequired[
        BetaTesterCreateRequestDataRelationshipsBuilds
    ]


class _SerializerBetaTesterCreateRequestDataRelationships(pydantic.BaseModel):
    """
    Serializer for BetaTesterCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    beta_groups: typing.Optional[
        _SerializerBetaTesterCreateRequestDataRelationshipsBetaGroups
    ] = pydantic.Field(alias="betaGroups", default=None)
    builds: typing.Optional[
        _SerializerBetaTesterCreateRequestDataRelationshipsBuilds
    ] = pydantic.Field(alias="builds", default=None)


class BetaTesterCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[BetaTesterCreateRequestDataAttributes]
    relationships: typing_extensions.NotRequired[
        BetaTesterCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[typing_extensions.Literal["betaTesters"]]


class _SerializerBetaTesterCreateRequestData(pydantic.BaseModel):
    """
    Serializer for BetaTesterCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerBetaTesterCreateRequestDataAttributes = pydantic.Field(
        alias="attributes"
    )
    relationships: typing.Optional[
        _SerializerBetaTesterCreateRequestDataRelationships
    ] = pydantic.Field(alias="relationships", default=None)
    type: typing_extensions.Literal["betaTesters"] = pydantic.Field(alias="type")


class BetaTesterCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[BetaTesterCreateRequestData]


class _SerializerBetaTesterCreateRequest(pydantic.BaseModel):
    """
    Serializer for BetaTesterCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerBetaTesterCreateRequestData = pydantic.Field(alias="data")
