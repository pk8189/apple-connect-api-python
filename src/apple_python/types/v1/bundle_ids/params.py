"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class BundleIdUpdateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    name: typing_extensions.NotRequired[str]


class _SerializerBundleIdUpdateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for BundleIdUpdateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)


class BundleIdCreateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    identifier: typing_extensions.Required[str]
    name: typing_extensions.Required[str]
    platform_field: typing_extensions.Required[
        typing_extensions.Literal["IOS", "MAC_OS"]
    ]
    seed_id: typing_extensions.NotRequired[str]


class _SerializerBundleIdCreateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for BundleIdCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    identifier: str = pydantic.Field(alias="identifier")
    name: str = pydantic.Field(alias="name")
    platform_field: typing_extensions.Literal["IOS", "MAC_OS"] = pydantic.Field(
        alias="platform"
    )
    seed_id: typing.Optional[str] = pydantic.Field(alias="seedId", default=None)


class BundleIdUpdateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[BundleIdUpdateRequestDataAttributes]
    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["bundleIds"]]


class _SerializerBundleIdUpdateRequestData(pydantic.BaseModel):
    """
    Serializer for BundleIdUpdateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[_SerializerBundleIdUpdateRequestDataAttributes] = (
        pydantic.Field(alias="attributes", default=None)
    )
    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["bundleIds"] = pydantic.Field(alias="type")


class BundleIdCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[BundleIdCreateRequestDataAttributes]
    type: typing_extensions.Required[typing_extensions.Literal["bundleIds"]]


class _SerializerBundleIdCreateRequestData(pydantic.BaseModel):
    """
    Serializer for BundleIdCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerBundleIdCreateRequestDataAttributes = pydantic.Field(
        alias="attributes"
    )
    type: typing_extensions.Literal["bundleIds"] = pydantic.Field(alias="type")


class BundleIdUpdateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[BundleIdUpdateRequestData]


class _SerializerBundleIdUpdateRequest(pydantic.BaseModel):
    """
    Serializer for BundleIdUpdateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerBundleIdUpdateRequestData = pydantic.Field(alias="data")


class BundleIdCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[BundleIdCreateRequestData]


class _SerializerBundleIdCreateRequest(pydantic.BaseModel):
    """
    Serializer for BundleIdCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerBundleIdCreateRequestData = pydantic.Field(alias="data")
