"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class GameCenterAchievementImageUpdateRequestDataAttributes(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    uploaded: typing_extensions.NotRequired[bool]


class _SerializerGameCenterAchievementImageUpdateRequestDataAttributes(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterAchievementImageUpdateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    uploaded: typing.Optional[bool] = pydantic.Field(alias="uploaded", default=None)


class GameCenterAchievementImageCreateRequestDataAttributes(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    file_name: typing_extensions.Required[str]
    file_size: typing_extensions.Required[int]


class _SerializerGameCenterAchievementImageCreateRequestDataAttributes(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterAchievementImageCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    file_name: str = pydantic.Field(alias="fileName")
    file_size: int = pydantic.Field(alias="fileSize")


class GameCenterAchievementImageCreateRequestDataRelationshipsGameCenterAchievementLocalizationData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["gameCenterAchievementLocalizations"]
    ]


class _SerializerGameCenterAchievementImageCreateRequestDataRelationshipsGameCenterAchievementLocalizationData(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterAchievementImageCreateRequestDataRelationshipsGameCenterAchievementLocalizationData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["gameCenterAchievementLocalizations"] = (
        pydantic.Field(alias="type")
    )


class GameCenterAchievementImageUpdateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[
        GameCenterAchievementImageUpdateRequestDataAttributes
    ]
    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["gameCenterAchievementImages"]
    ]


class _SerializerGameCenterAchievementImageUpdateRequestData(pydantic.BaseModel):
    """
    Serializer for GameCenterAchievementImageUpdateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[
        _SerializerGameCenterAchievementImageUpdateRequestDataAttributes
    ] = pydantic.Field(alias="attributes", default=None)
    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["gameCenterAchievementImages"] = pydantic.Field(
        alias="type"
    )


class GameCenterAchievementImageCreateRequestDataRelationshipsGameCenterAchievementLocalization(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        GameCenterAchievementImageCreateRequestDataRelationshipsGameCenterAchievementLocalizationData
    ]


class _SerializerGameCenterAchievementImageCreateRequestDataRelationshipsGameCenterAchievementLocalization(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterAchievementImageCreateRequestDataRelationshipsGameCenterAchievementLocalization handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerGameCenterAchievementImageCreateRequestDataRelationshipsGameCenterAchievementLocalizationData = pydantic.Field(
        alias="data"
    )


class GameCenterAchievementImageUpdateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[GameCenterAchievementImageUpdateRequestData]


class _SerializerGameCenterAchievementImageUpdateRequest(pydantic.BaseModel):
    """
    Serializer for GameCenterAchievementImageUpdateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerGameCenterAchievementImageUpdateRequestData = pydantic.Field(
        alias="data"
    )


class GameCenterAchievementImageCreateRequestDataRelationships(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    game_center_achievement_localization: typing_extensions.Required[
        GameCenterAchievementImageCreateRequestDataRelationshipsGameCenterAchievementLocalization
    ]


class _SerializerGameCenterAchievementImageCreateRequestDataRelationships(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterAchievementImageCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    game_center_achievement_localization: _SerializerGameCenterAchievementImageCreateRequestDataRelationshipsGameCenterAchievementLocalization = pydantic.Field(
        alias="gameCenterAchievementLocalization"
    )


class GameCenterAchievementImageCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[
        GameCenterAchievementImageCreateRequestDataAttributes
    ]
    relationships: typing_extensions.Required[
        GameCenterAchievementImageCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["gameCenterAchievementImages"]
    ]


class _SerializerGameCenterAchievementImageCreateRequestData(pydantic.BaseModel):
    """
    Serializer for GameCenterAchievementImageCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerGameCenterAchievementImageCreateRequestDataAttributes = (
        pydantic.Field(alias="attributes")
    )
    relationships: _SerializerGameCenterAchievementImageCreateRequestDataRelationships = pydantic.Field(
        alias="relationships"
    )
    type: typing_extensions.Literal["gameCenterAchievementImages"] = pydantic.Field(
        alias="type"
    )


class GameCenterAchievementImageCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[GameCenterAchievementImageCreateRequestData]


class _SerializerGameCenterAchievementImageCreateRequest(pydantic.BaseModel):
    """
    Serializer for GameCenterAchievementImageCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerGameCenterAchievementImageCreateRequestData = pydantic.Field(
        alias="data"
    )
