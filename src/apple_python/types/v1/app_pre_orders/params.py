"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class AppPreOrderUpdateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    app_release_date: typing_extensions.NotRequired[str]


class _SerializerAppPreOrderUpdateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for AppPreOrderUpdateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    app_release_date: typing.Optional[str] = pydantic.Field(
        alias="appReleaseDate", default=None
    )


class AppPreOrderCreateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    app_release_date: typing_extensions.NotRequired[str]


class _SerializerAppPreOrderCreateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for AppPreOrderCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    app_release_date: typing.Optional[str] = pydantic.Field(
        alias="appReleaseDate", default=None
    )


class AppPreOrderCreateRequestDataRelationshipsAppData(typing_extensions.TypedDict):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["apps"]]


class _SerializerAppPreOrderCreateRequestDataRelationshipsAppData(pydantic.BaseModel):
    """
    Serializer for AppPreOrderCreateRequestDataRelationshipsAppData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["apps"] = pydantic.Field(alias="type")


class AppPreOrderUpdateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[AppPreOrderUpdateRequestDataAttributes]
    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["appPreOrders"]]


class _SerializerAppPreOrderUpdateRequestData(pydantic.BaseModel):
    """
    Serializer for AppPreOrderUpdateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[_SerializerAppPreOrderUpdateRequestDataAttributes] = (
        pydantic.Field(alias="attributes", default=None)
    )
    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["appPreOrders"] = pydantic.Field(alias="type")


class AppPreOrderCreateRequestDataRelationshipsApp(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[AppPreOrderCreateRequestDataRelationshipsAppData]


class _SerializerAppPreOrderCreateRequestDataRelationshipsApp(pydantic.BaseModel):
    """
    Serializer for AppPreOrderCreateRequestDataRelationshipsApp handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAppPreOrderCreateRequestDataRelationshipsAppData = pydantic.Field(
        alias="data"
    )


class AppPreOrderUpdateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[AppPreOrderUpdateRequestData]


class _SerializerAppPreOrderUpdateRequest(pydantic.BaseModel):
    """
    Serializer for AppPreOrderUpdateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAppPreOrderUpdateRequestData = pydantic.Field(alias="data")


class AppPreOrderCreateRequestDataRelationships(typing_extensions.TypedDict):
    """
    No description specified
    """

    app: typing_extensions.Required[AppPreOrderCreateRequestDataRelationshipsApp]


class _SerializerAppPreOrderCreateRequestDataRelationships(pydantic.BaseModel):
    """
    Serializer for AppPreOrderCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    app: _SerializerAppPreOrderCreateRequestDataRelationshipsApp = pydantic.Field(
        alias="app"
    )


class AppPreOrderCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[AppPreOrderCreateRequestDataAttributes]
    relationships: typing_extensions.Required[AppPreOrderCreateRequestDataRelationships]
    type: typing_extensions.Required[typing_extensions.Literal["appPreOrders"]]


class _SerializerAppPreOrderCreateRequestData(pydantic.BaseModel):
    """
    Serializer for AppPreOrderCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[_SerializerAppPreOrderCreateRequestDataAttributes] = (
        pydantic.Field(alias="attributes", default=None)
    )
    relationships: _SerializerAppPreOrderCreateRequestDataRelationships = (
        pydantic.Field(alias="relationships")
    )
    type: typing_extensions.Literal["appPreOrders"] = pydantic.Field(alias="type")


class AppPreOrderCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[AppPreOrderCreateRequestData]


class _SerializerAppPreOrderCreateRequest(pydantic.BaseModel):
    """
    Serializer for AppPreOrderCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAppPreOrderCreateRequestData = pydantic.Field(alias="data")
