"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class TerritoryAvailabilityUpdateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    available: typing_extensions.NotRequired[bool]
    pre_order_enabled: typing_extensions.NotRequired[bool]
    release_date: typing_extensions.NotRequired[str]


class _SerializerTerritoryAvailabilityUpdateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for TerritoryAvailabilityUpdateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)
    pre_order_enabled: typing.Optional[bool] = pydantic.Field(
        alias="preOrderEnabled", default=None
    )
    release_date: typing.Optional[str] = pydantic.Field(
        alias="releaseDate", default=None
    )


class TerritoryAvailabilityUpdateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[
        TerritoryAvailabilityUpdateRequestDataAttributes
    ]
    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["territoryAvailabilities"]
    ]


class _SerializerTerritoryAvailabilityUpdateRequestData(pydantic.BaseModel):
    """
    Serializer for TerritoryAvailabilityUpdateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[
        _SerializerTerritoryAvailabilityUpdateRequestDataAttributes
    ] = pydantic.Field(alias="attributes", default=None)
    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["territoryAvailabilities"] = pydantic.Field(
        alias="type"
    )


class TerritoryAvailabilityUpdateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[TerritoryAvailabilityUpdateRequestData]


class _SerializerTerritoryAvailabilityUpdateRequest(pydantic.BaseModel):
    """
    Serializer for TerritoryAvailabilityUpdateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerTerritoryAvailabilityUpdateRequestData = pydantic.Field(
        alias="data"
    )
