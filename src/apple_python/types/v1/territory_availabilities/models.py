"""File Generated by Sideko (sideko.dev)"""

import io
import typing
import typing_extensions
from pydantic import (
    BaseModel as _PydanticBaseModel,
    Field as _PydanticField,
    ConfigDict as _PydanticConfigDict,
)

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class TerritoryAvailabilityAttributes(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = _PydanticField(alias="available", default=None)
    content_statuses: typing.Optional[
        typing.List[
            typing_extensions.Literal[
                "AVAILABLE",
                "AVAILABLE_FOR_PREORDER_ON_DATE",
                "PROCESSING_TO_NOT_AVAILABLE",
                "PROCESSING_TO_AVAILABLE",
                "PROCESSING_TO_PRE_ORDER",
                "AVAILABLE_FOR_SALE_UNRELEASED_APP",
                "PREORDER_ON_UNRELEASED_APP",
                "AVAILABLE_FOR_PREORDER",
                "MISSING_RATING",
                "CANNOT_SELL_RESTRICTED_RATING",
                "BRAZIL_REQUIRED_TAX_ID",
                "MISSING_GRN",
                "UNVERIFIED_GRN",
                "CANNOT_SELL_SEVENTEEN_PLUS_APPS",
                "CANNOT_SELL_SEXUALLY_EXPLICIT",
                "CANNOT_SELL_NON_IOS_GAMES",
                "CANNOT_SELL_SEVENTEEN_PLUS_GAMES",
                "CANNOT_SELL_FREQUENT_INTENSE_GAMBLING",
                "CANNOT_SELL_CASINO",
                "CANNOT_SELL_CASINO_WITHOUT_GRAC",
                "CANNOT_SELL_CASINO_WITHOUT_AGE_VERIFICATION",
                "CANNOT_SELL_FREQUENT_INTENSE_ALCOHOL_TOBACCO_DRUGS",
                "CANNOT_SELL_FREQUENT_INTENSE_VIOLENCE",
                "CANNOT_SELL_FREQUENT_INTENSE_SEXUAL_CONTENT_NUDITY",
                "CANNOT_SELL_INFREQUENT_MILD_ALCOHOL_TOBACCO_DRUGS",
                "CANNOT_SELL_INFREQUENT_MILD_SEXUAL_CONTENT_NUDITY",
                "CANNOT_SELL_ADULT_ONLY",
                "CANNOT_SELL_FREQUENT_INTENSE",
                "CANNOT_SELL_FREQUENT_INTENSE_WITHOUT_GRAC",
                "CANNOT_SELL_GAMBLING_CONTESTS",
                "CANNOT_SELL_GAMBLING",
                "CANNOT_SELL_CONTESTS",
                "CANNOT_SELL",
            ]
        ]
    ] = _PydanticField(alias="contentStatuses", default=None)
    pre_order_enabled: typing.Optional[bool] = _PydanticField(
        alias="preOrderEnabled", default=None
    )
    pre_order_publish_date: typing.Optional[str] = _PydanticField(
        alias="preOrderPublishDate", default=None
    )
    release_date: typing.Optional[str] = _PydanticField(
        alias="releaseDate", default=None
    )


class ResourceLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class TerritoryAvailabilityRelationshipsTerritoryData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["territories"] = _PydanticField(alias="type")


class TerritoryAvailabilityRelationshipsTerritoryLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class TerritoryAttributes(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    currency: typing.Optional[str] = _PydanticField(alias="currency", default=None)


class DocumentLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    self: str = _PydanticField(alias="self")


class TerritoryAvailabilityRelationshipsTerritory(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[TerritoryAvailabilityRelationshipsTerritoryData] = (
        _PydanticField(alias="data", default=None)
    )
    links: typing.Optional[TerritoryAvailabilityRelationshipsTerritoryLinks] = (
        _PydanticField(alias="links", default=None)
    )


class Territory(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    attributes: typing.Optional[TerritoryAttributes] = _PydanticField(
        alias="attributes", default=None
    )
    id: str = _PydanticField(alias="id")
    links: typing.Optional[ResourceLinks] = _PydanticField(alias="links", default=None)
    type: typing_extensions.Literal["territories"] = _PydanticField(alias="type")


class TerritoryAvailabilityRelationships(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    territory: typing.Optional[TerritoryAvailabilityRelationshipsTerritory] = (
        _PydanticField(alias="territory", default=None)
    )


class TerritoryAvailability(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    attributes: typing.Optional[TerritoryAvailabilityAttributes] = _PydanticField(
        alias="attributes", default=None
    )
    id: str = _PydanticField(alias="id")
    links: typing.Optional[ResourceLinks] = _PydanticField(alias="links", default=None)
    relationships: typing.Optional[TerritoryAvailabilityRelationships] = _PydanticField(
        alias="relationships", default=None
    )
    type: typing_extensions.Literal["territoryAvailabilities"] = _PydanticField(
        alias="type"
    )


class TerritoryAvailabilityResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: TerritoryAvailability = _PydanticField(alias="data")
    included: typing.Optional[typing.List[Territory]] = _PydanticField(
        alias="included", default=None
    )
    links: DocumentLinks = _PydanticField(alias="links")
