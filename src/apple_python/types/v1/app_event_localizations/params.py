"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class AppEventLocalizationUpdateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    long_description: typing_extensions.NotRequired[str]
    name: typing_extensions.NotRequired[str]
    short_description: typing_extensions.NotRequired[str]


class _SerializerAppEventLocalizationUpdateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for AppEventLocalizationUpdateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    long_description: typing.Optional[str] = pydantic.Field(
        alias="longDescription", default=None
    )
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    short_description: typing.Optional[str] = pydantic.Field(
        alias="shortDescription", default=None
    )


class AppEventLocalizationCreateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    locale_field: typing_extensions.Required[str]
    long_description: typing_extensions.NotRequired[str]
    name: typing_extensions.NotRequired[str]
    short_description: typing_extensions.NotRequired[str]


class _SerializerAppEventLocalizationCreateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for AppEventLocalizationCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    locale_field: str = pydantic.Field(alias="locale")
    long_description: typing.Optional[str] = pydantic.Field(
        alias="longDescription", default=None
    )
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    short_description: typing.Optional[str] = pydantic.Field(
        alias="shortDescription", default=None
    )


class AppEventLocalizationCreateRequestDataRelationshipsAppEventData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["appEvents"]]


class _SerializerAppEventLocalizationCreateRequestDataRelationshipsAppEventData(
    pydantic.BaseModel
):
    """
    Serializer for AppEventLocalizationCreateRequestDataRelationshipsAppEventData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["appEvents"] = pydantic.Field(alias="type")


class AppEventLocalizationUpdateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[
        AppEventLocalizationUpdateRequestDataAttributes
    ]
    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["appEventLocalizations"]]


class _SerializerAppEventLocalizationUpdateRequestData(pydantic.BaseModel):
    """
    Serializer for AppEventLocalizationUpdateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[
        _SerializerAppEventLocalizationUpdateRequestDataAttributes
    ] = pydantic.Field(alias="attributes", default=None)
    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["appEventLocalizations"] = pydantic.Field(
        alias="type"
    )


class AppEventLocalizationCreateRequestDataRelationshipsAppEvent(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        AppEventLocalizationCreateRequestDataRelationshipsAppEventData
    ]


class _SerializerAppEventLocalizationCreateRequestDataRelationshipsAppEvent(
    pydantic.BaseModel
):
    """
    Serializer for AppEventLocalizationCreateRequestDataRelationshipsAppEvent handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAppEventLocalizationCreateRequestDataRelationshipsAppEventData = (
        pydantic.Field(alias="data")
    )


class AppEventLocalizationUpdateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[AppEventLocalizationUpdateRequestData]


class _SerializerAppEventLocalizationUpdateRequest(pydantic.BaseModel):
    """
    Serializer for AppEventLocalizationUpdateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAppEventLocalizationUpdateRequestData = pydantic.Field(
        alias="data"
    )


class AppEventLocalizationCreateRequestDataRelationships(typing_extensions.TypedDict):
    """
    No description specified
    """

    app_event: typing_extensions.Required[
        AppEventLocalizationCreateRequestDataRelationshipsAppEvent
    ]


class _SerializerAppEventLocalizationCreateRequestDataRelationships(pydantic.BaseModel):
    """
    Serializer for AppEventLocalizationCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    app_event: _SerializerAppEventLocalizationCreateRequestDataRelationshipsAppEvent = (
        pydantic.Field(alias="appEvent")
    )


class AppEventLocalizationCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[
        AppEventLocalizationCreateRequestDataAttributes
    ]
    relationships: typing_extensions.Required[
        AppEventLocalizationCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[typing_extensions.Literal["appEventLocalizations"]]


class _SerializerAppEventLocalizationCreateRequestData(pydantic.BaseModel):
    """
    Serializer for AppEventLocalizationCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerAppEventLocalizationCreateRequestDataAttributes = (
        pydantic.Field(alias="attributes")
    )
    relationships: _SerializerAppEventLocalizationCreateRequestDataRelationships = (
        pydantic.Field(alias="relationships")
    )
    type: typing_extensions.Literal["appEventLocalizations"] = pydantic.Field(
        alias="type"
    )


class AppEventLocalizationCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[AppEventLocalizationCreateRequestData]


class _SerializerAppEventLocalizationCreateRequest(pydantic.BaseModel):
    """
    Serializer for AppEventLocalizationCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAppEventLocalizationCreateRequestData = pydantic.Field(
        alias="data"
    )
