"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class GameCenterGroupUpdateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    reference_name: typing_extensions.NotRequired[str]


class _SerializerGameCenterGroupUpdateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for GameCenterGroupUpdateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    reference_name: typing.Optional[str] = pydantic.Field(
        alias="referenceName", default=None
    )


class GameCenterGroupCreateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    reference_name: typing_extensions.NotRequired[str]


class _SerializerGameCenterGroupCreateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for GameCenterGroupCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    reference_name: typing.Optional[str] = pydantic.Field(
        alias="referenceName", default=None
    )


class GameCenterGroupUpdateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[
        GameCenterGroupUpdateRequestDataAttributes
    ]
    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["gameCenterGroups"]]


class _SerializerGameCenterGroupUpdateRequestData(pydantic.BaseModel):
    """
    Serializer for GameCenterGroupUpdateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[
        _SerializerGameCenterGroupUpdateRequestDataAttributes
    ] = pydantic.Field(alias="attributes", default=None)
    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["gameCenterGroups"] = pydantic.Field(alias="type")


class GameCenterGroupCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[
        GameCenterGroupCreateRequestDataAttributes
    ]
    type: typing_extensions.Required[typing_extensions.Literal["gameCenterGroups"]]


class _SerializerGameCenterGroupCreateRequestData(pydantic.BaseModel):
    """
    Serializer for GameCenterGroupCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[
        _SerializerGameCenterGroupCreateRequestDataAttributes
    ] = pydantic.Field(alias="attributes", default=None)
    type: typing_extensions.Literal["gameCenterGroups"] = pydantic.Field(alias="type")


class GameCenterGroupUpdateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[GameCenterGroupUpdateRequestData]


class _SerializerGameCenterGroupUpdateRequest(pydantic.BaseModel):
    """
    Serializer for GameCenterGroupUpdateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerGameCenterGroupUpdateRequestData = pydantic.Field(alias="data")


class GameCenterGroupCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[GameCenterGroupCreateRequestData]


class _SerializerGameCenterGroupCreateRequest(pydantic.BaseModel):
    """
    Serializer for GameCenterGroupCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerGameCenterGroupCreateRequestData = pydantic.Field(alias="data")
