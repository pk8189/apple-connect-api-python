"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class AppPriceScheduleCreateRequestDataRelationshipsAppData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["apps"]]


class _SerializerAppPriceScheduleCreateRequestDataRelationshipsAppData(
    pydantic.BaseModel
):
    """
    Serializer for AppPriceScheduleCreateRequestDataRelationshipsAppData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["apps"] = pydantic.Field(alias="type")


class AppPriceScheduleCreateRequestDataRelationshipsBaseTerritoryData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["territories"]]


class _SerializerAppPriceScheduleCreateRequestDataRelationshipsBaseTerritoryData(
    pydantic.BaseModel
):
    """
    Serializer for AppPriceScheduleCreateRequestDataRelationshipsBaseTerritoryData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["territories"] = pydantic.Field(alias="type")


class AppPriceScheduleCreateRequestDataRelationshipsManualPricesDataItem(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["appPrices"]]


class _SerializerAppPriceScheduleCreateRequestDataRelationshipsManualPricesDataItem(
    pydantic.BaseModel
):
    """
    Serializer for AppPriceScheduleCreateRequestDataRelationshipsManualPricesDataItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["appPrices"] = pydantic.Field(alias="type")


class AppPriceV2InlineCreate(typing_extensions.TypedDict):
    """
    No description specified
    """

    id: typing_extensions.NotRequired[str]
    type: typing_extensions.Required[typing_extensions.Literal["appPrices"]]


class _SerializerAppPriceV2InlineCreate(pydantic.BaseModel):
    """
    Serializer for AppPriceV2InlineCreate handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    type: typing_extensions.Literal["appPrices"] = pydantic.Field(alias="type")


class TerritoryInlineCreate(typing_extensions.TypedDict):
    """
    No description specified
    """

    id: typing_extensions.NotRequired[str]
    type: typing_extensions.Required[typing_extensions.Literal["territories"]]


class _SerializerTerritoryInlineCreate(pydantic.BaseModel):
    """
    Serializer for TerritoryInlineCreate handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    type: typing_extensions.Literal["territories"] = pydantic.Field(alias="type")


class AppPriceScheduleCreateRequestDataRelationshipsApp(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[
        AppPriceScheduleCreateRequestDataRelationshipsAppData
    ]


class _SerializerAppPriceScheduleCreateRequestDataRelationshipsApp(pydantic.BaseModel):
    """
    Serializer for AppPriceScheduleCreateRequestDataRelationshipsApp handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAppPriceScheduleCreateRequestDataRelationshipsAppData = (
        pydantic.Field(alias="data")
    )


class AppPriceScheduleCreateRequestDataRelationshipsBaseTerritory(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        AppPriceScheduleCreateRequestDataRelationshipsBaseTerritoryData
    ]


class _SerializerAppPriceScheduleCreateRequestDataRelationshipsBaseTerritory(
    pydantic.BaseModel
):
    """
    Serializer for AppPriceScheduleCreateRequestDataRelationshipsBaseTerritory handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAppPriceScheduleCreateRequestDataRelationshipsBaseTerritoryData = (
        pydantic.Field(alias="data")
    )


class AppPriceScheduleCreateRequestDataRelationshipsManualPrices(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        typing.List[AppPriceScheduleCreateRequestDataRelationshipsManualPricesDataItem]
    ]


class _SerializerAppPriceScheduleCreateRequestDataRelationshipsManualPrices(
    pydantic.BaseModel
):
    """
    Serializer for AppPriceScheduleCreateRequestDataRelationshipsManualPrices handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.List[
        _SerializerAppPriceScheduleCreateRequestDataRelationshipsManualPricesDataItem
    ] = pydantic.Field(alias="data")


class AppPriceScheduleCreateRequestDataRelationships(typing_extensions.TypedDict):
    """
    No description specified
    """

    app: typing_extensions.Required[AppPriceScheduleCreateRequestDataRelationshipsApp]
    base_territory: typing_extensions.Required[
        AppPriceScheduleCreateRequestDataRelationshipsBaseTerritory
    ]
    manual_prices: typing_extensions.Required[
        AppPriceScheduleCreateRequestDataRelationshipsManualPrices
    ]


class _SerializerAppPriceScheduleCreateRequestDataRelationships(pydantic.BaseModel):
    """
    Serializer for AppPriceScheduleCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    app: _SerializerAppPriceScheduleCreateRequestDataRelationshipsApp = pydantic.Field(
        alias="app"
    )
    base_territory: _SerializerAppPriceScheduleCreateRequestDataRelationshipsBaseTerritory = pydantic.Field(
        alias="baseTerritory"
    )
    manual_prices: _SerializerAppPriceScheduleCreateRequestDataRelationshipsManualPrices = pydantic.Field(
        alias="manualPrices"
    )


class AppPriceScheduleCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    relationships: typing_extensions.Required[
        AppPriceScheduleCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[typing_extensions.Literal["appPriceSchedules"]]


class _SerializerAppPriceScheduleCreateRequestData(pydantic.BaseModel):
    """
    Serializer for AppPriceScheduleCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    relationships: _SerializerAppPriceScheduleCreateRequestDataRelationships = (
        pydantic.Field(alias="relationships")
    )
    type: typing_extensions.Literal["appPriceSchedules"] = pydantic.Field(alias="type")


class AppPriceScheduleCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[AppPriceScheduleCreateRequestData]
    included: typing_extensions.NotRequired[
        typing.List[typing.Union[AppPriceV2InlineCreate, TerritoryInlineCreate]]
    ]


class _SerializerAppPriceScheduleCreateRequest(pydantic.BaseModel):
    """
    Serializer for AppPriceScheduleCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAppPriceScheduleCreateRequestData = pydantic.Field(alias="data")
    included: typing.Optional[
        typing.List[
            typing.Union[
                _SerializerAppPriceV2InlineCreate, _SerializerTerritoryInlineCreate
            ]
        ]
    ] = pydantic.Field(alias="included", default=None)
