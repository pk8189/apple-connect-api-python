"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class UserInvitationCreateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    all_apps_visible: typing_extensions.NotRequired[bool]
    email_field: typing_extensions.Required[str]
    first_name: typing_extensions.Required[str]
    last_name: typing_extensions.Required[str]
    provisioning_allowed: typing_extensions.NotRequired[bool]
    roles: typing_extensions.Required[
        typing.List[
            typing_extensions.Literal[
                "ADMIN",
                "FINANCE",
                "ACCOUNT_HOLDER",
                "SALES",
                "MARKETING",
                "APP_MANAGER",
                "DEVELOPER",
                "ACCESS_TO_REPORTS",
                "CUSTOMER_SUPPORT",
                "CREATE_APPS",
                "CLOUD_MANAGED_DEVELOPER_ID",
                "CLOUD_MANAGED_APP_DISTRIBUTION",
                "GENERATE_INDIVIDUAL_KEYS",
            ]
        ]
    ]


class _SerializerUserInvitationCreateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for UserInvitationCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    all_apps_visible: typing.Optional[bool] = pydantic.Field(
        alias="allAppsVisible", default=None
    )
    email_field: str = pydantic.Field(alias="email")
    first_name: str = pydantic.Field(alias="firstName")
    last_name: str = pydantic.Field(alias="lastName")
    provisioning_allowed: typing.Optional[bool] = pydantic.Field(
        alias="provisioningAllowed", default=None
    )
    roles: typing.List[
        typing_extensions.Literal[
            "ADMIN",
            "FINANCE",
            "ACCOUNT_HOLDER",
            "SALES",
            "MARKETING",
            "APP_MANAGER",
            "DEVELOPER",
            "ACCESS_TO_REPORTS",
            "CUSTOMER_SUPPORT",
            "CREATE_APPS",
            "CLOUD_MANAGED_DEVELOPER_ID",
            "CLOUD_MANAGED_APP_DISTRIBUTION",
            "GENERATE_INDIVIDUAL_KEYS",
        ]
    ] = pydantic.Field(alias="roles")


class UserInvitationCreateRequestDataRelationshipsVisibleAppsDataItem(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["apps"]]


class _SerializerUserInvitationCreateRequestDataRelationshipsVisibleAppsDataItem(
    pydantic.BaseModel
):
    """
    Serializer for UserInvitationCreateRequestDataRelationshipsVisibleAppsDataItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["apps"] = pydantic.Field(alias="type")


class UserInvitationCreateRequestDataRelationshipsVisibleApps(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        typing.List[UserInvitationCreateRequestDataRelationshipsVisibleAppsDataItem]
    ]


class _SerializerUserInvitationCreateRequestDataRelationshipsVisibleApps(
    pydantic.BaseModel
):
    """
    Serializer for UserInvitationCreateRequestDataRelationshipsVisibleApps handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        typing.List[
            _SerializerUserInvitationCreateRequestDataRelationshipsVisibleAppsDataItem
        ]
    ] = pydantic.Field(alias="data", default=None)


class UserInvitationCreateRequestDataRelationships(typing_extensions.TypedDict):
    """
    No description specified
    """

    visible_apps: typing_extensions.NotRequired[
        UserInvitationCreateRequestDataRelationshipsVisibleApps
    ]


class _SerializerUserInvitationCreateRequestDataRelationships(pydantic.BaseModel):
    """
    Serializer for UserInvitationCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    visible_apps: typing.Optional[
        _SerializerUserInvitationCreateRequestDataRelationshipsVisibleApps
    ] = pydantic.Field(alias="visibleApps", default=None)


class UserInvitationCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[UserInvitationCreateRequestDataAttributes]
    relationships: typing_extensions.NotRequired[
        UserInvitationCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[typing_extensions.Literal["userInvitations"]]


class _SerializerUserInvitationCreateRequestData(pydantic.BaseModel):
    """
    Serializer for UserInvitationCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerUserInvitationCreateRequestDataAttributes = pydantic.Field(
        alias="attributes"
    )
    relationships: typing.Optional[
        _SerializerUserInvitationCreateRequestDataRelationships
    ] = pydantic.Field(alias="relationships", default=None)
    type: typing_extensions.Literal["userInvitations"] = pydantic.Field(alias="type")


class UserInvitationCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[UserInvitationCreateRequestData]


class _SerializerUserInvitationCreateRequest(pydantic.BaseModel):
    """
    Serializer for UserInvitationCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerUserInvitationCreateRequestData = pydantic.Field(alias="data")
