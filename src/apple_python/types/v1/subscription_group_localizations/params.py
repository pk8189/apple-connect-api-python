"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class SubscriptionGroupLocalizationUpdateRequestDataAttributes(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    custom_app_name: typing_extensions.NotRequired[str]
    name: typing_extensions.NotRequired[str]


class _SerializerSubscriptionGroupLocalizationUpdateRequestDataAttributes(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionGroupLocalizationUpdateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    custom_app_name: typing.Optional[str] = pydantic.Field(
        alias="customAppName", default=None
    )
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)


class SubscriptionGroupLocalizationCreateRequestDataAttributes(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    custom_app_name: typing_extensions.NotRequired[str]
    locale_field: typing_extensions.Required[str]
    name: typing_extensions.Required[str]


class _SerializerSubscriptionGroupLocalizationCreateRequestDataAttributes(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionGroupLocalizationCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    custom_app_name: typing.Optional[str] = pydantic.Field(
        alias="customAppName", default=None
    )
    locale_field: str = pydantic.Field(alias="locale")
    name: str = pydantic.Field(alias="name")


class SubscriptionGroupLocalizationCreateRequestDataRelationshipsSubscriptionGroupData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["subscriptionGroups"]]


class _SerializerSubscriptionGroupLocalizationCreateRequestDataRelationshipsSubscriptionGroupData(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionGroupLocalizationCreateRequestDataRelationshipsSubscriptionGroupData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["subscriptionGroups"] = pydantic.Field(alias="type")


class SubscriptionGroupLocalizationUpdateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[
        SubscriptionGroupLocalizationUpdateRequestDataAttributes
    ]
    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["subscriptionGroupLocalizations"]
    ]


class _SerializerSubscriptionGroupLocalizationUpdateRequestData(pydantic.BaseModel):
    """
    Serializer for SubscriptionGroupLocalizationUpdateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[
        _SerializerSubscriptionGroupLocalizationUpdateRequestDataAttributes
    ] = pydantic.Field(alias="attributes", default=None)
    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["subscriptionGroupLocalizations"] = pydantic.Field(
        alias="type"
    )


class SubscriptionGroupLocalizationCreateRequestDataRelationshipsSubscriptionGroup(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        SubscriptionGroupLocalizationCreateRequestDataRelationshipsSubscriptionGroupData
    ]


class _SerializerSubscriptionGroupLocalizationCreateRequestDataRelationshipsSubscriptionGroup(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionGroupLocalizationCreateRequestDataRelationshipsSubscriptionGroup handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerSubscriptionGroupLocalizationCreateRequestDataRelationshipsSubscriptionGroupData = pydantic.Field(
        alias="data"
    )


class SubscriptionGroupLocalizationUpdateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[SubscriptionGroupLocalizationUpdateRequestData]


class _SerializerSubscriptionGroupLocalizationUpdateRequest(pydantic.BaseModel):
    """
    Serializer for SubscriptionGroupLocalizationUpdateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerSubscriptionGroupLocalizationUpdateRequestData = pydantic.Field(
        alias="data"
    )


class SubscriptionGroupLocalizationCreateRequestDataRelationships(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    subscription_group: typing_extensions.Required[
        SubscriptionGroupLocalizationCreateRequestDataRelationshipsSubscriptionGroup
    ]


class _SerializerSubscriptionGroupLocalizationCreateRequestDataRelationships(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionGroupLocalizationCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    subscription_group: _SerializerSubscriptionGroupLocalizationCreateRequestDataRelationshipsSubscriptionGroup = pydantic.Field(
        alias="subscriptionGroup"
    )


class SubscriptionGroupLocalizationCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[
        SubscriptionGroupLocalizationCreateRequestDataAttributes
    ]
    relationships: typing_extensions.Required[
        SubscriptionGroupLocalizationCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["subscriptionGroupLocalizations"]
    ]


class _SerializerSubscriptionGroupLocalizationCreateRequestData(pydantic.BaseModel):
    """
    Serializer for SubscriptionGroupLocalizationCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerSubscriptionGroupLocalizationCreateRequestDataAttributes = (
        pydantic.Field(alias="attributes")
    )
    relationships: _SerializerSubscriptionGroupLocalizationCreateRequestDataRelationships = pydantic.Field(
        alias="relationships"
    )
    type: typing_extensions.Literal["subscriptionGroupLocalizations"] = pydantic.Field(
        alias="type"
    )


class SubscriptionGroupLocalizationCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[SubscriptionGroupLocalizationCreateRequestData]


class _SerializerSubscriptionGroupLocalizationCreateRequest(pydantic.BaseModel):
    """
    Serializer for SubscriptionGroupLocalizationCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerSubscriptionGroupLocalizationCreateRequestData = pydantic.Field(
        alias="data"
    )
