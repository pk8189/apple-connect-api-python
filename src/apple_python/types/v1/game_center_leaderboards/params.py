"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class GameCenterLeaderboardUpdateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    archived: typing_extensions.NotRequired[bool]
    default_formatter: typing_extensions.NotRequired[
        typing_extensions.Literal[
            "INTEGER",
            "DECIMAL_POINT_1_PLACE",
            "DECIMAL_POINT_2_PLACE",
            "DECIMAL_POINT_3_PLACE",
            "ELAPSED_TIME_MILLISECOND",
            "ELAPSED_TIME_CENTISECOND",
            "ELAPSED_TIME_MINUTE",
            "ELAPSED_TIME_SECOND",
            "MONEY_POUND_DECIMAL",
            "MONEY_POUND",
            "MONEY_DOLLAR_DECIMAL",
            "MONEY_DOLLAR",
            "MONEY_EURO_DECIMAL",
            "MONEY_EURO",
            "MONEY_FRANC_DECIMAL",
            "MONEY_FRANC",
            "MONEY_KRONER_DECIMAL",
            "MONEY_KRONER",
            "MONEY_YEN",
        ]
    ]
    recurrence_duration: typing_extensions.NotRequired[str]
    recurrence_rule: typing_extensions.NotRequired[str]
    recurrence_start_date: typing_extensions.NotRequired[str]
    reference_name: typing_extensions.NotRequired[str]
    score_range_end: typing_extensions.NotRequired[str]
    score_range_start: typing_extensions.NotRequired[str]
    score_sort_type: typing_extensions.NotRequired[
        typing_extensions.Literal["ASC", "DESC"]
    ]
    submission_type: typing_extensions.NotRequired[
        typing_extensions.Literal["BEST_SCORE", "MOST_RECENT_SCORE"]
    ]


class _SerializerGameCenterLeaderboardUpdateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for GameCenterLeaderboardUpdateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    archived: typing.Optional[bool] = pydantic.Field(alias="archived", default=None)
    default_formatter: typing.Optional[
        typing_extensions.Literal[
            "INTEGER",
            "DECIMAL_POINT_1_PLACE",
            "DECIMAL_POINT_2_PLACE",
            "DECIMAL_POINT_3_PLACE",
            "ELAPSED_TIME_MILLISECOND",
            "ELAPSED_TIME_CENTISECOND",
            "ELAPSED_TIME_MINUTE",
            "ELAPSED_TIME_SECOND",
            "MONEY_POUND_DECIMAL",
            "MONEY_POUND",
            "MONEY_DOLLAR_DECIMAL",
            "MONEY_DOLLAR",
            "MONEY_EURO_DECIMAL",
            "MONEY_EURO",
            "MONEY_FRANC_DECIMAL",
            "MONEY_FRANC",
            "MONEY_KRONER_DECIMAL",
            "MONEY_KRONER",
            "MONEY_YEN",
        ]
    ] = pydantic.Field(alias="defaultFormatter", default=None)
    recurrence_duration: typing.Optional[str] = pydantic.Field(
        alias="recurrenceDuration", default=None
    )
    recurrence_rule: typing.Optional[str] = pydantic.Field(
        alias="recurrenceRule", default=None
    )
    recurrence_start_date: typing.Optional[str] = pydantic.Field(
        alias="recurrenceStartDate", default=None
    )
    reference_name: typing.Optional[str] = pydantic.Field(
        alias="referenceName", default=None
    )
    score_range_end: typing.Optional[str] = pydantic.Field(
        alias="scoreRangeEnd", default=None
    )
    score_range_start: typing.Optional[str] = pydantic.Field(
        alias="scoreRangeStart", default=None
    )
    score_sort_type: typing.Optional[typing_extensions.Literal["ASC", "DESC"]] = (
        pydantic.Field(alias="scoreSortType", default=None)
    )
    submission_type: typing.Optional[
        typing_extensions.Literal["BEST_SCORE", "MOST_RECENT_SCORE"]
    ] = pydantic.Field(alias="submissionType", default=None)


class GameCenterLeaderboardCreateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    default_formatter: typing_extensions.Required[
        typing_extensions.Literal[
            "INTEGER",
            "DECIMAL_POINT_1_PLACE",
            "DECIMAL_POINT_2_PLACE",
            "DECIMAL_POINT_3_PLACE",
            "ELAPSED_TIME_MILLISECOND",
            "ELAPSED_TIME_CENTISECOND",
            "ELAPSED_TIME_MINUTE",
            "ELAPSED_TIME_SECOND",
            "MONEY_POUND_DECIMAL",
            "MONEY_POUND",
            "MONEY_DOLLAR_DECIMAL",
            "MONEY_DOLLAR",
            "MONEY_EURO_DECIMAL",
            "MONEY_EURO",
            "MONEY_FRANC_DECIMAL",
            "MONEY_FRANC",
            "MONEY_KRONER_DECIMAL",
            "MONEY_KRONER",
            "MONEY_YEN",
        ]
    ]
    recurrence_duration: typing_extensions.NotRequired[str]
    recurrence_rule: typing_extensions.NotRequired[str]
    recurrence_start_date: typing_extensions.NotRequired[str]
    reference_name: typing_extensions.Required[str]
    score_range_end: typing_extensions.NotRequired[str]
    score_range_start: typing_extensions.NotRequired[str]
    score_sort_type: typing_extensions.Required[
        typing_extensions.Literal["ASC", "DESC"]
    ]
    submission_type: typing_extensions.Required[
        typing_extensions.Literal["BEST_SCORE", "MOST_RECENT_SCORE"]
    ]
    vendor_identifier: typing_extensions.Required[str]


class _SerializerGameCenterLeaderboardCreateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for GameCenterLeaderboardCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    default_formatter: typing_extensions.Literal[
        "INTEGER",
        "DECIMAL_POINT_1_PLACE",
        "DECIMAL_POINT_2_PLACE",
        "DECIMAL_POINT_3_PLACE",
        "ELAPSED_TIME_MILLISECOND",
        "ELAPSED_TIME_CENTISECOND",
        "ELAPSED_TIME_MINUTE",
        "ELAPSED_TIME_SECOND",
        "MONEY_POUND_DECIMAL",
        "MONEY_POUND",
        "MONEY_DOLLAR_DECIMAL",
        "MONEY_DOLLAR",
        "MONEY_EURO_DECIMAL",
        "MONEY_EURO",
        "MONEY_FRANC_DECIMAL",
        "MONEY_FRANC",
        "MONEY_KRONER_DECIMAL",
        "MONEY_KRONER",
        "MONEY_YEN",
    ] = pydantic.Field(alias="defaultFormatter")
    recurrence_duration: typing.Optional[str] = pydantic.Field(
        alias="recurrenceDuration", default=None
    )
    recurrence_rule: typing.Optional[str] = pydantic.Field(
        alias="recurrenceRule", default=None
    )
    recurrence_start_date: typing.Optional[str] = pydantic.Field(
        alias="recurrenceStartDate", default=None
    )
    reference_name: str = pydantic.Field(alias="referenceName")
    score_range_end: typing.Optional[str] = pydantic.Field(
        alias="scoreRangeEnd", default=None
    )
    score_range_start: typing.Optional[str] = pydantic.Field(
        alias="scoreRangeStart", default=None
    )
    score_sort_type: typing_extensions.Literal["ASC", "DESC"] = pydantic.Field(
        alias="scoreSortType"
    )
    submission_type: typing_extensions.Literal["BEST_SCORE", "MOST_RECENT_SCORE"] = (
        pydantic.Field(alias="submissionType")
    )
    vendor_identifier: str = pydantic.Field(alias="vendorIdentifier")


class GameCenterLeaderboardCreateRequestDataRelationshipsGameCenterDetailData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["gameCenterDetails"]]


class _SerializerGameCenterLeaderboardCreateRequestDataRelationshipsGameCenterDetailData(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterLeaderboardCreateRequestDataRelationshipsGameCenterDetailData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["gameCenterDetails"] = pydantic.Field(alias="type")


class GameCenterLeaderboardCreateRequestDataRelationshipsGameCenterGroupData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["gameCenterGroups"]]


class _SerializerGameCenterLeaderboardCreateRequestDataRelationshipsGameCenterGroupData(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterLeaderboardCreateRequestDataRelationshipsGameCenterGroupData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["gameCenterGroups"] = pydantic.Field(alias="type")


class GameCenterLeaderboardCreateRequestDataRelationshipsGameCenterLeaderboardSetsDataItem(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["gameCenterLeaderboardSets"]
    ]


class _SerializerGameCenterLeaderboardCreateRequestDataRelationshipsGameCenterLeaderboardSetsDataItem(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterLeaderboardCreateRequestDataRelationshipsGameCenterLeaderboardSetsDataItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["gameCenterLeaderboardSets"] = pydantic.Field(
        alias="type"
    )


class GameCenterLeaderboardUpdateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[
        GameCenterLeaderboardUpdateRequestDataAttributes
    ]
    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["gameCenterLeaderboards"]
    ]


class _SerializerGameCenterLeaderboardUpdateRequestData(pydantic.BaseModel):
    """
    Serializer for GameCenterLeaderboardUpdateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[
        _SerializerGameCenterLeaderboardUpdateRequestDataAttributes
    ] = pydantic.Field(alias="attributes", default=None)
    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["gameCenterLeaderboards"] = pydantic.Field(
        alias="type"
    )


class GameCenterLeaderboardCreateRequestDataRelationshipsGameCenterDetail(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        GameCenterLeaderboardCreateRequestDataRelationshipsGameCenterDetailData
    ]


class _SerializerGameCenterLeaderboardCreateRequestDataRelationshipsGameCenterDetail(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterLeaderboardCreateRequestDataRelationshipsGameCenterDetail handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        _SerializerGameCenterLeaderboardCreateRequestDataRelationshipsGameCenterDetailData
    ] = pydantic.Field(alias="data", default=None)


class GameCenterLeaderboardCreateRequestDataRelationshipsGameCenterGroup(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        GameCenterLeaderboardCreateRequestDataRelationshipsGameCenterGroupData
    ]


class _SerializerGameCenterLeaderboardCreateRequestDataRelationshipsGameCenterGroup(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterLeaderboardCreateRequestDataRelationshipsGameCenterGroup handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        _SerializerGameCenterLeaderboardCreateRequestDataRelationshipsGameCenterGroupData
    ] = pydantic.Field(alias="data", default=None)


class GameCenterLeaderboardCreateRequestDataRelationshipsGameCenterLeaderboardSets(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        typing.List[
            GameCenterLeaderboardCreateRequestDataRelationshipsGameCenterLeaderboardSetsDataItem
        ]
    ]


class _SerializerGameCenterLeaderboardCreateRequestDataRelationshipsGameCenterLeaderboardSets(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterLeaderboardCreateRequestDataRelationshipsGameCenterLeaderboardSets handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        typing.List[
            _SerializerGameCenterLeaderboardCreateRequestDataRelationshipsGameCenterLeaderboardSetsDataItem
        ]
    ] = pydantic.Field(alias="data", default=None)


class GameCenterLeaderboardUpdateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[GameCenterLeaderboardUpdateRequestData]


class _SerializerGameCenterLeaderboardUpdateRequest(pydantic.BaseModel):
    """
    Serializer for GameCenterLeaderboardUpdateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerGameCenterLeaderboardUpdateRequestData = pydantic.Field(
        alias="data"
    )


class GameCenterLeaderboardCreateRequestDataRelationships(typing_extensions.TypedDict):
    """
    No description specified
    """

    game_center_detail: typing_extensions.NotRequired[
        GameCenterLeaderboardCreateRequestDataRelationshipsGameCenterDetail
    ]
    game_center_group: typing_extensions.NotRequired[
        GameCenterLeaderboardCreateRequestDataRelationshipsGameCenterGroup
    ]
    game_center_leaderboard_sets: typing_extensions.NotRequired[
        GameCenterLeaderboardCreateRequestDataRelationshipsGameCenterLeaderboardSets
    ]


class _SerializerGameCenterLeaderboardCreateRequestDataRelationships(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterLeaderboardCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    game_center_detail: typing.Optional[
        _SerializerGameCenterLeaderboardCreateRequestDataRelationshipsGameCenterDetail
    ] = pydantic.Field(alias="gameCenterDetail", default=None)
    game_center_group: typing.Optional[
        _SerializerGameCenterLeaderboardCreateRequestDataRelationshipsGameCenterGroup
    ] = pydantic.Field(alias="gameCenterGroup", default=None)
    game_center_leaderboard_sets: typing.Optional[
        _SerializerGameCenterLeaderboardCreateRequestDataRelationshipsGameCenterLeaderboardSets
    ] = pydantic.Field(alias="gameCenterLeaderboardSets", default=None)


class GameCenterLeaderboardCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[
        GameCenterLeaderboardCreateRequestDataAttributes
    ]
    relationships: typing_extensions.NotRequired[
        GameCenterLeaderboardCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["gameCenterLeaderboards"]
    ]


class _SerializerGameCenterLeaderboardCreateRequestData(pydantic.BaseModel):
    """
    Serializer for GameCenterLeaderboardCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerGameCenterLeaderboardCreateRequestDataAttributes = (
        pydantic.Field(alias="attributes")
    )
    relationships: typing.Optional[
        _SerializerGameCenterLeaderboardCreateRequestDataRelationships
    ] = pydantic.Field(alias="relationships", default=None)
    type: typing_extensions.Literal["gameCenterLeaderboards"] = pydantic.Field(
        alias="type"
    )


class GameCenterLeaderboardCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[GameCenterLeaderboardCreateRequestData]


class _SerializerGameCenterLeaderboardCreateRequest(pydantic.BaseModel):
    """
    Serializer for GameCenterLeaderboardCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerGameCenterLeaderboardCreateRequestData = pydantic.Field(
        alias="data"
    )
