"""File Generated by Sideko (sideko.dev)"""

import io
import typing
import typing_extensions
from pydantic import (
    BaseModel as _PydanticBaseModel,
    Field as _PydanticField,
    ConfigDict as _PydanticConfigDict,
)

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class GameCenterMatchmakingTeamAssignment(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    player_id: typing.Optional[str] = _PydanticField(alias="playerId", default=None)
    team: typing.Optional[str] = _PydanticField(alias="team", default=None)


class ResourceLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class DocumentLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    self: str = _PydanticField(alias="self")


class GameCenterMatchmakingRuleSetTestAttributesMatchmakingResultsItemItem(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    request_name: typing.Optional[str] = _PydanticField(
        alias="requestName", default=None
    )
    team_assignments: typing.Optional[
        typing.List[GameCenterMatchmakingTeamAssignment]
    ] = _PydanticField(alias="teamAssignments", default=None)


class GameCenterMatchmakingRuleSetTestAttributes(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    matchmaking_results: typing.Optional[
        typing.List[
            typing.List[
                GameCenterMatchmakingRuleSetTestAttributesMatchmakingResultsItemItem
            ]
        ]
    ] = _PydanticField(alias="matchmakingResults", default=None)


class GameCenterMatchmakingRuleSetTest(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    attributes: typing.Optional[GameCenterMatchmakingRuleSetTestAttributes] = (
        _PydanticField(alias="attributes", default=None)
    )
    id: str = _PydanticField(alias="id")
    links: typing.Optional[ResourceLinks] = _PydanticField(alias="links", default=None)
    type: typing_extensions.Literal["gameCenterMatchmakingRuleSetTests"] = (
        _PydanticField(alias="type")
    )


class GameCenterMatchmakingRuleSetTestResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: GameCenterMatchmakingRuleSetTest = _PydanticField(alias="data")
    links: DocumentLinks = _PydanticField(alias="links")
