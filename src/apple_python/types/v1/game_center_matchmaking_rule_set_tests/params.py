"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class GameCenterMatchmakingRuleSetTestCreateRequestDataRelationshipsMatchmakingRequestsDataItem(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["gameCenterMatchmakingTestRequests"]
    ]


class _SerializerGameCenterMatchmakingRuleSetTestCreateRequestDataRelationshipsMatchmakingRequestsDataItem(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterMatchmakingRuleSetTestCreateRequestDataRelationshipsMatchmakingRequestsDataItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["gameCenterMatchmakingTestRequests"] = (
        pydantic.Field(alias="type")
    )


class GameCenterMatchmakingRuleSetTestCreateRequestDataRelationshipsMatchmakingRuleSetData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["gameCenterMatchmakingRuleSets"]
    ]


class _SerializerGameCenterMatchmakingRuleSetTestCreateRequestDataRelationshipsMatchmakingRuleSetData(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterMatchmakingRuleSetTestCreateRequestDataRelationshipsMatchmakingRuleSetData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["gameCenterMatchmakingRuleSets"] = pydantic.Field(
        alias="type"
    )


class Property(typing_extensions.TypedDict):
    """
    No description specified
    """

    key: typing_extensions.NotRequired[str]
    value: typing_extensions.NotRequired[str]


class _SerializerProperty(pydantic.BaseModel):
    """
    Serializer for Property handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    key: typing.Optional[str] = pydantic.Field(alias="key", default=None)
    value: typing.Optional[str] = pydantic.Field(alias="value", default=None)


class Location(typing_extensions.TypedDict):
    """
    No description specified
    """

    latitude: typing_extensions.NotRequired[float]
    longitude: typing_extensions.NotRequired[float]


class _SerializerLocation(pydantic.BaseModel):
    """
    Serializer for Location handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    latitude: typing.Optional[float] = pydantic.Field(alias="latitude", default=None)
    longitude: typing.Optional[float] = pydantic.Field(alias="longitude", default=None)


class GameCenterMatchmakingTestRequestInlineCreateRelationshipsMatchmakingPlayerPropertiesDataItem(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["gameCenterMatchmakingTestPlayerProperties"]
    ]


class _SerializerGameCenterMatchmakingTestRequestInlineCreateRelationshipsMatchmakingPlayerPropertiesDataItem(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterMatchmakingTestRequestInlineCreateRelationshipsMatchmakingPlayerPropertiesDataItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["gameCenterMatchmakingTestPlayerProperties"] = (
        pydantic.Field(alias="type")
    )


class GameCenterMatchmakingRuleSetTestCreateRequestDataRelationshipsMatchmakingRequests(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        typing.List[
            GameCenterMatchmakingRuleSetTestCreateRequestDataRelationshipsMatchmakingRequestsDataItem
        ]
    ]


class _SerializerGameCenterMatchmakingRuleSetTestCreateRequestDataRelationshipsMatchmakingRequests(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterMatchmakingRuleSetTestCreateRequestDataRelationshipsMatchmakingRequests handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.List[
        _SerializerGameCenterMatchmakingRuleSetTestCreateRequestDataRelationshipsMatchmakingRequestsDataItem
    ] = pydantic.Field(alias="data")


class GameCenterMatchmakingRuleSetTestCreateRequestDataRelationshipsMatchmakingRuleSet(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        GameCenterMatchmakingRuleSetTestCreateRequestDataRelationshipsMatchmakingRuleSetData
    ]


class _SerializerGameCenterMatchmakingRuleSetTestCreateRequestDataRelationshipsMatchmakingRuleSet(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterMatchmakingRuleSetTestCreateRequestDataRelationshipsMatchmakingRuleSet handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerGameCenterMatchmakingRuleSetTestCreateRequestDataRelationshipsMatchmakingRuleSetData = pydantic.Field(
        alias="data"
    )


class GameCenterMatchmakingTestPlayerPropertyInlineCreateAttributes(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    player_id: typing_extensions.Required[str]
    properties: typing_extensions.NotRequired[typing.List[Property]]


class _SerializerGameCenterMatchmakingTestPlayerPropertyInlineCreateAttributes(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterMatchmakingTestPlayerPropertyInlineCreateAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    player_id: str = pydantic.Field(alias="playerId")
    properties: typing.Optional[typing.List[_SerializerProperty]] = pydantic.Field(
        alias="properties", default=None
    )


class GameCenterMatchmakingTestRequestInlineCreateAttributes(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    app_version: typing_extensions.Required[str]
    bundle_id: typing_extensions.Required[str]
    locale_field: typing_extensions.NotRequired[
        typing_extensions.Literal[
            "AR-SA",
            "CA-ES",
            "CS-CZ",
            "DA-DK",
            "DE-DE",
            "EL-GR",
            "EN-AU",
            "EN-GB",
            "EN-US",
            "EN-KY",
            "ES-ES",
            "ES-MX",
            "FI-FI",
            "FR-CA",
            "FR-FR",
            "HI-IN",
            "HR-HR",
            "HU-HU",
            "ID-ID",
            "IT-IT",
            "IW-IL",
            "JA-JP",
            "KO-KR",
            "MS-MY",
            "NL-NL",
            "NO-NO",
            "PL-PL",
            "PT-BR",
            "PT-PT",
            "RO-RO",
            "RU-RU",
            "SK-SK",
            "SV-SE",
            "TH-TH",
            "TR-TR",
            "UK-UA",
            "ZH-CN",
            "ZH-TW",
            "ZH-HK",
        ]
    ]
    location: typing_extensions.NotRequired[Location]
    max_players: typing_extensions.NotRequired[int]
    min_players: typing_extensions.NotRequired[int]
    platform_field: typing_extensions.Required[
        typing_extensions.Literal["IOS", "MAC_OS", "TV_OS", "VISION_OS"]
    ]
    player_count: typing_extensions.NotRequired[int]
    request_name: typing_extensions.Required[str]
    seconds_in_queue: typing_extensions.Required[int]


class _SerializerGameCenterMatchmakingTestRequestInlineCreateAttributes(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterMatchmakingTestRequestInlineCreateAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    app_version: str = pydantic.Field(alias="appVersion")
    bundle_id: str = pydantic.Field(alias="bundleId")
    locale_field: typing.Optional[
        typing_extensions.Literal[
            "AR-SA",
            "CA-ES",
            "CS-CZ",
            "DA-DK",
            "DE-DE",
            "EL-GR",
            "EN-AU",
            "EN-GB",
            "EN-US",
            "EN-KY",
            "ES-ES",
            "ES-MX",
            "FI-FI",
            "FR-CA",
            "FR-FR",
            "HI-IN",
            "HR-HR",
            "HU-HU",
            "ID-ID",
            "IT-IT",
            "IW-IL",
            "JA-JP",
            "KO-KR",
            "MS-MY",
            "NL-NL",
            "NO-NO",
            "PL-PL",
            "PT-BR",
            "PT-PT",
            "RO-RO",
            "RU-RU",
            "SK-SK",
            "SV-SE",
            "TH-TH",
            "TR-TR",
            "UK-UA",
            "ZH-CN",
            "ZH-TW",
            "ZH-HK",
        ]
    ] = pydantic.Field(alias="locale", default=None)
    location: typing.Optional[_SerializerLocation] = pydantic.Field(
        alias="location", default=None
    )
    max_players: typing.Optional[int] = pydantic.Field(alias="maxPlayers", default=None)
    min_players: typing.Optional[int] = pydantic.Field(alias="minPlayers", default=None)
    platform_field: typing_extensions.Literal["IOS", "MAC_OS", "TV_OS", "VISION_OS"] = (
        pydantic.Field(alias="platform")
    )
    player_count: typing.Optional[int] = pydantic.Field(
        alias="playerCount", default=None
    )
    request_name: str = pydantic.Field(alias="requestName")
    seconds_in_queue: int = pydantic.Field(alias="secondsInQueue")


class GameCenterMatchmakingTestRequestInlineCreateRelationshipsMatchmakingPlayerProperties(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        typing.List[
            GameCenterMatchmakingTestRequestInlineCreateRelationshipsMatchmakingPlayerPropertiesDataItem
        ]
    ]


class _SerializerGameCenterMatchmakingTestRequestInlineCreateRelationshipsMatchmakingPlayerProperties(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterMatchmakingTestRequestInlineCreateRelationshipsMatchmakingPlayerProperties handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        typing.List[
            _SerializerGameCenterMatchmakingTestRequestInlineCreateRelationshipsMatchmakingPlayerPropertiesDataItem
        ]
    ] = pydantic.Field(alias="data", default=None)


class GameCenterMatchmakingRuleSetTestCreateRequestDataRelationships(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    matchmaking_requests: typing_extensions.Required[
        GameCenterMatchmakingRuleSetTestCreateRequestDataRelationshipsMatchmakingRequests
    ]
    matchmaking_rule_set: typing_extensions.Required[
        GameCenterMatchmakingRuleSetTestCreateRequestDataRelationshipsMatchmakingRuleSet
    ]


class _SerializerGameCenterMatchmakingRuleSetTestCreateRequestDataRelationships(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterMatchmakingRuleSetTestCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    matchmaking_requests: _SerializerGameCenterMatchmakingRuleSetTestCreateRequestDataRelationshipsMatchmakingRequests = pydantic.Field(
        alias="matchmakingRequests"
    )
    matchmaking_rule_set: _SerializerGameCenterMatchmakingRuleSetTestCreateRequestDataRelationshipsMatchmakingRuleSet = pydantic.Field(
        alias="matchmakingRuleSet"
    )


class GameCenterMatchmakingTestPlayerPropertyInlineCreate(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[
        GameCenterMatchmakingTestPlayerPropertyInlineCreateAttributes
    ]
    id: typing_extensions.NotRequired[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["gameCenterMatchmakingTestPlayerProperties"]
    ]


class _SerializerGameCenterMatchmakingTestPlayerPropertyInlineCreate(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterMatchmakingTestPlayerPropertyInlineCreate handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerGameCenterMatchmakingTestPlayerPropertyInlineCreateAttributes = pydantic.Field(
        alias="attributes"
    )
    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    type: typing_extensions.Literal["gameCenterMatchmakingTestPlayerProperties"] = (
        pydantic.Field(alias="type")
    )


class GameCenterMatchmakingTestRequestInlineCreateRelationships(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    matchmaking_player_properties: typing_extensions.NotRequired[
        GameCenterMatchmakingTestRequestInlineCreateRelationshipsMatchmakingPlayerProperties
    ]


class _SerializerGameCenterMatchmakingTestRequestInlineCreateRelationships(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterMatchmakingTestRequestInlineCreateRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    matchmaking_player_properties: typing.Optional[
        _SerializerGameCenterMatchmakingTestRequestInlineCreateRelationshipsMatchmakingPlayerProperties
    ] = pydantic.Field(alias="matchmakingPlayerProperties", default=None)


class GameCenterMatchmakingRuleSetTestCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    relationships: typing_extensions.Required[
        GameCenterMatchmakingRuleSetTestCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["gameCenterMatchmakingRuleSetTests"]
    ]


class _SerializerGameCenterMatchmakingRuleSetTestCreateRequestData(pydantic.BaseModel):
    """
    Serializer for GameCenterMatchmakingRuleSetTestCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    relationships: _SerializerGameCenterMatchmakingRuleSetTestCreateRequestDataRelationships = pydantic.Field(
        alias="relationships"
    )
    type: typing_extensions.Literal["gameCenterMatchmakingRuleSetTests"] = (
        pydantic.Field(alias="type")
    )


class GameCenterMatchmakingTestRequestInlineCreate(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[
        GameCenterMatchmakingTestRequestInlineCreateAttributes
    ]
    id: typing_extensions.NotRequired[str]
    relationships: typing_extensions.NotRequired[
        GameCenterMatchmakingTestRequestInlineCreateRelationships
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["gameCenterMatchmakingTestRequests"]
    ]


class _SerializerGameCenterMatchmakingTestRequestInlineCreate(pydantic.BaseModel):
    """
    Serializer for GameCenterMatchmakingTestRequestInlineCreate handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerGameCenterMatchmakingTestRequestInlineCreateAttributes = (
        pydantic.Field(alias="attributes")
    )
    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    relationships: typing.Optional[
        _SerializerGameCenterMatchmakingTestRequestInlineCreateRelationships
    ] = pydantic.Field(alias="relationships", default=None)
    type: typing_extensions.Literal["gameCenterMatchmakingTestRequests"] = (
        pydantic.Field(alias="type")
    )


class GameCenterMatchmakingRuleSetTestCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[GameCenterMatchmakingRuleSetTestCreateRequestData]
    included: typing_extensions.NotRequired[
        typing.List[
            typing.Union[
                GameCenterMatchmakingTestPlayerPropertyInlineCreate,
                GameCenterMatchmakingTestRequestInlineCreate,
            ]
        ]
    ]


class _SerializerGameCenterMatchmakingRuleSetTestCreateRequest(pydantic.BaseModel):
    """
    Serializer for GameCenterMatchmakingRuleSetTestCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerGameCenterMatchmakingRuleSetTestCreateRequestData = pydantic.Field(
        alias="data"
    )
    included: typing.Optional[
        typing.List[
            typing.Union[
                _SerializerGameCenterMatchmakingTestPlayerPropertyInlineCreate,
                _SerializerGameCenterMatchmakingTestRequestInlineCreate,
            ]
        ]
    ] = pydantic.Field(alias="included", default=None)
