"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class GameCenterLeaderboardLocalizationUpdateRequestDataAttributes(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    formatter_override: typing_extensions.NotRequired[
        typing_extensions.Literal[
            "INTEGER",
            "DECIMAL_POINT_1_PLACE",
            "DECIMAL_POINT_2_PLACE",
            "DECIMAL_POINT_3_PLACE",
            "ELAPSED_TIME_MILLISECOND",
            "ELAPSED_TIME_CENTISECOND",
            "ELAPSED_TIME_MINUTE",
            "ELAPSED_TIME_SECOND",
            "MONEY_POUND_DECIMAL",
            "MONEY_POUND",
            "MONEY_DOLLAR_DECIMAL",
            "MONEY_DOLLAR",
            "MONEY_EURO_DECIMAL",
            "MONEY_EURO",
            "MONEY_FRANC_DECIMAL",
            "MONEY_FRANC",
            "MONEY_KRONER_DECIMAL",
            "MONEY_KRONER",
            "MONEY_YEN",
        ]
    ]
    formatter_suffix: typing_extensions.NotRequired[str]
    formatter_suffix_singular: typing_extensions.NotRequired[str]
    name: typing_extensions.NotRequired[str]


class _SerializerGameCenterLeaderboardLocalizationUpdateRequestDataAttributes(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterLeaderboardLocalizationUpdateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    formatter_override: typing.Optional[
        typing_extensions.Literal[
            "INTEGER",
            "DECIMAL_POINT_1_PLACE",
            "DECIMAL_POINT_2_PLACE",
            "DECIMAL_POINT_3_PLACE",
            "ELAPSED_TIME_MILLISECOND",
            "ELAPSED_TIME_CENTISECOND",
            "ELAPSED_TIME_MINUTE",
            "ELAPSED_TIME_SECOND",
            "MONEY_POUND_DECIMAL",
            "MONEY_POUND",
            "MONEY_DOLLAR_DECIMAL",
            "MONEY_DOLLAR",
            "MONEY_EURO_DECIMAL",
            "MONEY_EURO",
            "MONEY_FRANC_DECIMAL",
            "MONEY_FRANC",
            "MONEY_KRONER_DECIMAL",
            "MONEY_KRONER",
            "MONEY_YEN",
        ]
    ] = pydantic.Field(alias="formatterOverride", default=None)
    formatter_suffix: typing.Optional[str] = pydantic.Field(
        alias="formatterSuffix", default=None
    )
    formatter_suffix_singular: typing.Optional[str] = pydantic.Field(
        alias="formatterSuffixSingular", default=None
    )
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)


class GameCenterLeaderboardLocalizationCreateRequestDataAttributes(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    formatter_override: typing_extensions.NotRequired[
        typing_extensions.Literal[
            "INTEGER",
            "DECIMAL_POINT_1_PLACE",
            "DECIMAL_POINT_2_PLACE",
            "DECIMAL_POINT_3_PLACE",
            "ELAPSED_TIME_MILLISECOND",
            "ELAPSED_TIME_CENTISECOND",
            "ELAPSED_TIME_MINUTE",
            "ELAPSED_TIME_SECOND",
            "MONEY_POUND_DECIMAL",
            "MONEY_POUND",
            "MONEY_DOLLAR_DECIMAL",
            "MONEY_DOLLAR",
            "MONEY_EURO_DECIMAL",
            "MONEY_EURO",
            "MONEY_FRANC_DECIMAL",
            "MONEY_FRANC",
            "MONEY_KRONER_DECIMAL",
            "MONEY_KRONER",
            "MONEY_YEN",
        ]
    ]
    formatter_suffix: typing_extensions.NotRequired[str]
    formatter_suffix_singular: typing_extensions.NotRequired[str]
    locale_field: typing_extensions.Required[str]
    name: typing_extensions.Required[str]


class _SerializerGameCenterLeaderboardLocalizationCreateRequestDataAttributes(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterLeaderboardLocalizationCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    formatter_override: typing.Optional[
        typing_extensions.Literal[
            "INTEGER",
            "DECIMAL_POINT_1_PLACE",
            "DECIMAL_POINT_2_PLACE",
            "DECIMAL_POINT_3_PLACE",
            "ELAPSED_TIME_MILLISECOND",
            "ELAPSED_TIME_CENTISECOND",
            "ELAPSED_TIME_MINUTE",
            "ELAPSED_TIME_SECOND",
            "MONEY_POUND_DECIMAL",
            "MONEY_POUND",
            "MONEY_DOLLAR_DECIMAL",
            "MONEY_DOLLAR",
            "MONEY_EURO_DECIMAL",
            "MONEY_EURO",
            "MONEY_FRANC_DECIMAL",
            "MONEY_FRANC",
            "MONEY_KRONER_DECIMAL",
            "MONEY_KRONER",
            "MONEY_YEN",
        ]
    ] = pydantic.Field(alias="formatterOverride", default=None)
    formatter_suffix: typing.Optional[str] = pydantic.Field(
        alias="formatterSuffix", default=None
    )
    formatter_suffix_singular: typing.Optional[str] = pydantic.Field(
        alias="formatterSuffixSingular", default=None
    )
    locale_field: str = pydantic.Field(alias="locale")
    name: str = pydantic.Field(alias="name")


class GameCenterLeaderboardLocalizationCreateRequestDataRelationshipsGameCenterLeaderboardData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["gameCenterLeaderboards"]
    ]


class _SerializerGameCenterLeaderboardLocalizationCreateRequestDataRelationshipsGameCenterLeaderboardData(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterLeaderboardLocalizationCreateRequestDataRelationshipsGameCenterLeaderboardData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["gameCenterLeaderboards"] = pydantic.Field(
        alias="type"
    )


class GameCenterLeaderboardLocalizationUpdateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[
        GameCenterLeaderboardLocalizationUpdateRequestDataAttributes
    ]
    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["gameCenterLeaderboardLocalizations"]
    ]


class _SerializerGameCenterLeaderboardLocalizationUpdateRequestData(pydantic.BaseModel):
    """
    Serializer for GameCenterLeaderboardLocalizationUpdateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[
        _SerializerGameCenterLeaderboardLocalizationUpdateRequestDataAttributes
    ] = pydantic.Field(alias="attributes", default=None)
    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["gameCenterLeaderboardLocalizations"] = (
        pydantic.Field(alias="type")
    )


class GameCenterLeaderboardLocalizationCreateRequestDataRelationshipsGameCenterLeaderboard(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        GameCenterLeaderboardLocalizationCreateRequestDataRelationshipsGameCenterLeaderboardData
    ]


class _SerializerGameCenterLeaderboardLocalizationCreateRequestDataRelationshipsGameCenterLeaderboard(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterLeaderboardLocalizationCreateRequestDataRelationshipsGameCenterLeaderboard handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerGameCenterLeaderboardLocalizationCreateRequestDataRelationshipsGameCenterLeaderboardData = pydantic.Field(
        alias="data"
    )


class GameCenterLeaderboardLocalizationUpdateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[GameCenterLeaderboardLocalizationUpdateRequestData]


class _SerializerGameCenterLeaderboardLocalizationUpdateRequest(pydantic.BaseModel):
    """
    Serializer for GameCenterLeaderboardLocalizationUpdateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerGameCenterLeaderboardLocalizationUpdateRequestData = (
        pydantic.Field(alias="data")
    )


class GameCenterLeaderboardLocalizationCreateRequestDataRelationships(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    game_center_leaderboard: typing_extensions.Required[
        GameCenterLeaderboardLocalizationCreateRequestDataRelationshipsGameCenterLeaderboard
    ]


class _SerializerGameCenterLeaderboardLocalizationCreateRequestDataRelationships(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterLeaderboardLocalizationCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    game_center_leaderboard: _SerializerGameCenterLeaderboardLocalizationCreateRequestDataRelationshipsGameCenterLeaderboard = pydantic.Field(
        alias="gameCenterLeaderboard"
    )


class GameCenterLeaderboardLocalizationCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[
        GameCenterLeaderboardLocalizationCreateRequestDataAttributes
    ]
    relationships: typing_extensions.Required[
        GameCenterLeaderboardLocalizationCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["gameCenterLeaderboardLocalizations"]
    ]


class _SerializerGameCenterLeaderboardLocalizationCreateRequestData(pydantic.BaseModel):
    """
    Serializer for GameCenterLeaderboardLocalizationCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerGameCenterLeaderboardLocalizationCreateRequestDataAttributes = pydantic.Field(
        alias="attributes"
    )
    relationships: _SerializerGameCenterLeaderboardLocalizationCreateRequestDataRelationships = pydantic.Field(
        alias="relationships"
    )
    type: typing_extensions.Literal["gameCenterLeaderboardLocalizations"] = (
        pydantic.Field(alias="type")
    )


class GameCenterLeaderboardLocalizationCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[GameCenterLeaderboardLocalizationCreateRequestData]


class _SerializerGameCenterLeaderboardLocalizationCreateRequest(pydantic.BaseModel):
    """
    Serializer for GameCenterLeaderboardLocalizationCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerGameCenterLeaderboardLocalizationCreateRequestData = (
        pydantic.Field(alias="data")
    )
