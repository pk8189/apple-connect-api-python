"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class CustomerReviewResponseV1CreateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    response_body: typing_extensions.Required[str]


class _SerializerCustomerReviewResponseV1CreateRequestDataAttributes(
    pydantic.BaseModel
):
    """
    Serializer for CustomerReviewResponseV1CreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    response_body: str = pydantic.Field(alias="responseBody")


class CustomerReviewResponseV1CreateRequestDataRelationshipsReviewData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["customerReviews"]]


class _SerializerCustomerReviewResponseV1CreateRequestDataRelationshipsReviewData(
    pydantic.BaseModel
):
    """
    Serializer for CustomerReviewResponseV1CreateRequestDataRelationshipsReviewData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["customerReviews"] = pydantic.Field(alias="type")


class CustomerReviewResponseV1CreateRequestDataRelationshipsReview(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        CustomerReviewResponseV1CreateRequestDataRelationshipsReviewData
    ]


class _SerializerCustomerReviewResponseV1CreateRequestDataRelationshipsReview(
    pydantic.BaseModel
):
    """
    Serializer for CustomerReviewResponseV1CreateRequestDataRelationshipsReview handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerCustomerReviewResponseV1CreateRequestDataRelationshipsReviewData = pydantic.Field(
        alias="data"
    )


class CustomerReviewResponseV1CreateRequestDataRelationships(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    review: typing_extensions.Required[
        CustomerReviewResponseV1CreateRequestDataRelationshipsReview
    ]


class _SerializerCustomerReviewResponseV1CreateRequestDataRelationships(
    pydantic.BaseModel
):
    """
    Serializer for CustomerReviewResponseV1CreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    review: _SerializerCustomerReviewResponseV1CreateRequestDataRelationshipsReview = (
        pydantic.Field(alias="review")
    )


class CustomerReviewResponseV1CreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[
        CustomerReviewResponseV1CreateRequestDataAttributes
    ]
    relationships: typing_extensions.Required[
        CustomerReviewResponseV1CreateRequestDataRelationships
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["customerReviewResponses"]
    ]


class _SerializerCustomerReviewResponseV1CreateRequestData(pydantic.BaseModel):
    """
    Serializer for CustomerReviewResponseV1CreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerCustomerReviewResponseV1CreateRequestDataAttributes = (
        pydantic.Field(alias="attributes")
    )
    relationships: _SerializerCustomerReviewResponseV1CreateRequestDataRelationships = (
        pydantic.Field(alias="relationships")
    )
    type: typing_extensions.Literal["customerReviewResponses"] = pydantic.Field(
        alias="type"
    )


class CustomerReviewResponseV1CreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[CustomerReviewResponseV1CreateRequestData]


class _SerializerCustomerReviewResponseV1CreateRequest(pydantic.BaseModel):
    """
    Serializer for CustomerReviewResponseV1CreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerCustomerReviewResponseV1CreateRequestData = pydantic.Field(
        alias="data"
    )
