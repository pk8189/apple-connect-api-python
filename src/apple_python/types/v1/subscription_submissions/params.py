"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class SubscriptionSubmissionCreateRequestDataRelationshipsSubscriptionData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["subscriptions"]]


class _SerializerSubscriptionSubmissionCreateRequestDataRelationshipsSubscriptionData(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionSubmissionCreateRequestDataRelationshipsSubscriptionData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["subscriptions"] = pydantic.Field(alias="type")


class SubscriptionSubmissionCreateRequestDataRelationshipsSubscription(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        SubscriptionSubmissionCreateRequestDataRelationshipsSubscriptionData
    ]


class _SerializerSubscriptionSubmissionCreateRequestDataRelationshipsSubscription(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionSubmissionCreateRequestDataRelationshipsSubscription handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerSubscriptionSubmissionCreateRequestDataRelationshipsSubscriptionData = pydantic.Field(
        alias="data"
    )


class SubscriptionSubmissionCreateRequestDataRelationships(typing_extensions.TypedDict):
    """
    No description specified
    """

    subscription: typing_extensions.Required[
        SubscriptionSubmissionCreateRequestDataRelationshipsSubscription
    ]


class _SerializerSubscriptionSubmissionCreateRequestDataRelationships(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionSubmissionCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    subscription: _SerializerSubscriptionSubmissionCreateRequestDataRelationshipsSubscription = pydantic.Field(
        alias="subscription"
    )


class SubscriptionSubmissionCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    relationships: typing_extensions.Required[
        SubscriptionSubmissionCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["subscriptionSubmissions"]
    ]


class _SerializerSubscriptionSubmissionCreateRequestData(pydantic.BaseModel):
    """
    Serializer for SubscriptionSubmissionCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    relationships: _SerializerSubscriptionSubmissionCreateRequestDataRelationships = (
        pydantic.Field(alias="relationships")
    )
    type: typing_extensions.Literal["subscriptionSubmissions"] = pydantic.Field(
        alias="type"
    )


class SubscriptionSubmissionCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[SubscriptionSubmissionCreateRequestData]


class _SerializerSubscriptionSubmissionCreateRequest(pydantic.BaseModel):
    """
    Serializer for SubscriptionSubmissionCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerSubscriptionSubmissionCreateRequestData = pydantic.Field(
        alias="data"
    )
