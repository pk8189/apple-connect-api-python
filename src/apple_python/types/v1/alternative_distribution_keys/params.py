"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class AlternativeDistributionKeyCreateRequestDataAttributes(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    public_key: typing_extensions.Required[str]


class _SerializerAlternativeDistributionKeyCreateRequestDataAttributes(
    pydantic.BaseModel
):
    """
    Serializer for AlternativeDistributionKeyCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    public_key: str = pydantic.Field(alias="publicKey")


class AlternativeDistributionKeyCreateRequestDataRelationshipsAppData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["apps"]]


class _SerializerAlternativeDistributionKeyCreateRequestDataRelationshipsAppData(
    pydantic.BaseModel
):
    """
    Serializer for AlternativeDistributionKeyCreateRequestDataRelationshipsAppData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["apps"] = pydantic.Field(alias="type")


class AlternativeDistributionKeyCreateRequestDataRelationshipsApp(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        AlternativeDistributionKeyCreateRequestDataRelationshipsAppData
    ]


class _SerializerAlternativeDistributionKeyCreateRequestDataRelationshipsApp(
    pydantic.BaseModel
):
    """
    Serializer for AlternativeDistributionKeyCreateRequestDataRelationshipsApp handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        _SerializerAlternativeDistributionKeyCreateRequestDataRelationshipsAppData
    ] = pydantic.Field(alias="data", default=None)


class AlternativeDistributionKeyCreateRequestDataRelationships(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    app: typing_extensions.NotRequired[
        AlternativeDistributionKeyCreateRequestDataRelationshipsApp
    ]


class _SerializerAlternativeDistributionKeyCreateRequestDataRelationships(
    pydantic.BaseModel
):
    """
    Serializer for AlternativeDistributionKeyCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    app: typing.Optional[
        _SerializerAlternativeDistributionKeyCreateRequestDataRelationshipsApp
    ] = pydantic.Field(alias="app", default=None)


class AlternativeDistributionKeyCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[
        AlternativeDistributionKeyCreateRequestDataAttributes
    ]
    relationships: typing_extensions.NotRequired[
        AlternativeDistributionKeyCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["alternativeDistributionKeys"]
    ]


class _SerializerAlternativeDistributionKeyCreateRequestData(pydantic.BaseModel):
    """
    Serializer for AlternativeDistributionKeyCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerAlternativeDistributionKeyCreateRequestDataAttributes = (
        pydantic.Field(alias="attributes")
    )
    relationships: typing.Optional[
        _SerializerAlternativeDistributionKeyCreateRequestDataRelationships
    ] = pydantic.Field(alias="relationships", default=None)
    type: typing_extensions.Literal["alternativeDistributionKeys"] = pydantic.Field(
        alias="type"
    )


class AlternativeDistributionKeyCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[AlternativeDistributionKeyCreateRequestData]


class _SerializerAlternativeDistributionKeyCreateRequest(pydantic.BaseModel):
    """
    Serializer for AlternativeDistributionKeyCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAlternativeDistributionKeyCreateRequestData = pydantic.Field(
        alias="data"
    )
