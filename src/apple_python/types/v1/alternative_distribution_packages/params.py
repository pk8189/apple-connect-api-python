"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class AlternativeDistributionPackageCreateRequestDataRelationshipsAppStoreVersionData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["appStoreVersions"]]


class _SerializerAlternativeDistributionPackageCreateRequestDataRelationshipsAppStoreVersionData(
    pydantic.BaseModel
):
    """
    Serializer for AlternativeDistributionPackageCreateRequestDataRelationshipsAppStoreVersionData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["appStoreVersions"] = pydantic.Field(alias="type")


class AlternativeDistributionPackageCreateRequestDataRelationshipsAppStoreVersion(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        AlternativeDistributionPackageCreateRequestDataRelationshipsAppStoreVersionData
    ]


class _SerializerAlternativeDistributionPackageCreateRequestDataRelationshipsAppStoreVersion(
    pydantic.BaseModel
):
    """
    Serializer for AlternativeDistributionPackageCreateRequestDataRelationshipsAppStoreVersion handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAlternativeDistributionPackageCreateRequestDataRelationshipsAppStoreVersionData = pydantic.Field(
        alias="data"
    )


class AlternativeDistributionPackageCreateRequestDataRelationships(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    app_store_version: typing_extensions.Required[
        AlternativeDistributionPackageCreateRequestDataRelationshipsAppStoreVersion
    ]


class _SerializerAlternativeDistributionPackageCreateRequestDataRelationships(
    pydantic.BaseModel
):
    """
    Serializer for AlternativeDistributionPackageCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    app_store_version: _SerializerAlternativeDistributionPackageCreateRequestDataRelationshipsAppStoreVersion = pydantic.Field(
        alias="appStoreVersion"
    )


class AlternativeDistributionPackageCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    relationships: typing_extensions.Required[
        AlternativeDistributionPackageCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["alternativeDistributionPackages"]
    ]


class _SerializerAlternativeDistributionPackageCreateRequestData(pydantic.BaseModel):
    """
    Serializer for AlternativeDistributionPackageCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    relationships: _SerializerAlternativeDistributionPackageCreateRequestDataRelationships = pydantic.Field(
        alias="relationships"
    )
    type: typing_extensions.Literal["alternativeDistributionPackages"] = pydantic.Field(
        alias="type"
    )


class AlternativeDistributionPackageCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[AlternativeDistributionPackageCreateRequestData]


class _SerializerAlternativeDistributionPackageCreateRequest(pydantic.BaseModel):
    """
    Serializer for AlternativeDistributionPackageCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAlternativeDistributionPackageCreateRequestData = pydantic.Field(
        alias="data"
    )
