"""File Generated by Sideko (sideko.dev)"""

import io
import typing

from pydantic import (
    BaseModel as _PydanticBaseModel,
    Field as _PydanticField,
    ConfigDict as _PydanticConfigDict,
)

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class DiagnosticLogsProductDataItemDiagnosticInsightsItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    insights_category: typing.Optional[str] = _PydanticField(
        alias="insightsCategory", default=None
    )
    insights_string: typing.Optional[str] = _PydanticField(
        alias="insightsString", default=None
    )
    insights_url: typing.Optional[str] = _PydanticField(
        alias="insightsURL", default=None
    )


class DiagnosticLogCallStackNode(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    address: typing.Optional[str] = _PydanticField(alias="address", default=None)
    binary_name: typing.Optional[str] = _PydanticField(alias="binaryName", default=None)
    binary_uuid: typing.Optional[str] = _PydanticField(alias="binaryUUID", default=None)
    file_name: typing.Optional[str] = _PydanticField(alias="fileName", default=None)
    insights_category: typing.Optional[str] = _PydanticField(
        alias="insightsCategory", default=None
    )
    is_blame_frame: typing.Optional[bool] = _PydanticField(
        alias="isBlameFrame", default=None
    )
    line_number: typing.Optional[str] = _PydanticField(alias="lineNumber", default=None)
    offset_into_binary_text_segment: typing.Optional[str] = _PydanticField(
        alias="offsetIntoBinaryTextSegment", default=None
    )
    offset_into_symbol: typing.Optional[str] = _PydanticField(
        alias="offsetIntoSymbol", default=None
    )
    raw_frame: typing.Optional[str] = _PydanticField(alias="rawFrame", default=None)
    sample_count: typing.Optional[int] = _PydanticField(
        alias="sampleCount", default=None
    )
    sub_frames: typing.Optional[typing.List["DiagnosticLogCallStackNode"]] = (
        _PydanticField(alias="subFrames", default=None)
    )
    symbol_name: typing.Optional[str] = _PydanticField(alias="symbolName", default=None)


class DiagnosticLogsProductDataItemDiagnosticLogsItemDiagnosticMetaData(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    app_version: typing.Optional[str] = _PydanticField(alias="appVersion", default=None)
    build_version: typing.Optional[str] = _PydanticField(
        alias="buildVersion", default=None
    )
    bundle_id: typing.Optional[str] = _PydanticField(alias="bundleId", default=None)
    device_type: typing.Optional[str] = _PydanticField(alias="deviceType", default=None)
    event: typing.Optional[str] = _PydanticField(alias="event", default=None)
    event_detail: typing.Optional[str] = _PydanticField(
        alias="eventDetail", default=None
    )
    os_version: typing.Optional[str] = _PydanticField(alias="osVersion", default=None)
    platform_architecture: typing.Optional[str] = _PydanticField(
        alias="platformArchitecture", default=None
    )
    writes_caused: typing.Optional[str] = _PydanticField(
        alias="writesCaused", default=None
    )


class DiagnosticLogsProductDataItemDiagnosticLogsItemCallStackTreeItemCallStacksItem(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    call_stack_root_frames: typing.Optional[typing.List[DiagnosticLogCallStackNode]] = (
        _PydanticField(alias="callStackRootFrames", default=None)
    )


class DiagnosticLogsProductDataItemDiagnosticLogsItemCallStackTreeItem(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    call_stack_per_thread: typing.Optional[bool] = _PydanticField(
        alias="callStackPerThread", default=None
    )
    call_stacks: typing.Optional[
        typing.List[
            DiagnosticLogsProductDataItemDiagnosticLogsItemCallStackTreeItemCallStacksItem
        ]
    ] = _PydanticField(alias="callStacks", default=None)


class DiagnosticLogsProductDataItemDiagnosticLogsItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    call_stack_tree: typing.Optional[
        typing.List[DiagnosticLogsProductDataItemDiagnosticLogsItemCallStackTreeItem]
    ] = _PydanticField(alias="callStackTree", default=None)
    diagnostic_meta_data: typing.Optional[
        DiagnosticLogsProductDataItemDiagnosticLogsItemDiagnosticMetaData
    ] = _PydanticField(alias="diagnosticMetaData", default=None)


class DiagnosticLogsProductDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    diagnostic_insights: typing.Optional[
        typing.List[DiagnosticLogsProductDataItemDiagnosticInsightsItem]
    ] = _PydanticField(alias="diagnosticInsights", default=None)
    diagnostic_logs: typing.Optional[
        typing.List[DiagnosticLogsProductDataItemDiagnosticLogsItem]
    ] = _PydanticField(alias="diagnosticLogs", default=None)
    signature_id: typing.Optional[str] = _PydanticField(
        alias="signatureId", default=None
    )


class DiagnosticLogs(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    product_data: typing.Optional[typing.List[DiagnosticLogsProductDataItem]] = (
        _PydanticField(alias="productData", default=None)
    )
    version: typing.Optional[str] = _PydanticField(alias="version", default=None)
