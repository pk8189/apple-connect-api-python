"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class GameCenterAchievementLocalizationUpdateRequestDataAttributes(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    after_earned_description: typing_extensions.NotRequired[str]
    before_earned_description: typing_extensions.NotRequired[str]
    name: typing_extensions.NotRequired[str]


class _SerializerGameCenterAchievementLocalizationUpdateRequestDataAttributes(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterAchievementLocalizationUpdateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    after_earned_description: typing.Optional[str] = pydantic.Field(
        alias="afterEarnedDescription", default=None
    )
    before_earned_description: typing.Optional[str] = pydantic.Field(
        alias="beforeEarnedDescription", default=None
    )
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)


class GameCenterAchievementLocalizationCreateRequestDataAttributes(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    after_earned_description: typing_extensions.Required[str]
    before_earned_description: typing_extensions.Required[str]
    locale_field: typing_extensions.Required[str]
    name: typing_extensions.Required[str]


class _SerializerGameCenterAchievementLocalizationCreateRequestDataAttributes(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterAchievementLocalizationCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    after_earned_description: str = pydantic.Field(alias="afterEarnedDescription")
    before_earned_description: str = pydantic.Field(alias="beforeEarnedDescription")
    locale_field: str = pydantic.Field(alias="locale")
    name: str = pydantic.Field(alias="name")


class GameCenterAchievementLocalizationCreateRequestDataRelationshipsGameCenterAchievementData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["gameCenterAchievements"]
    ]


class _SerializerGameCenterAchievementLocalizationCreateRequestDataRelationshipsGameCenterAchievementData(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterAchievementLocalizationCreateRequestDataRelationshipsGameCenterAchievementData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["gameCenterAchievements"] = pydantic.Field(
        alias="type"
    )


class GameCenterAchievementLocalizationUpdateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[
        GameCenterAchievementLocalizationUpdateRequestDataAttributes
    ]
    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["gameCenterAchievementLocalizations"]
    ]


class _SerializerGameCenterAchievementLocalizationUpdateRequestData(pydantic.BaseModel):
    """
    Serializer for GameCenterAchievementLocalizationUpdateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[
        _SerializerGameCenterAchievementLocalizationUpdateRequestDataAttributes
    ] = pydantic.Field(alias="attributes", default=None)
    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["gameCenterAchievementLocalizations"] = (
        pydantic.Field(alias="type")
    )


class GameCenterAchievementLocalizationCreateRequestDataRelationshipsGameCenterAchievement(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        GameCenterAchievementLocalizationCreateRequestDataRelationshipsGameCenterAchievementData
    ]


class _SerializerGameCenterAchievementLocalizationCreateRequestDataRelationshipsGameCenterAchievement(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterAchievementLocalizationCreateRequestDataRelationshipsGameCenterAchievement handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerGameCenterAchievementLocalizationCreateRequestDataRelationshipsGameCenterAchievementData = pydantic.Field(
        alias="data"
    )


class GameCenterAchievementLocalizationUpdateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[GameCenterAchievementLocalizationUpdateRequestData]


class _SerializerGameCenterAchievementLocalizationUpdateRequest(pydantic.BaseModel):
    """
    Serializer for GameCenterAchievementLocalizationUpdateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerGameCenterAchievementLocalizationUpdateRequestData = (
        pydantic.Field(alias="data")
    )


class GameCenterAchievementLocalizationCreateRequestDataRelationships(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    game_center_achievement: typing_extensions.Required[
        GameCenterAchievementLocalizationCreateRequestDataRelationshipsGameCenterAchievement
    ]


class _SerializerGameCenterAchievementLocalizationCreateRequestDataRelationships(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterAchievementLocalizationCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    game_center_achievement: _SerializerGameCenterAchievementLocalizationCreateRequestDataRelationshipsGameCenterAchievement = pydantic.Field(
        alias="gameCenterAchievement"
    )


class GameCenterAchievementLocalizationCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[
        GameCenterAchievementLocalizationCreateRequestDataAttributes
    ]
    relationships: typing_extensions.Required[
        GameCenterAchievementLocalizationCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["gameCenterAchievementLocalizations"]
    ]


class _SerializerGameCenterAchievementLocalizationCreateRequestData(pydantic.BaseModel):
    """
    Serializer for GameCenterAchievementLocalizationCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerGameCenterAchievementLocalizationCreateRequestDataAttributes = pydantic.Field(
        alias="attributes"
    )
    relationships: _SerializerGameCenterAchievementLocalizationCreateRequestDataRelationships = pydantic.Field(
        alias="relationships"
    )
    type: typing_extensions.Literal["gameCenterAchievementLocalizations"] = (
        pydantic.Field(alias="type")
    )


class GameCenterAchievementLocalizationCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[GameCenterAchievementLocalizationCreateRequestData]


class _SerializerGameCenterAchievementLocalizationCreateRequest(pydantic.BaseModel):
    """
    Serializer for GameCenterAchievementLocalizationCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerGameCenterAchievementLocalizationCreateRequestData = (
        pydantic.Field(alias="data")
    )
