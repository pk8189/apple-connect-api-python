"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class GameCenterPlayerAchievementSubmissionCreateRequestDataAttributes(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    bundle_id: typing_extensions.Required[str]
    challenge_ids: typing_extensions.NotRequired[typing.List[str]]
    percentage_achieved: typing_extensions.Required[int]
    scoped_player_id: typing_extensions.Required[str]
    submitted_date: typing_extensions.NotRequired[str]
    vendor_identifier: typing_extensions.Required[str]


class _SerializerGameCenterPlayerAchievementSubmissionCreateRequestDataAttributes(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterPlayerAchievementSubmissionCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    bundle_id: str = pydantic.Field(alias="bundleId")
    challenge_ids: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="challengeIds", default=None
    )
    percentage_achieved: int = pydantic.Field(alias="percentageAchieved")
    scoped_player_id: str = pydantic.Field(alias="scopedPlayerId")
    submitted_date: typing.Optional[str] = pydantic.Field(
        alias="submittedDate", default=None
    )
    vendor_identifier: str = pydantic.Field(alias="vendorIdentifier")


class GameCenterPlayerAchievementSubmissionCreateRequestData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    attributes: typing_extensions.Required[
        GameCenterPlayerAchievementSubmissionCreateRequestDataAttributes
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["gameCenterPlayerAchievementSubmissions"]
    ]


class _SerializerGameCenterPlayerAchievementSubmissionCreateRequestData(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterPlayerAchievementSubmissionCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerGameCenterPlayerAchievementSubmissionCreateRequestDataAttributes = pydantic.Field(
        alias="attributes"
    )
    type: typing_extensions.Literal["gameCenterPlayerAchievementSubmissions"] = (
        pydantic.Field(alias="type")
    )


class GameCenterPlayerAchievementSubmissionCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[
        GameCenterPlayerAchievementSubmissionCreateRequestData
    ]


class _SerializerGameCenterPlayerAchievementSubmissionCreateRequest(pydantic.BaseModel):
    """
    Serializer for GameCenterPlayerAchievementSubmissionCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerGameCenterPlayerAchievementSubmissionCreateRequestData = (
        pydantic.Field(alias="data")
    )
