"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class BetaLicenseAgreementUpdateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    agreement_text: typing_extensions.NotRequired[str]


class _SerializerBetaLicenseAgreementUpdateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for BetaLicenseAgreementUpdateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    agreement_text: typing.Optional[str] = pydantic.Field(
        alias="agreementText", default=None
    )


class BetaLicenseAgreementUpdateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[
        BetaLicenseAgreementUpdateRequestDataAttributes
    ]
    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["betaLicenseAgreements"]]


class _SerializerBetaLicenseAgreementUpdateRequestData(pydantic.BaseModel):
    """
    Serializer for BetaLicenseAgreementUpdateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[
        _SerializerBetaLicenseAgreementUpdateRequestDataAttributes
    ] = pydantic.Field(alias="attributes", default=None)
    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["betaLicenseAgreements"] = pydantic.Field(
        alias="type"
    )


class BetaLicenseAgreementUpdateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[BetaLicenseAgreementUpdateRequestData]


class _SerializerBetaLicenseAgreementUpdateRequest(pydantic.BaseModel):
    """
    Serializer for BetaLicenseAgreementUpdateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerBetaLicenseAgreementUpdateRequestData = pydantic.Field(
        alias="data"
    )
