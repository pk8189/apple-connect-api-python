"""File Generated by Sideko (sideko.dev)"""

import io
import typing
import typing_extensions
from pydantic import (
    BaseModel as _PydanticBaseModel,
    Field as _PydanticField,
    ConfigDict as _PydanticConfigDict,
)

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class ScmRepositoryAttributes(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    http_clone_url: typing.Optional[str] = _PydanticField(
        alias="httpCloneUrl", default=None
    )
    last_accessed_date: typing.Optional[str] = _PydanticField(
        alias="lastAccessedDate", default=None
    )
    owner_name: typing.Optional[str] = _PydanticField(alias="ownerName", default=None)
    repository_name: typing.Optional[str] = _PydanticField(
        alias="repositoryName", default=None
    )
    ssh_clone_url: typing.Optional[str] = _PydanticField(
        alias="sshCloneUrl", default=None
    )


class ResourceLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class ScmRepositoryRelationshipsDefaultBranchData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["scmGitReferences"] = _PydanticField(alias="type")


class ScmRepositoryRelationshipsDefaultBranchLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class ScmRepositoryRelationshipsScmProviderData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["scmProviders"] = _PydanticField(alias="type")


class ScmRepositoryRelationshipsScmProviderLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class ScmProviderType(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    display_name: typing.Optional[str] = _PydanticField(
        alias="displayName", default=None
    )
    is_on_premise: typing.Optional[bool] = _PydanticField(
        alias="isOnPremise", default=None
    )
    kind: typing.Optional[
        typing_extensions.Literal[
            "BITBUCKET_CLOUD",
            "BITBUCKET_SERVER",
            "GITHUB_CLOUD",
            "GITHUB_ENTERPRISE",
            "GITLAB_CLOUD",
            "GITLAB_SELF_MANAGED",
        ]
    ] = _PydanticField(alias="kind", default=None)


class ScmGitReferenceAttributes(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    canonical_name: typing.Optional[str] = _PydanticField(
        alias="canonicalName", default=None
    )
    is_deleted: typing.Optional[bool] = _PydanticField(alias="isDeleted", default=None)
    kind: typing.Optional[typing_extensions.Literal["BRANCH", "TAG"]] = _PydanticField(
        alias="kind", default=None
    )
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)


class ScmGitReferenceRelationshipsRepositoryData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: str = _PydanticField(alias="id")
    type: typing_extensions.Literal["scmRepositories"] = _PydanticField(alias="type")


class ScmGitReferenceRelationshipsRepositoryLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    related: typing.Optional[str] = _PydanticField(alias="related", default=None)
    self: typing.Optional[str] = _PydanticField(alias="self", default=None)


class DocumentLinks(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    self: str = _PydanticField(alias="self")


class ScmRepositoryRelationshipsDefaultBranch(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[ScmRepositoryRelationshipsDefaultBranchData] = _PydanticField(
        alias="data", default=None
    )
    links: typing.Optional[ScmRepositoryRelationshipsDefaultBranchLinks] = (
        _PydanticField(alias="links", default=None)
    )


class ScmRepositoryRelationshipsScmProvider(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[ScmRepositoryRelationshipsScmProviderData] = _PydanticField(
        alias="data", default=None
    )
    links: typing.Optional[ScmRepositoryRelationshipsScmProviderLinks] = _PydanticField(
        alias="links", default=None
    )


class ScmProviderAttributes(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    scm_provider_type: typing.Optional[ScmProviderType] = _PydanticField(
        alias="scmProviderType", default=None
    )
    url: typing.Optional[str] = _PydanticField(alias="url", default=None)


class ScmGitReferenceRelationshipsRepository(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[ScmGitReferenceRelationshipsRepositoryData] = _PydanticField(
        alias="data", default=None
    )
    links: typing.Optional[ScmGitReferenceRelationshipsRepositoryLinks] = (
        _PydanticField(alias="links", default=None)
    )


class ScmRepositoryRelationships(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    default_branch: typing.Optional[ScmRepositoryRelationshipsDefaultBranch] = (
        _PydanticField(alias="defaultBranch", default=None)
    )
    scm_provider: typing.Optional[ScmRepositoryRelationshipsScmProvider] = (
        _PydanticField(alias="scmProvider", default=None)
    )


class ScmProvider(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    attributes: typing.Optional[ScmProviderAttributes] = _PydanticField(
        alias="attributes", default=None
    )
    id: str = _PydanticField(alias="id")
    links: typing.Optional[ResourceLinks] = _PydanticField(alias="links", default=None)
    type: typing_extensions.Literal["scmProviders"] = _PydanticField(alias="type")


class ScmGitReferenceRelationships(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    repository: typing.Optional[ScmGitReferenceRelationshipsRepository] = (
        _PydanticField(alias="repository", default=None)
    )


class ScmRepository(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    attributes: typing.Optional[ScmRepositoryAttributes] = _PydanticField(
        alias="attributes", default=None
    )
    id: str = _PydanticField(alias="id")
    links: typing.Optional[ResourceLinks] = _PydanticField(alias="links", default=None)
    relationships: typing.Optional[ScmRepositoryRelationships] = _PydanticField(
        alias="relationships", default=None
    )
    type: typing_extensions.Literal["scmRepositories"] = _PydanticField(alias="type")


class ScmGitReference(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    attributes: typing.Optional[ScmGitReferenceAttributes] = _PydanticField(
        alias="attributes", default=None
    )
    id: str = _PydanticField(alias="id")
    links: typing.Optional[ResourceLinks] = _PydanticField(alias="links", default=None)
    relationships: typing.Optional[ScmGitReferenceRelationships] = _PydanticField(
        alias="relationships", default=None
    )
    type: typing_extensions.Literal["scmGitReferences"] = _PydanticField(alias="type")


class ScmRepositoryResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: ScmRepository = _PydanticField(alias="data")
    included: typing.Optional[
        typing.List[typing.Union[ScmProvider, ScmGitReference]]
    ] = _PydanticField(alias="included", default=None)
    links: DocumentLinks = _PydanticField(alias="links")
