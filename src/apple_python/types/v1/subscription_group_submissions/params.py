"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class SubscriptionGroupSubmissionCreateRequestDataRelationshipsSubscriptionGroupData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["subscriptionGroups"]]


class _SerializerSubscriptionGroupSubmissionCreateRequestDataRelationshipsSubscriptionGroupData(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionGroupSubmissionCreateRequestDataRelationshipsSubscriptionGroupData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["subscriptionGroups"] = pydantic.Field(alias="type")


class SubscriptionGroupSubmissionCreateRequestDataRelationshipsSubscriptionGroup(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        SubscriptionGroupSubmissionCreateRequestDataRelationshipsSubscriptionGroupData
    ]


class _SerializerSubscriptionGroupSubmissionCreateRequestDataRelationshipsSubscriptionGroup(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionGroupSubmissionCreateRequestDataRelationshipsSubscriptionGroup handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerSubscriptionGroupSubmissionCreateRequestDataRelationshipsSubscriptionGroupData = pydantic.Field(
        alias="data"
    )


class SubscriptionGroupSubmissionCreateRequestDataRelationships(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    subscription_group: typing_extensions.Required[
        SubscriptionGroupSubmissionCreateRequestDataRelationshipsSubscriptionGroup
    ]


class _SerializerSubscriptionGroupSubmissionCreateRequestDataRelationships(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionGroupSubmissionCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    subscription_group: _SerializerSubscriptionGroupSubmissionCreateRequestDataRelationshipsSubscriptionGroup = pydantic.Field(
        alias="subscriptionGroup"
    )


class SubscriptionGroupSubmissionCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    relationships: typing_extensions.Required[
        SubscriptionGroupSubmissionCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["subscriptionGroupSubmissions"]
    ]


class _SerializerSubscriptionGroupSubmissionCreateRequestData(pydantic.BaseModel):
    """
    Serializer for SubscriptionGroupSubmissionCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    relationships: _SerializerSubscriptionGroupSubmissionCreateRequestDataRelationships = pydantic.Field(
        alias="relationships"
    )
    type: typing_extensions.Literal["subscriptionGroupSubmissions"] = pydantic.Field(
        alias="type"
    )


class SubscriptionGroupSubmissionCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[SubscriptionGroupSubmissionCreateRequestData]


class _SerializerSubscriptionGroupSubmissionCreateRequest(pydantic.BaseModel):
    """
    Serializer for SubscriptionGroupSubmissionCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerSubscriptionGroupSubmissionCreateRequestData = pydantic.Field(
        alias="data"
    )
