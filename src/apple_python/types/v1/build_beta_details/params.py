"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class BuildBetaDetailUpdateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    auto_notify_enabled: typing_extensions.NotRequired[bool]


class _SerializerBuildBetaDetailUpdateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for BuildBetaDetailUpdateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    auto_notify_enabled: typing.Optional[bool] = pydantic.Field(
        alias="autoNotifyEnabled", default=None
    )


class BuildBetaDetailUpdateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[
        BuildBetaDetailUpdateRequestDataAttributes
    ]
    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["buildBetaDetails"]]


class _SerializerBuildBetaDetailUpdateRequestData(pydantic.BaseModel):
    """
    Serializer for BuildBetaDetailUpdateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[
        _SerializerBuildBetaDetailUpdateRequestDataAttributes
    ] = pydantic.Field(alias="attributes", default=None)
    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["buildBetaDetails"] = pydantic.Field(alias="type")


class BuildBetaDetailUpdateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[BuildBetaDetailUpdateRequestData]


class _SerializerBuildBetaDetailUpdateRequest(pydantic.BaseModel):
    """
    Serializer for BuildBetaDetailUpdateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerBuildBetaDetailUpdateRequestData = pydantic.Field(alias="data")
