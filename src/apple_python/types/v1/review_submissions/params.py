"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class ReviewSubmissionUpdateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    canceled: typing_extensions.NotRequired[bool]
    submitted: typing_extensions.NotRequired[bool]


class _SerializerReviewSubmissionUpdateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for ReviewSubmissionUpdateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    canceled: typing.Optional[bool] = pydantic.Field(alias="canceled", default=None)
    submitted: typing.Optional[bool] = pydantic.Field(alias="submitted", default=None)


class ReviewSubmissionCreateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    platform_field: typing_extensions.Required[
        typing_extensions.Literal["IOS", "MAC_OS", "TV_OS", "VISION_OS"]
    ]


class _SerializerReviewSubmissionCreateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for ReviewSubmissionCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    platform_field: typing_extensions.Literal["IOS", "MAC_OS", "TV_OS", "VISION_OS"] = (
        pydantic.Field(alias="platform")
    )


class ReviewSubmissionCreateRequestDataRelationshipsAppData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["apps"]]


class _SerializerReviewSubmissionCreateRequestDataRelationshipsAppData(
    pydantic.BaseModel
):
    """
    Serializer for ReviewSubmissionCreateRequestDataRelationshipsAppData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["apps"] = pydantic.Field(alias="type")


class ReviewSubmissionUpdateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[
        ReviewSubmissionUpdateRequestDataAttributes
    ]
    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["reviewSubmissions"]]


class _SerializerReviewSubmissionUpdateRequestData(pydantic.BaseModel):
    """
    Serializer for ReviewSubmissionUpdateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[
        _SerializerReviewSubmissionUpdateRequestDataAttributes
    ] = pydantic.Field(alias="attributes", default=None)
    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["reviewSubmissions"] = pydantic.Field(alias="type")


class ReviewSubmissionCreateRequestDataRelationshipsApp(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[
        ReviewSubmissionCreateRequestDataRelationshipsAppData
    ]


class _SerializerReviewSubmissionCreateRequestDataRelationshipsApp(pydantic.BaseModel):
    """
    Serializer for ReviewSubmissionCreateRequestDataRelationshipsApp handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerReviewSubmissionCreateRequestDataRelationshipsAppData = (
        pydantic.Field(alias="data")
    )


class ReviewSubmissionUpdateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[ReviewSubmissionUpdateRequestData]


class _SerializerReviewSubmissionUpdateRequest(pydantic.BaseModel):
    """
    Serializer for ReviewSubmissionUpdateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerReviewSubmissionUpdateRequestData = pydantic.Field(alias="data")


class ReviewSubmissionCreateRequestDataRelationships(typing_extensions.TypedDict):
    """
    No description specified
    """

    app: typing_extensions.Required[ReviewSubmissionCreateRequestDataRelationshipsApp]


class _SerializerReviewSubmissionCreateRequestDataRelationships(pydantic.BaseModel):
    """
    Serializer for ReviewSubmissionCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    app: _SerializerReviewSubmissionCreateRequestDataRelationshipsApp = pydantic.Field(
        alias="app"
    )


class ReviewSubmissionCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[ReviewSubmissionCreateRequestDataAttributes]
    relationships: typing_extensions.Required[
        ReviewSubmissionCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[typing_extensions.Literal["reviewSubmissions"]]


class _SerializerReviewSubmissionCreateRequestData(pydantic.BaseModel):
    """
    Serializer for ReviewSubmissionCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerReviewSubmissionCreateRequestDataAttributes = pydantic.Field(
        alias="attributes"
    )
    relationships: _SerializerReviewSubmissionCreateRequestDataRelationships = (
        pydantic.Field(alias="relationships")
    )
    type: typing_extensions.Literal["reviewSubmissions"] = pydantic.Field(alias="type")


class ReviewSubmissionCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[ReviewSubmissionCreateRequestData]


class _SerializerReviewSubmissionCreateRequest(pydantic.BaseModel):
    """
    Serializer for ReviewSubmissionCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerReviewSubmissionCreateRequestData = pydantic.Field(alias="data")
