"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class UserUpdateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    all_apps_visible: typing_extensions.NotRequired[bool]
    provisioning_allowed: typing_extensions.NotRequired[bool]
    roles: typing_extensions.NotRequired[
        typing.List[
            typing_extensions.Literal[
                "ADMIN",
                "FINANCE",
                "ACCOUNT_HOLDER",
                "SALES",
                "MARKETING",
                "APP_MANAGER",
                "DEVELOPER",
                "ACCESS_TO_REPORTS",
                "CUSTOMER_SUPPORT",
                "CREATE_APPS",
                "CLOUD_MANAGED_DEVELOPER_ID",
                "CLOUD_MANAGED_APP_DISTRIBUTION",
                "GENERATE_INDIVIDUAL_KEYS",
            ]
        ]
    ]


class _SerializerUserUpdateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for UserUpdateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    all_apps_visible: typing.Optional[bool] = pydantic.Field(
        alias="allAppsVisible", default=None
    )
    provisioning_allowed: typing.Optional[bool] = pydantic.Field(
        alias="provisioningAllowed", default=None
    )
    roles: typing.Optional[
        typing.List[
            typing_extensions.Literal[
                "ADMIN",
                "FINANCE",
                "ACCOUNT_HOLDER",
                "SALES",
                "MARKETING",
                "APP_MANAGER",
                "DEVELOPER",
                "ACCESS_TO_REPORTS",
                "CUSTOMER_SUPPORT",
                "CREATE_APPS",
                "CLOUD_MANAGED_DEVELOPER_ID",
                "CLOUD_MANAGED_APP_DISTRIBUTION",
                "GENERATE_INDIVIDUAL_KEYS",
            ]
        ]
    ] = pydantic.Field(alias="roles", default=None)


class UserUpdateRequestDataRelationshipsVisibleAppsDataItem(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["apps"]]


class _SerializerUserUpdateRequestDataRelationshipsVisibleAppsDataItem(
    pydantic.BaseModel
):
    """
    Serializer for UserUpdateRequestDataRelationshipsVisibleAppsDataItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["apps"] = pydantic.Field(alias="type")


class UserUpdateRequestDataRelationshipsVisibleApps(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        typing.List[UserUpdateRequestDataRelationshipsVisibleAppsDataItem]
    ]


class _SerializerUserUpdateRequestDataRelationshipsVisibleApps(pydantic.BaseModel):
    """
    Serializer for UserUpdateRequestDataRelationshipsVisibleApps handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        typing.List[_SerializerUserUpdateRequestDataRelationshipsVisibleAppsDataItem]
    ] = pydantic.Field(alias="data", default=None)


class UserUpdateRequestDataRelationships(typing_extensions.TypedDict):
    """
    No description specified
    """

    visible_apps: typing_extensions.NotRequired[
        UserUpdateRequestDataRelationshipsVisibleApps
    ]


class _SerializerUserUpdateRequestDataRelationships(pydantic.BaseModel):
    """
    Serializer for UserUpdateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    visible_apps: typing.Optional[
        _SerializerUserUpdateRequestDataRelationshipsVisibleApps
    ] = pydantic.Field(alias="visibleApps", default=None)


class UserUpdateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[UserUpdateRequestDataAttributes]
    id: typing_extensions.Required[str]
    relationships: typing_extensions.NotRequired[UserUpdateRequestDataRelationships]
    type: typing_extensions.Required[typing_extensions.Literal["users"]]


class _SerializerUserUpdateRequestData(pydantic.BaseModel):
    """
    Serializer for UserUpdateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[_SerializerUserUpdateRequestDataAttributes] = (
        pydantic.Field(alias="attributes", default=None)
    )
    id: str = pydantic.Field(alias="id")
    relationships: typing.Optional[_SerializerUserUpdateRequestDataRelationships] = (
        pydantic.Field(alias="relationships", default=None)
    )
    type: typing_extensions.Literal["users"] = pydantic.Field(alias="type")


class UserUpdateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[UserUpdateRequestData]


class _SerializerUserUpdateRequest(pydantic.BaseModel):
    """
    Serializer for UserUpdateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerUserUpdateRequestData = pydantic.Field(alias="data")
