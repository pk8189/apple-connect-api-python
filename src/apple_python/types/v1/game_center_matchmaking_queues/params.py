"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class GameCenterMatchmakingQueueUpdateRequestDataAttributes(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    classic_matchmaking_bundle_ids: typing_extensions.NotRequired[typing.List[str]]


class _SerializerGameCenterMatchmakingQueueUpdateRequestDataAttributes(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterMatchmakingQueueUpdateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    classic_matchmaking_bundle_ids: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="classicMatchmakingBundleIds", default=None
    )


class GameCenterMatchmakingQueueUpdateRequestDataRelationshipsExperimentRuleSetData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["gameCenterMatchmakingRuleSets"]
    ]


class _SerializerGameCenterMatchmakingQueueUpdateRequestDataRelationshipsExperimentRuleSetData(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterMatchmakingQueueUpdateRequestDataRelationshipsExperimentRuleSetData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["gameCenterMatchmakingRuleSets"] = pydantic.Field(
        alias="type"
    )


class GameCenterMatchmakingQueueUpdateRequestDataRelationshipsRuleSetData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["gameCenterMatchmakingRuleSets"]
    ]


class _SerializerGameCenterMatchmakingQueueUpdateRequestDataRelationshipsRuleSetData(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterMatchmakingQueueUpdateRequestDataRelationshipsRuleSetData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["gameCenterMatchmakingRuleSets"] = pydantic.Field(
        alias="type"
    )


class GameCenterMatchmakingQueueCreateRequestDataAttributes(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    classic_matchmaking_bundle_ids: typing_extensions.NotRequired[typing.List[str]]
    reference_name: typing_extensions.Required[str]


class _SerializerGameCenterMatchmakingQueueCreateRequestDataAttributes(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterMatchmakingQueueCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    classic_matchmaking_bundle_ids: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="classicMatchmakingBundleIds", default=None
    )
    reference_name: str = pydantic.Field(alias="referenceName")


class GameCenterMatchmakingQueueCreateRequestDataRelationshipsExperimentRuleSetData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["gameCenterMatchmakingRuleSets"]
    ]


class _SerializerGameCenterMatchmakingQueueCreateRequestDataRelationshipsExperimentRuleSetData(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterMatchmakingQueueCreateRequestDataRelationshipsExperimentRuleSetData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["gameCenterMatchmakingRuleSets"] = pydantic.Field(
        alias="type"
    )


class GameCenterMatchmakingQueueCreateRequestDataRelationshipsRuleSetData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["gameCenterMatchmakingRuleSets"]
    ]


class _SerializerGameCenterMatchmakingQueueCreateRequestDataRelationshipsRuleSetData(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterMatchmakingQueueCreateRequestDataRelationshipsRuleSetData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["gameCenterMatchmakingRuleSets"] = pydantic.Field(
        alias="type"
    )


class GameCenterMatchmakingQueueUpdateRequestDataRelationshipsExperimentRuleSet(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        GameCenterMatchmakingQueueUpdateRequestDataRelationshipsExperimentRuleSetData
    ]


class _SerializerGameCenterMatchmakingQueueUpdateRequestDataRelationshipsExperimentRuleSet(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterMatchmakingQueueUpdateRequestDataRelationshipsExperimentRuleSet handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        _SerializerGameCenterMatchmakingQueueUpdateRequestDataRelationshipsExperimentRuleSetData
    ] = pydantic.Field(alias="data", default=None)


class GameCenterMatchmakingQueueUpdateRequestDataRelationshipsRuleSet(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        GameCenterMatchmakingQueueUpdateRequestDataRelationshipsRuleSetData
    ]


class _SerializerGameCenterMatchmakingQueueUpdateRequestDataRelationshipsRuleSet(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterMatchmakingQueueUpdateRequestDataRelationshipsRuleSet handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        _SerializerGameCenterMatchmakingQueueUpdateRequestDataRelationshipsRuleSetData
    ] = pydantic.Field(alias="data", default=None)


class GameCenterMatchmakingQueueCreateRequestDataRelationshipsExperimentRuleSet(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        GameCenterMatchmakingQueueCreateRequestDataRelationshipsExperimentRuleSetData
    ]


class _SerializerGameCenterMatchmakingQueueCreateRequestDataRelationshipsExperimentRuleSet(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterMatchmakingQueueCreateRequestDataRelationshipsExperimentRuleSet handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        _SerializerGameCenterMatchmakingQueueCreateRequestDataRelationshipsExperimentRuleSetData
    ] = pydantic.Field(alias="data", default=None)


class GameCenterMatchmakingQueueCreateRequestDataRelationshipsRuleSet(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        GameCenterMatchmakingQueueCreateRequestDataRelationshipsRuleSetData
    ]


class _SerializerGameCenterMatchmakingQueueCreateRequestDataRelationshipsRuleSet(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterMatchmakingQueueCreateRequestDataRelationshipsRuleSet handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerGameCenterMatchmakingQueueCreateRequestDataRelationshipsRuleSetData = pydantic.Field(
        alias="data"
    )


class GameCenterMatchmakingQueueUpdateRequestDataRelationships(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    experiment_rule_set: typing_extensions.NotRequired[
        GameCenterMatchmakingQueueUpdateRequestDataRelationshipsExperimentRuleSet
    ]
    rule_set: typing_extensions.NotRequired[
        GameCenterMatchmakingQueueUpdateRequestDataRelationshipsRuleSet
    ]


class _SerializerGameCenterMatchmakingQueueUpdateRequestDataRelationships(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterMatchmakingQueueUpdateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    experiment_rule_set: typing.Optional[
        _SerializerGameCenterMatchmakingQueueUpdateRequestDataRelationshipsExperimentRuleSet
    ] = pydantic.Field(alias="experimentRuleSet", default=None)
    rule_set: typing.Optional[
        _SerializerGameCenterMatchmakingQueueUpdateRequestDataRelationshipsRuleSet
    ] = pydantic.Field(alias="ruleSet", default=None)


class GameCenterMatchmakingQueueCreateRequestDataRelationships(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    experiment_rule_set: typing_extensions.NotRequired[
        GameCenterMatchmakingQueueCreateRequestDataRelationshipsExperimentRuleSet
    ]
    rule_set: typing_extensions.Required[
        GameCenterMatchmakingQueueCreateRequestDataRelationshipsRuleSet
    ]


class _SerializerGameCenterMatchmakingQueueCreateRequestDataRelationships(
    pydantic.BaseModel
):
    """
    Serializer for GameCenterMatchmakingQueueCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    experiment_rule_set: typing.Optional[
        _SerializerGameCenterMatchmakingQueueCreateRequestDataRelationshipsExperimentRuleSet
    ] = pydantic.Field(alias="experimentRuleSet", default=None)
    rule_set: _SerializerGameCenterMatchmakingQueueCreateRequestDataRelationshipsRuleSet = pydantic.Field(
        alias="ruleSet"
    )


class GameCenterMatchmakingQueueUpdateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[
        GameCenterMatchmakingQueueUpdateRequestDataAttributes
    ]
    id: typing_extensions.Required[str]
    relationships: typing_extensions.NotRequired[
        GameCenterMatchmakingQueueUpdateRequestDataRelationships
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["gameCenterMatchmakingQueues"]
    ]


class _SerializerGameCenterMatchmakingQueueUpdateRequestData(pydantic.BaseModel):
    """
    Serializer for GameCenterMatchmakingQueueUpdateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[
        _SerializerGameCenterMatchmakingQueueUpdateRequestDataAttributes
    ] = pydantic.Field(alias="attributes", default=None)
    id: str = pydantic.Field(alias="id")
    relationships: typing.Optional[
        _SerializerGameCenterMatchmakingQueueUpdateRequestDataRelationships
    ] = pydantic.Field(alias="relationships", default=None)
    type: typing_extensions.Literal["gameCenterMatchmakingQueues"] = pydantic.Field(
        alias="type"
    )


class GameCenterMatchmakingQueueCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[
        GameCenterMatchmakingQueueCreateRequestDataAttributes
    ]
    relationships: typing_extensions.Required[
        GameCenterMatchmakingQueueCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["gameCenterMatchmakingQueues"]
    ]


class _SerializerGameCenterMatchmakingQueueCreateRequestData(pydantic.BaseModel):
    """
    Serializer for GameCenterMatchmakingQueueCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerGameCenterMatchmakingQueueCreateRequestDataAttributes = (
        pydantic.Field(alias="attributes")
    )
    relationships: _SerializerGameCenterMatchmakingQueueCreateRequestDataRelationships = pydantic.Field(
        alias="relationships"
    )
    type: typing_extensions.Literal["gameCenterMatchmakingQueues"] = pydantic.Field(
        alias="type"
    )


class GameCenterMatchmakingQueueUpdateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[GameCenterMatchmakingQueueUpdateRequestData]


class _SerializerGameCenterMatchmakingQueueUpdateRequest(pydantic.BaseModel):
    """
    Serializer for GameCenterMatchmakingQueueUpdateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerGameCenterMatchmakingQueueUpdateRequestData = pydantic.Field(
        alias="data"
    )


class GameCenterMatchmakingQueueCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[GameCenterMatchmakingQueueCreateRequestData]


class _SerializerGameCenterMatchmakingQueueCreateRequest(pydantic.BaseModel):
    """
    Serializer for GameCenterMatchmakingQueueCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerGameCenterMatchmakingQueueCreateRequestData = pydantic.Field(
        alias="data"
    )
