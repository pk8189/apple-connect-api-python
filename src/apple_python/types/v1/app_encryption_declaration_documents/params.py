"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class AppEncryptionDeclarationDocumentUpdateRequestDataAttributes(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    source_file_checksum: typing_extensions.NotRequired[str]
    uploaded: typing_extensions.NotRequired[bool]


class _SerializerAppEncryptionDeclarationDocumentUpdateRequestDataAttributes(
    pydantic.BaseModel
):
    """
    Serializer for AppEncryptionDeclarationDocumentUpdateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    source_file_checksum: typing.Optional[str] = pydantic.Field(
        alias="sourceFileChecksum", default=None
    )
    uploaded: typing.Optional[bool] = pydantic.Field(alias="uploaded", default=None)


class AppEncryptionDeclarationDocumentCreateRequestDataAttributes(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    file_name: typing_extensions.Required[str]
    file_size: typing_extensions.Required[int]


class _SerializerAppEncryptionDeclarationDocumentCreateRequestDataAttributes(
    pydantic.BaseModel
):
    """
    Serializer for AppEncryptionDeclarationDocumentCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    file_name: str = pydantic.Field(alias="fileName")
    file_size: int = pydantic.Field(alias="fileSize")


class AppEncryptionDeclarationDocumentCreateRequestDataRelationshipsAppEncryptionDeclarationData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["appEncryptionDeclarations"]
    ]


class _SerializerAppEncryptionDeclarationDocumentCreateRequestDataRelationshipsAppEncryptionDeclarationData(
    pydantic.BaseModel
):
    """
    Serializer for AppEncryptionDeclarationDocumentCreateRequestDataRelationshipsAppEncryptionDeclarationData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["appEncryptionDeclarations"] = pydantic.Field(
        alias="type"
    )


class AppEncryptionDeclarationDocumentUpdateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[
        AppEncryptionDeclarationDocumentUpdateRequestDataAttributes
    ]
    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["appEncryptionDeclarationDocuments"]
    ]


class _SerializerAppEncryptionDeclarationDocumentUpdateRequestData(pydantic.BaseModel):
    """
    Serializer for AppEncryptionDeclarationDocumentUpdateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[
        _SerializerAppEncryptionDeclarationDocumentUpdateRequestDataAttributes
    ] = pydantic.Field(alias="attributes", default=None)
    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["appEncryptionDeclarationDocuments"] = (
        pydantic.Field(alias="type")
    )


class AppEncryptionDeclarationDocumentCreateRequestDataRelationshipsAppEncryptionDeclaration(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.Required[
        AppEncryptionDeclarationDocumentCreateRequestDataRelationshipsAppEncryptionDeclarationData
    ]


class _SerializerAppEncryptionDeclarationDocumentCreateRequestDataRelationshipsAppEncryptionDeclaration(
    pydantic.BaseModel
):
    """
    Serializer for AppEncryptionDeclarationDocumentCreateRequestDataRelationshipsAppEncryptionDeclaration handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAppEncryptionDeclarationDocumentCreateRequestDataRelationshipsAppEncryptionDeclarationData = pydantic.Field(
        alias="data"
    )


class AppEncryptionDeclarationDocumentUpdateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[AppEncryptionDeclarationDocumentUpdateRequestData]


class _SerializerAppEncryptionDeclarationDocumentUpdateRequest(pydantic.BaseModel):
    """
    Serializer for AppEncryptionDeclarationDocumentUpdateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAppEncryptionDeclarationDocumentUpdateRequestData = pydantic.Field(
        alias="data"
    )


class AppEncryptionDeclarationDocumentCreateRequestDataRelationships(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    app_encryption_declaration: typing_extensions.Required[
        AppEncryptionDeclarationDocumentCreateRequestDataRelationshipsAppEncryptionDeclaration
    ]


class _SerializerAppEncryptionDeclarationDocumentCreateRequestDataRelationships(
    pydantic.BaseModel
):
    """
    Serializer for AppEncryptionDeclarationDocumentCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    app_encryption_declaration: _SerializerAppEncryptionDeclarationDocumentCreateRequestDataRelationshipsAppEncryptionDeclaration = pydantic.Field(
        alias="appEncryptionDeclaration"
    )


class AppEncryptionDeclarationDocumentCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[
        AppEncryptionDeclarationDocumentCreateRequestDataAttributes
    ]
    relationships: typing_extensions.Required[
        AppEncryptionDeclarationDocumentCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["appEncryptionDeclarationDocuments"]
    ]


class _SerializerAppEncryptionDeclarationDocumentCreateRequestData(pydantic.BaseModel):
    """
    Serializer for AppEncryptionDeclarationDocumentCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerAppEncryptionDeclarationDocumentCreateRequestDataAttributes = pydantic.Field(
        alias="attributes"
    )
    relationships: _SerializerAppEncryptionDeclarationDocumentCreateRequestDataRelationships = pydantic.Field(
        alias="relationships"
    )
    type: typing_extensions.Literal["appEncryptionDeclarationDocuments"] = (
        pydantic.Field(alias="type")
    )


class AppEncryptionDeclarationDocumentCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[AppEncryptionDeclarationDocumentCreateRequestData]


class _SerializerAppEncryptionDeclarationDocumentCreateRequest(pydantic.BaseModel):
    """
    Serializer for AppEncryptionDeclarationDocumentCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerAppEncryptionDeclarationDocumentCreateRequestData = pydantic.Field(
        alias="data"
    )
