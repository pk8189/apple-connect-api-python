"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class BetaGroupUpdateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    feedback_enabled: typing_extensions.NotRequired[bool]
    ios_builds_available_for_apple_silicon_mac: typing_extensions.NotRequired[bool]
    name: typing_extensions.NotRequired[str]
    public_link_enabled: typing_extensions.NotRequired[bool]
    public_link_limit: typing_extensions.NotRequired[int]
    public_link_limit_enabled: typing_extensions.NotRequired[bool]


class _SerializerBetaGroupUpdateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for BetaGroupUpdateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    feedback_enabled: typing.Optional[bool] = pydantic.Field(
        alias="feedbackEnabled", default=None
    )
    ios_builds_available_for_apple_silicon_mac: typing.Optional[bool] = pydantic.Field(
        alias="iosBuildsAvailableForAppleSiliconMac", default=None
    )
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    public_link_enabled: typing.Optional[bool] = pydantic.Field(
        alias="publicLinkEnabled", default=None
    )
    public_link_limit: typing.Optional[int] = pydantic.Field(
        alias="publicLinkLimit", default=None
    )
    public_link_limit_enabled: typing.Optional[bool] = pydantic.Field(
        alias="publicLinkLimitEnabled", default=None
    )


class BetaGroupCreateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    feedback_enabled: typing_extensions.NotRequired[bool]
    has_access_to_all_builds: typing_extensions.NotRequired[bool]
    is_internal_group: typing_extensions.NotRequired[bool]
    name: typing_extensions.Required[str]
    public_link_enabled: typing_extensions.NotRequired[bool]
    public_link_limit: typing_extensions.NotRequired[int]
    public_link_limit_enabled: typing_extensions.NotRequired[bool]


class _SerializerBetaGroupCreateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for BetaGroupCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    feedback_enabled: typing.Optional[bool] = pydantic.Field(
        alias="feedbackEnabled", default=None
    )
    has_access_to_all_builds: typing.Optional[bool] = pydantic.Field(
        alias="hasAccessToAllBuilds", default=None
    )
    is_internal_group: typing.Optional[bool] = pydantic.Field(
        alias="isInternalGroup", default=None
    )
    name: str = pydantic.Field(alias="name")
    public_link_enabled: typing.Optional[bool] = pydantic.Field(
        alias="publicLinkEnabled", default=None
    )
    public_link_limit: typing.Optional[int] = pydantic.Field(
        alias="publicLinkLimit", default=None
    )
    public_link_limit_enabled: typing.Optional[bool] = pydantic.Field(
        alias="publicLinkLimitEnabled", default=None
    )


class BetaGroupCreateRequestDataRelationshipsAppData(typing_extensions.TypedDict):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["apps"]]


class _SerializerBetaGroupCreateRequestDataRelationshipsAppData(pydantic.BaseModel):
    """
    Serializer for BetaGroupCreateRequestDataRelationshipsAppData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["apps"] = pydantic.Field(alias="type")


class BetaGroupCreateRequestDataRelationshipsBetaTestersDataItem(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["betaTesters"]]


class _SerializerBetaGroupCreateRequestDataRelationshipsBetaTestersDataItem(
    pydantic.BaseModel
):
    """
    Serializer for BetaGroupCreateRequestDataRelationshipsBetaTestersDataItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["betaTesters"] = pydantic.Field(alias="type")


class BetaGroupCreateRequestDataRelationshipsBuildsDataItem(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["builds"]]


class _SerializerBetaGroupCreateRequestDataRelationshipsBuildsDataItem(
    pydantic.BaseModel
):
    """
    Serializer for BetaGroupCreateRequestDataRelationshipsBuildsDataItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["builds"] = pydantic.Field(alias="type")


class BetaGroupUpdateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[BetaGroupUpdateRequestDataAttributes]
    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["betaGroups"]]


class _SerializerBetaGroupUpdateRequestData(pydantic.BaseModel):
    """
    Serializer for BetaGroupUpdateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[_SerializerBetaGroupUpdateRequestDataAttributes] = (
        pydantic.Field(alias="attributes", default=None)
    )
    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["betaGroups"] = pydantic.Field(alias="type")


class BetaGroupCreateRequestDataRelationshipsApp(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[BetaGroupCreateRequestDataRelationshipsAppData]


class _SerializerBetaGroupCreateRequestDataRelationshipsApp(pydantic.BaseModel):
    """
    Serializer for BetaGroupCreateRequestDataRelationshipsApp handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerBetaGroupCreateRequestDataRelationshipsAppData = pydantic.Field(
        alias="data"
    )


class BetaGroupCreateRequestDataRelationshipsBetaTesters(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        typing.List[BetaGroupCreateRequestDataRelationshipsBetaTestersDataItem]
    ]


class _SerializerBetaGroupCreateRequestDataRelationshipsBetaTesters(pydantic.BaseModel):
    """
    Serializer for BetaGroupCreateRequestDataRelationshipsBetaTesters handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        typing.List[
            _SerializerBetaGroupCreateRequestDataRelationshipsBetaTestersDataItem
        ]
    ] = pydantic.Field(alias="data", default=None)


class BetaGroupCreateRequestDataRelationshipsBuilds(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        typing.List[BetaGroupCreateRequestDataRelationshipsBuildsDataItem]
    ]


class _SerializerBetaGroupCreateRequestDataRelationshipsBuilds(pydantic.BaseModel):
    """
    Serializer for BetaGroupCreateRequestDataRelationshipsBuilds handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        typing.List[_SerializerBetaGroupCreateRequestDataRelationshipsBuildsDataItem]
    ] = pydantic.Field(alias="data", default=None)


class BetaGroupUpdateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[BetaGroupUpdateRequestData]


class _SerializerBetaGroupUpdateRequest(pydantic.BaseModel):
    """
    Serializer for BetaGroupUpdateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerBetaGroupUpdateRequestData = pydantic.Field(alias="data")


class BetaGroupCreateRequestDataRelationships(typing_extensions.TypedDict):
    """
    No description specified
    """

    app: typing_extensions.Required[BetaGroupCreateRequestDataRelationshipsApp]
    beta_testers: typing_extensions.NotRequired[
        BetaGroupCreateRequestDataRelationshipsBetaTesters
    ]
    builds: typing_extensions.NotRequired[BetaGroupCreateRequestDataRelationshipsBuilds]


class _SerializerBetaGroupCreateRequestDataRelationships(pydantic.BaseModel):
    """
    Serializer for BetaGroupCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    app: _SerializerBetaGroupCreateRequestDataRelationshipsApp = pydantic.Field(
        alias="app"
    )
    beta_testers: typing.Optional[
        _SerializerBetaGroupCreateRequestDataRelationshipsBetaTesters
    ] = pydantic.Field(alias="betaTesters", default=None)
    builds: typing.Optional[
        _SerializerBetaGroupCreateRequestDataRelationshipsBuilds
    ] = pydantic.Field(alias="builds", default=None)


class BetaGroupCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[BetaGroupCreateRequestDataAttributes]
    relationships: typing_extensions.Required[BetaGroupCreateRequestDataRelationships]
    type: typing_extensions.Required[typing_extensions.Literal["betaGroups"]]


class _SerializerBetaGroupCreateRequestData(pydantic.BaseModel):
    """
    Serializer for BetaGroupCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerBetaGroupCreateRequestDataAttributes = pydantic.Field(
        alias="attributes"
    )
    relationships: _SerializerBetaGroupCreateRequestDataRelationships = pydantic.Field(
        alias="relationships"
    )
    type: typing_extensions.Literal["betaGroups"] = pydantic.Field(alias="type")


class BetaGroupCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[BetaGroupCreateRequestData]


class _SerializerBetaGroupCreateRequest(pydantic.BaseModel):
    """
    Serializer for BetaGroupCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerBetaGroupCreateRequestData = pydantic.Field(alias="data")
