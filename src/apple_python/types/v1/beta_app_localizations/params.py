"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class BetaAppLocalizationUpdateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    description: typing_extensions.NotRequired[str]
    feedback_email: typing_extensions.NotRequired[str]
    marketing_url: typing_extensions.NotRequired[str]
    privacy_policy_url: typing_extensions.NotRequired[str]
    tv_os_privacy_policy: typing_extensions.NotRequired[str]


class _SerializerBetaAppLocalizationUpdateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for BetaAppLocalizationUpdateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    description: typing.Optional[str] = pydantic.Field(
        alias="description", default=None
    )
    feedback_email: typing.Optional[str] = pydantic.Field(
        alias="feedbackEmail", default=None
    )
    marketing_url: typing.Optional[str] = pydantic.Field(
        alias="marketingUrl", default=None
    )
    privacy_policy_url: typing.Optional[str] = pydantic.Field(
        alias="privacyPolicyUrl", default=None
    )
    tv_os_privacy_policy: typing.Optional[str] = pydantic.Field(
        alias="tvOsPrivacyPolicy", default=None
    )


class BetaAppLocalizationCreateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    description: typing_extensions.NotRequired[str]
    feedback_email: typing_extensions.NotRequired[str]
    locale_field: typing_extensions.Required[str]
    marketing_url: typing_extensions.NotRequired[str]
    privacy_policy_url: typing_extensions.NotRequired[str]
    tv_os_privacy_policy: typing_extensions.NotRequired[str]


class _SerializerBetaAppLocalizationCreateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for BetaAppLocalizationCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    description: typing.Optional[str] = pydantic.Field(
        alias="description", default=None
    )
    feedback_email: typing.Optional[str] = pydantic.Field(
        alias="feedbackEmail", default=None
    )
    locale_field: str = pydantic.Field(alias="locale")
    marketing_url: typing.Optional[str] = pydantic.Field(
        alias="marketingUrl", default=None
    )
    privacy_policy_url: typing.Optional[str] = pydantic.Field(
        alias="privacyPolicyUrl", default=None
    )
    tv_os_privacy_policy: typing.Optional[str] = pydantic.Field(
        alias="tvOsPrivacyPolicy", default=None
    )


class BetaAppLocalizationCreateRequestDataRelationshipsAppData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["apps"]]


class _SerializerBetaAppLocalizationCreateRequestDataRelationshipsAppData(
    pydantic.BaseModel
):
    """
    Serializer for BetaAppLocalizationCreateRequestDataRelationshipsAppData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["apps"] = pydantic.Field(alias="type")


class BetaAppLocalizationUpdateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[
        BetaAppLocalizationUpdateRequestDataAttributes
    ]
    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["betaAppLocalizations"]]


class _SerializerBetaAppLocalizationUpdateRequestData(pydantic.BaseModel):
    """
    Serializer for BetaAppLocalizationUpdateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[
        _SerializerBetaAppLocalizationUpdateRequestDataAttributes
    ] = pydantic.Field(alias="attributes", default=None)
    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["betaAppLocalizations"] = pydantic.Field(
        alias="type"
    )


class BetaAppLocalizationCreateRequestDataRelationshipsApp(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[
        BetaAppLocalizationCreateRequestDataRelationshipsAppData
    ]


class _SerializerBetaAppLocalizationCreateRequestDataRelationshipsApp(
    pydantic.BaseModel
):
    """
    Serializer for BetaAppLocalizationCreateRequestDataRelationshipsApp handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerBetaAppLocalizationCreateRequestDataRelationshipsAppData = (
        pydantic.Field(alias="data")
    )


class BetaAppLocalizationUpdateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[BetaAppLocalizationUpdateRequestData]


class _SerializerBetaAppLocalizationUpdateRequest(pydantic.BaseModel):
    """
    Serializer for BetaAppLocalizationUpdateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerBetaAppLocalizationUpdateRequestData = pydantic.Field(alias="data")


class BetaAppLocalizationCreateRequestDataRelationships(typing_extensions.TypedDict):
    """
    No description specified
    """

    app: typing_extensions.Required[
        BetaAppLocalizationCreateRequestDataRelationshipsApp
    ]


class _SerializerBetaAppLocalizationCreateRequestDataRelationships(pydantic.BaseModel):
    """
    Serializer for BetaAppLocalizationCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    app: _SerializerBetaAppLocalizationCreateRequestDataRelationshipsApp = (
        pydantic.Field(alias="app")
    )


class BetaAppLocalizationCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[
        BetaAppLocalizationCreateRequestDataAttributes
    ]
    relationships: typing_extensions.Required[
        BetaAppLocalizationCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[typing_extensions.Literal["betaAppLocalizations"]]


class _SerializerBetaAppLocalizationCreateRequestData(pydantic.BaseModel):
    """
    Serializer for BetaAppLocalizationCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerBetaAppLocalizationCreateRequestDataAttributes = (
        pydantic.Field(alias="attributes")
    )
    relationships: _SerializerBetaAppLocalizationCreateRequestDataRelationships = (
        pydantic.Field(alias="relationships")
    )
    type: typing_extensions.Literal["betaAppLocalizations"] = pydantic.Field(
        alias="type"
    )


class BetaAppLocalizationCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[BetaAppLocalizationCreateRequestData]


class _SerializerBetaAppLocalizationCreateRequest(pydantic.BaseModel):
    """
    Serializer for BetaAppLocalizationCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerBetaAppLocalizationCreateRequestData = pydantic.Field(alias="data")
