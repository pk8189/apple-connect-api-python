"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class SubscriptionUpdateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    family_sharable: typing_extensions.NotRequired[bool]
    group_level: typing_extensions.NotRequired[int]
    name: typing_extensions.NotRequired[str]
    review_note: typing_extensions.NotRequired[str]
    subscription_period: typing_extensions.NotRequired[
        typing_extensions.Literal[
            "ONE_WEEK",
            "ONE_MONTH",
            "TWO_MONTHS",
            "THREE_MONTHS",
            "SIX_MONTHS",
            "ONE_YEAR",
        ]
    ]


class _SerializerSubscriptionUpdateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for SubscriptionUpdateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    family_sharable: typing.Optional[bool] = pydantic.Field(
        alias="familySharable", default=None
    )
    group_level: typing.Optional[int] = pydantic.Field(alias="groupLevel", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    review_note: typing.Optional[str] = pydantic.Field(alias="reviewNote", default=None)
    subscription_period: typing.Optional[
        typing_extensions.Literal[
            "ONE_WEEK",
            "ONE_MONTH",
            "TWO_MONTHS",
            "THREE_MONTHS",
            "SIX_MONTHS",
            "ONE_YEAR",
        ]
    ] = pydantic.Field(alias="subscriptionPeriod", default=None)


class SubscriptionUpdateRequestDataRelationshipsIntroductoryOffersDataItem(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["subscriptionIntroductoryOffers"]
    ]


class _SerializerSubscriptionUpdateRequestDataRelationshipsIntroductoryOffersDataItem(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionUpdateRequestDataRelationshipsIntroductoryOffersDataItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["subscriptionIntroductoryOffers"] = pydantic.Field(
        alias="type"
    )


class SubscriptionUpdateRequestDataRelationshipsPricesDataItem(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["subscriptionPrices"]]


class _SerializerSubscriptionUpdateRequestDataRelationshipsPricesDataItem(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionUpdateRequestDataRelationshipsPricesDataItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["subscriptionPrices"] = pydantic.Field(alias="type")


class SubscriptionUpdateRequestDataRelationshipsPromotionalOffersDataItem(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["subscriptionPromotionalOffers"]
    ]


class _SerializerSubscriptionUpdateRequestDataRelationshipsPromotionalOffersDataItem(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionUpdateRequestDataRelationshipsPromotionalOffersDataItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["subscriptionPromotionalOffers"] = pydantic.Field(
        alias="type"
    )


class SubscriptionPromotionalOfferInlineCreateAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    duration: typing_extensions.Required[
        typing_extensions.Literal[
            "ONE_DAY",
            "THREE_DAYS",
            "ONE_WEEK",
            "TWO_WEEKS",
            "ONE_MONTH",
            "TWO_MONTHS",
            "THREE_MONTHS",
            "SIX_MONTHS",
            "ONE_YEAR",
        ]
    ]
    name: typing_extensions.Required[str]
    number_of_periods: typing_extensions.Required[int]
    offer_code: typing_extensions.Required[str]
    offer_mode: typing_extensions.Required[
        typing_extensions.Literal["PAY_AS_YOU_GO", "PAY_UP_FRONT", "FREE_TRIAL"]
    ]


class _SerializerSubscriptionPromotionalOfferInlineCreateAttributes(pydantic.BaseModel):
    """
    Serializer for SubscriptionPromotionalOfferInlineCreateAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    duration: typing_extensions.Literal[
        "ONE_DAY",
        "THREE_DAYS",
        "ONE_WEEK",
        "TWO_WEEKS",
        "ONE_MONTH",
        "TWO_MONTHS",
        "THREE_MONTHS",
        "SIX_MONTHS",
        "ONE_YEAR",
    ] = pydantic.Field(alias="duration")
    name: str = pydantic.Field(alias="name")
    number_of_periods: int = pydantic.Field(alias="numberOfPeriods")
    offer_code: str = pydantic.Field(alias="offerCode")
    offer_mode: typing_extensions.Literal[
        "PAY_AS_YOU_GO", "PAY_UP_FRONT", "FREE_TRIAL"
    ] = pydantic.Field(alias="offerMode")


class SubscriptionPromotionalOfferInlineCreateRelationshipsPricesDataItem(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["subscriptionPromotionalOfferPrices"]
    ]


class _SerializerSubscriptionPromotionalOfferInlineCreateRelationshipsPricesDataItem(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionPromotionalOfferInlineCreateRelationshipsPricesDataItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["subscriptionPromotionalOfferPrices"] = (
        pydantic.Field(alias="type")
    )


class SubscriptionPromotionalOfferInlineCreateRelationshipsSubscriptionData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["subscriptions"]]


class _SerializerSubscriptionPromotionalOfferInlineCreateRelationshipsSubscriptionData(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionPromotionalOfferInlineCreateRelationshipsSubscriptionData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["subscriptions"] = pydantic.Field(alias="type")


class SubscriptionPriceInlineCreateAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    preserve_current_price: typing_extensions.NotRequired[bool]
    start_date: typing_extensions.NotRequired[str]


class _SerializerSubscriptionPriceInlineCreateAttributes(pydantic.BaseModel):
    """
    Serializer for SubscriptionPriceInlineCreateAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    preserve_current_price: typing.Optional[bool] = pydantic.Field(
        alias="preserveCurrentPrice", default=None
    )
    start_date: typing.Optional[str] = pydantic.Field(alias="startDate", default=None)


class SubscriptionPriceInlineCreateRelationshipsSubscriptionData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["subscriptions"]]


class _SerializerSubscriptionPriceInlineCreateRelationshipsSubscriptionData(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionPriceInlineCreateRelationshipsSubscriptionData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["subscriptions"] = pydantic.Field(alias="type")


class SubscriptionPriceInlineCreateRelationshipsSubscriptionPricePointData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["subscriptionPricePoints"]
    ]


class _SerializerSubscriptionPriceInlineCreateRelationshipsSubscriptionPricePointData(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionPriceInlineCreateRelationshipsSubscriptionPricePointData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["subscriptionPricePoints"] = pydantic.Field(
        alias="type"
    )


class SubscriptionPriceInlineCreateRelationshipsTerritoryData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["territories"]]


class _SerializerSubscriptionPriceInlineCreateRelationshipsTerritoryData(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionPriceInlineCreateRelationshipsTerritoryData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["territories"] = pydantic.Field(alias="type")


class SubscriptionIntroductoryOfferInlineCreateAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    duration: typing_extensions.Required[
        typing_extensions.Literal[
            "ONE_DAY",
            "THREE_DAYS",
            "ONE_WEEK",
            "TWO_WEEKS",
            "ONE_MONTH",
            "TWO_MONTHS",
            "THREE_MONTHS",
            "SIX_MONTHS",
            "ONE_YEAR",
        ]
    ]
    end_date: typing_extensions.NotRequired[str]
    number_of_periods: typing_extensions.Required[int]
    offer_mode: typing_extensions.Required[
        typing_extensions.Literal["PAY_AS_YOU_GO", "PAY_UP_FRONT", "FREE_TRIAL"]
    ]
    start_date: typing_extensions.NotRequired[str]


class _SerializerSubscriptionIntroductoryOfferInlineCreateAttributes(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionIntroductoryOfferInlineCreateAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    duration: typing_extensions.Literal[
        "ONE_DAY",
        "THREE_DAYS",
        "ONE_WEEK",
        "TWO_WEEKS",
        "ONE_MONTH",
        "TWO_MONTHS",
        "THREE_MONTHS",
        "SIX_MONTHS",
        "ONE_YEAR",
    ] = pydantic.Field(alias="duration")
    end_date: typing.Optional[str] = pydantic.Field(alias="endDate", default=None)
    number_of_periods: int = pydantic.Field(alias="numberOfPeriods")
    offer_mode: typing_extensions.Literal[
        "PAY_AS_YOU_GO", "PAY_UP_FRONT", "FREE_TRIAL"
    ] = pydantic.Field(alias="offerMode")
    start_date: typing.Optional[str] = pydantic.Field(alias="startDate", default=None)


class SubscriptionIntroductoryOfferInlineCreateRelationshipsSubscriptionData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["subscriptions"]]


class _SerializerSubscriptionIntroductoryOfferInlineCreateRelationshipsSubscriptionData(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionIntroductoryOfferInlineCreateRelationshipsSubscriptionData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["subscriptions"] = pydantic.Field(alias="type")


class SubscriptionIntroductoryOfferInlineCreateRelationshipsSubscriptionPricePointData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[
        typing_extensions.Literal["subscriptionPricePoints"]
    ]


class _SerializerSubscriptionIntroductoryOfferInlineCreateRelationshipsSubscriptionPricePointData(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionIntroductoryOfferInlineCreateRelationshipsSubscriptionPricePointData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["subscriptionPricePoints"] = pydantic.Field(
        alias="type"
    )


class SubscriptionIntroductoryOfferInlineCreateRelationshipsTerritoryData(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["territories"]]


class _SerializerSubscriptionIntroductoryOfferInlineCreateRelationshipsTerritoryData(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionIntroductoryOfferInlineCreateRelationshipsTerritoryData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["territories"] = pydantic.Field(alias="type")


class SubscriptionCreateRequestDataAttributes(typing_extensions.TypedDict):
    """
    No description specified
    """

    family_sharable: typing_extensions.NotRequired[bool]
    group_level: typing_extensions.NotRequired[int]
    name: typing_extensions.Required[str]
    product_id: typing_extensions.Required[str]
    review_note: typing_extensions.NotRequired[str]
    subscription_period: typing_extensions.NotRequired[
        typing_extensions.Literal[
            "ONE_WEEK",
            "ONE_MONTH",
            "TWO_MONTHS",
            "THREE_MONTHS",
            "SIX_MONTHS",
            "ONE_YEAR",
        ]
    ]


class _SerializerSubscriptionCreateRequestDataAttributes(pydantic.BaseModel):
    """
    Serializer for SubscriptionCreateRequestDataAttributes handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    family_sharable: typing.Optional[bool] = pydantic.Field(
        alias="familySharable", default=None
    )
    group_level: typing.Optional[int] = pydantic.Field(alias="groupLevel", default=None)
    name: str = pydantic.Field(alias="name")
    product_id: str = pydantic.Field(alias="productId")
    review_note: typing.Optional[str] = pydantic.Field(alias="reviewNote", default=None)
    subscription_period: typing.Optional[
        typing_extensions.Literal[
            "ONE_WEEK",
            "ONE_MONTH",
            "TWO_MONTHS",
            "THREE_MONTHS",
            "SIX_MONTHS",
            "ONE_YEAR",
        ]
    ] = pydantic.Field(alias="subscriptionPeriod", default=None)


class SubscriptionCreateRequestDataRelationshipsGroupData(typing_extensions.TypedDict):
    """
    No description specified
    """

    id: typing_extensions.Required[str]
    type: typing_extensions.Required[typing_extensions.Literal["subscriptionGroups"]]


class _SerializerSubscriptionCreateRequestDataRelationshipsGroupData(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionCreateRequestDataRelationshipsGroupData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: str = pydantic.Field(alias="id")
    type: typing_extensions.Literal["subscriptionGroups"] = pydantic.Field(alias="type")


class SubscriptionUpdateRequestDataRelationshipsIntroductoryOffers(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        typing.List[
            SubscriptionUpdateRequestDataRelationshipsIntroductoryOffersDataItem
        ]
    ]


class _SerializerSubscriptionUpdateRequestDataRelationshipsIntroductoryOffers(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionUpdateRequestDataRelationshipsIntroductoryOffers handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        typing.List[
            _SerializerSubscriptionUpdateRequestDataRelationshipsIntroductoryOffersDataItem
        ]
    ] = pydantic.Field(alias="data", default=None)


class SubscriptionUpdateRequestDataRelationshipsPrices(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        typing.List[SubscriptionUpdateRequestDataRelationshipsPricesDataItem]
    ]


class _SerializerSubscriptionUpdateRequestDataRelationshipsPrices(pydantic.BaseModel):
    """
    Serializer for SubscriptionUpdateRequestDataRelationshipsPrices handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        typing.List[_SerializerSubscriptionUpdateRequestDataRelationshipsPricesDataItem]
    ] = pydantic.Field(alias="data", default=None)


class SubscriptionUpdateRequestDataRelationshipsPromotionalOffers(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        typing.List[SubscriptionUpdateRequestDataRelationshipsPromotionalOffersDataItem]
    ]


class _SerializerSubscriptionUpdateRequestDataRelationshipsPromotionalOffers(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionUpdateRequestDataRelationshipsPromotionalOffers handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        typing.List[
            _SerializerSubscriptionUpdateRequestDataRelationshipsPromotionalOffersDataItem
        ]
    ] = pydantic.Field(alias="data", default=None)


class SubscriptionPromotionalOfferInlineCreateRelationshipsPrices(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        typing.List[SubscriptionPromotionalOfferInlineCreateRelationshipsPricesDataItem]
    ]


class _SerializerSubscriptionPromotionalOfferInlineCreateRelationshipsPrices(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionPromotionalOfferInlineCreateRelationshipsPrices handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        typing.List[
            _SerializerSubscriptionPromotionalOfferInlineCreateRelationshipsPricesDataItem
        ]
    ] = pydantic.Field(alias="data", default=None)


class SubscriptionPromotionalOfferInlineCreateRelationshipsSubscription(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        SubscriptionPromotionalOfferInlineCreateRelationshipsSubscriptionData
    ]


class _SerializerSubscriptionPromotionalOfferInlineCreateRelationshipsSubscription(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionPromotionalOfferInlineCreateRelationshipsSubscription handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        _SerializerSubscriptionPromotionalOfferInlineCreateRelationshipsSubscriptionData
    ] = pydantic.Field(alias="data", default=None)


class SubscriptionPriceInlineCreateRelationshipsSubscription(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        SubscriptionPriceInlineCreateRelationshipsSubscriptionData
    ]


class _SerializerSubscriptionPriceInlineCreateRelationshipsSubscription(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionPriceInlineCreateRelationshipsSubscription handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        _SerializerSubscriptionPriceInlineCreateRelationshipsSubscriptionData
    ] = pydantic.Field(alias="data", default=None)


class SubscriptionPriceInlineCreateRelationshipsSubscriptionPricePoint(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        SubscriptionPriceInlineCreateRelationshipsSubscriptionPricePointData
    ]


class _SerializerSubscriptionPriceInlineCreateRelationshipsSubscriptionPricePoint(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionPriceInlineCreateRelationshipsSubscriptionPricePoint handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        _SerializerSubscriptionPriceInlineCreateRelationshipsSubscriptionPricePointData
    ] = pydantic.Field(alias="data", default=None)


class SubscriptionPriceInlineCreateRelationshipsTerritory(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        SubscriptionPriceInlineCreateRelationshipsTerritoryData
    ]


class _SerializerSubscriptionPriceInlineCreateRelationshipsTerritory(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionPriceInlineCreateRelationshipsTerritory handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        _SerializerSubscriptionPriceInlineCreateRelationshipsTerritoryData
    ] = pydantic.Field(alias="data", default=None)


class SubscriptionIntroductoryOfferInlineCreateRelationshipsSubscription(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        SubscriptionIntroductoryOfferInlineCreateRelationshipsSubscriptionData
    ]


class _SerializerSubscriptionIntroductoryOfferInlineCreateRelationshipsSubscription(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionIntroductoryOfferInlineCreateRelationshipsSubscription handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        _SerializerSubscriptionIntroductoryOfferInlineCreateRelationshipsSubscriptionData
    ] = pydantic.Field(alias="data", default=None)


class SubscriptionIntroductoryOfferInlineCreateRelationshipsSubscriptionPricePoint(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        SubscriptionIntroductoryOfferInlineCreateRelationshipsSubscriptionPricePointData
    ]


class _SerializerSubscriptionIntroductoryOfferInlineCreateRelationshipsSubscriptionPricePoint(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionIntroductoryOfferInlineCreateRelationshipsSubscriptionPricePoint handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        _SerializerSubscriptionIntroductoryOfferInlineCreateRelationshipsSubscriptionPricePointData
    ] = pydantic.Field(alias="data", default=None)


class SubscriptionIntroductoryOfferInlineCreateRelationshipsTerritory(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    data: typing_extensions.NotRequired[
        SubscriptionIntroductoryOfferInlineCreateRelationshipsTerritoryData
    ]


class _SerializerSubscriptionIntroductoryOfferInlineCreateRelationshipsTerritory(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionIntroductoryOfferInlineCreateRelationshipsTerritory handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: typing.Optional[
        _SerializerSubscriptionIntroductoryOfferInlineCreateRelationshipsTerritoryData
    ] = pydantic.Field(alias="data", default=None)


class SubscriptionCreateRequestDataRelationshipsGroup(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[
        SubscriptionCreateRequestDataRelationshipsGroupData
    ]


class _SerializerSubscriptionCreateRequestDataRelationshipsGroup(pydantic.BaseModel):
    """
    Serializer for SubscriptionCreateRequestDataRelationshipsGroup handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerSubscriptionCreateRequestDataRelationshipsGroupData = (
        pydantic.Field(alias="data")
    )


class SubscriptionUpdateRequestDataRelationships(typing_extensions.TypedDict):
    """
    No description specified
    """

    introductory_offers: typing_extensions.NotRequired[
        SubscriptionUpdateRequestDataRelationshipsIntroductoryOffers
    ]
    prices: typing_extensions.NotRequired[
        SubscriptionUpdateRequestDataRelationshipsPrices
    ]
    promotional_offers: typing_extensions.NotRequired[
        SubscriptionUpdateRequestDataRelationshipsPromotionalOffers
    ]


class _SerializerSubscriptionUpdateRequestDataRelationships(pydantic.BaseModel):
    """
    Serializer for SubscriptionUpdateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    introductory_offers: typing.Optional[
        _SerializerSubscriptionUpdateRequestDataRelationshipsIntroductoryOffers
    ] = pydantic.Field(alias="introductoryOffers", default=None)
    prices: typing.Optional[
        _SerializerSubscriptionUpdateRequestDataRelationshipsPrices
    ] = pydantic.Field(alias="prices", default=None)
    promotional_offers: typing.Optional[
        _SerializerSubscriptionUpdateRequestDataRelationshipsPromotionalOffers
    ] = pydantic.Field(alias="promotionalOffers", default=None)


class SubscriptionPromotionalOfferInlineCreateRelationships(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    prices: typing_extensions.NotRequired[
        SubscriptionPromotionalOfferInlineCreateRelationshipsPrices
    ]
    subscription: typing_extensions.NotRequired[
        SubscriptionPromotionalOfferInlineCreateRelationshipsSubscription
    ]


class _SerializerSubscriptionPromotionalOfferInlineCreateRelationships(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionPromotionalOfferInlineCreateRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    prices: typing.Optional[
        _SerializerSubscriptionPromotionalOfferInlineCreateRelationshipsPrices
    ] = pydantic.Field(alias="prices", default=None)
    subscription: typing.Optional[
        _SerializerSubscriptionPromotionalOfferInlineCreateRelationshipsSubscription
    ] = pydantic.Field(alias="subscription", default=None)


class SubscriptionPriceInlineCreateRelationships(typing_extensions.TypedDict):
    """
    No description specified
    """

    subscription: typing_extensions.NotRequired[
        SubscriptionPriceInlineCreateRelationshipsSubscription
    ]
    subscription_price_point: typing_extensions.NotRequired[
        SubscriptionPriceInlineCreateRelationshipsSubscriptionPricePoint
    ]
    territory: typing_extensions.NotRequired[
        SubscriptionPriceInlineCreateRelationshipsTerritory
    ]


class _SerializerSubscriptionPriceInlineCreateRelationships(pydantic.BaseModel):
    """
    Serializer for SubscriptionPriceInlineCreateRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    subscription: typing.Optional[
        _SerializerSubscriptionPriceInlineCreateRelationshipsSubscription
    ] = pydantic.Field(alias="subscription", default=None)
    subscription_price_point: typing.Optional[
        _SerializerSubscriptionPriceInlineCreateRelationshipsSubscriptionPricePoint
    ] = pydantic.Field(alias="subscriptionPricePoint", default=None)
    territory: typing.Optional[
        _SerializerSubscriptionPriceInlineCreateRelationshipsTerritory
    ] = pydantic.Field(alias="territory", default=None)


class SubscriptionIntroductoryOfferInlineCreateRelationships(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    subscription: typing_extensions.NotRequired[
        SubscriptionIntroductoryOfferInlineCreateRelationshipsSubscription
    ]
    subscription_price_point: typing_extensions.NotRequired[
        SubscriptionIntroductoryOfferInlineCreateRelationshipsSubscriptionPricePoint
    ]
    territory: typing_extensions.NotRequired[
        SubscriptionIntroductoryOfferInlineCreateRelationshipsTerritory
    ]


class _SerializerSubscriptionIntroductoryOfferInlineCreateRelationships(
    pydantic.BaseModel
):
    """
    Serializer for SubscriptionIntroductoryOfferInlineCreateRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    subscription: typing.Optional[
        _SerializerSubscriptionIntroductoryOfferInlineCreateRelationshipsSubscription
    ] = pydantic.Field(alias="subscription", default=None)
    subscription_price_point: typing.Optional[
        _SerializerSubscriptionIntroductoryOfferInlineCreateRelationshipsSubscriptionPricePoint
    ] = pydantic.Field(alias="subscriptionPricePoint", default=None)
    territory: typing.Optional[
        _SerializerSubscriptionIntroductoryOfferInlineCreateRelationshipsTerritory
    ] = pydantic.Field(alias="territory", default=None)


class SubscriptionCreateRequestDataRelationships(typing_extensions.TypedDict):
    """
    No description specified
    """

    group: typing_extensions.Required[SubscriptionCreateRequestDataRelationshipsGroup]


class _SerializerSubscriptionCreateRequestDataRelationships(pydantic.BaseModel):
    """
    Serializer for SubscriptionCreateRequestDataRelationships handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    group: _SerializerSubscriptionCreateRequestDataRelationshipsGroup = pydantic.Field(
        alias="group"
    )


class SubscriptionUpdateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[SubscriptionUpdateRequestDataAttributes]
    id: typing_extensions.Required[str]
    relationships: typing_extensions.NotRequired[
        SubscriptionUpdateRequestDataRelationships
    ]
    type: typing_extensions.Required[typing_extensions.Literal["subscriptions"]]


class _SerializerSubscriptionUpdateRequestData(pydantic.BaseModel):
    """
    Serializer for SubscriptionUpdateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[_SerializerSubscriptionUpdateRequestDataAttributes] = (
        pydantic.Field(alias="attributes", default=None)
    )
    id: str = pydantic.Field(alias="id")
    relationships: typing.Optional[
        _SerializerSubscriptionUpdateRequestDataRelationships
    ] = pydantic.Field(alias="relationships", default=None)
    type: typing_extensions.Literal["subscriptions"] = pydantic.Field(alias="type")


class SubscriptionPromotionalOfferInlineCreate(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[
        SubscriptionPromotionalOfferInlineCreateAttributes
    ]
    id: typing_extensions.NotRequired[str]
    relationships: typing_extensions.NotRequired[
        SubscriptionPromotionalOfferInlineCreateRelationships
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["subscriptionPromotionalOffers"]
    ]


class _SerializerSubscriptionPromotionalOfferInlineCreate(pydantic.BaseModel):
    """
    Serializer for SubscriptionPromotionalOfferInlineCreate handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerSubscriptionPromotionalOfferInlineCreateAttributes = (
        pydantic.Field(alias="attributes")
    )
    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    relationships: typing.Optional[
        _SerializerSubscriptionPromotionalOfferInlineCreateRelationships
    ] = pydantic.Field(alias="relationships", default=None)
    type: typing_extensions.Literal["subscriptionPromotionalOffers"] = pydantic.Field(
        alias="type"
    )


class SubscriptionPriceInlineCreate(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.NotRequired[SubscriptionPriceInlineCreateAttributes]
    id: typing_extensions.NotRequired[str]
    relationships: typing_extensions.NotRequired[
        SubscriptionPriceInlineCreateRelationships
    ]
    type: typing_extensions.Required[typing_extensions.Literal["subscriptionPrices"]]


class _SerializerSubscriptionPriceInlineCreate(pydantic.BaseModel):
    """
    Serializer for SubscriptionPriceInlineCreate handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: typing.Optional[_SerializerSubscriptionPriceInlineCreateAttributes] = (
        pydantic.Field(alias="attributes", default=None)
    )
    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    relationships: typing.Optional[
        _SerializerSubscriptionPriceInlineCreateRelationships
    ] = pydantic.Field(alias="relationships", default=None)
    type: typing_extensions.Literal["subscriptionPrices"] = pydantic.Field(alias="type")


class SubscriptionIntroductoryOfferInlineCreate(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[
        SubscriptionIntroductoryOfferInlineCreateAttributes
    ]
    id: typing_extensions.NotRequired[str]
    relationships: typing_extensions.NotRequired[
        SubscriptionIntroductoryOfferInlineCreateRelationships
    ]
    type: typing_extensions.Required[
        typing_extensions.Literal["subscriptionIntroductoryOffers"]
    ]


class _SerializerSubscriptionIntroductoryOfferInlineCreate(pydantic.BaseModel):
    """
    Serializer for SubscriptionIntroductoryOfferInlineCreate handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerSubscriptionIntroductoryOfferInlineCreateAttributes = (
        pydantic.Field(alias="attributes")
    )
    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    relationships: typing.Optional[
        _SerializerSubscriptionIntroductoryOfferInlineCreateRelationships
    ] = pydantic.Field(alias="relationships", default=None)
    type: typing_extensions.Literal["subscriptionIntroductoryOffers"] = pydantic.Field(
        alias="type"
    )


class SubscriptionCreateRequestData(typing_extensions.TypedDict):
    """
    No description specified
    """

    attributes: typing_extensions.Required[SubscriptionCreateRequestDataAttributes]
    relationships: typing_extensions.Required[
        SubscriptionCreateRequestDataRelationships
    ]
    type: typing_extensions.Required[typing_extensions.Literal["subscriptions"]]


class _SerializerSubscriptionCreateRequestData(pydantic.BaseModel):
    """
    Serializer for SubscriptionCreateRequestData handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    attributes: _SerializerSubscriptionCreateRequestDataAttributes = pydantic.Field(
        alias="attributes"
    )
    relationships: _SerializerSubscriptionCreateRequestDataRelationships = (
        pydantic.Field(alias="relationships")
    )
    type: typing_extensions.Literal["subscriptions"] = pydantic.Field(alias="type")


class SubscriptionUpdateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[SubscriptionUpdateRequestData]
    included: typing_extensions.NotRequired[
        typing.List[
            typing.Union[
                SubscriptionPromotionalOfferInlineCreate,
                SubscriptionPriceInlineCreate,
                SubscriptionIntroductoryOfferInlineCreate,
            ]
        ]
    ]


class _SerializerSubscriptionUpdateRequest(pydantic.BaseModel):
    """
    Serializer for SubscriptionUpdateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerSubscriptionUpdateRequestData = pydantic.Field(alias="data")
    included: typing.Optional[
        typing.List[
            typing.Union[
                _SerializerSubscriptionPromotionalOfferInlineCreate,
                _SerializerSubscriptionPriceInlineCreate,
                _SerializerSubscriptionIntroductoryOfferInlineCreate,
            ]
        ]
    ] = pydantic.Field(alias="included", default=None)


class SubscriptionCreateRequest(typing_extensions.TypedDict):
    """
    No description specified
    """

    data: typing_extensions.Required[SubscriptionCreateRequestData]


class _SerializerSubscriptionCreateRequest(pydantic.BaseModel):
    """
    Serializer for SubscriptionCreateRequest handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    data: _SerializerSubscriptionCreateRequestData = pydantic.Field(alias="data")
